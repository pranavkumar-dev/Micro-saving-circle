{"version":3,"file":"util-logger.module.js","sources":["../src/util-logger.ts"],"sourcesContent":["interface IConfig {\n  get: <T>(key: string) => T\n}\n\ntype Config = (IConfig & (() => IConfig)) | null\n\n// Config dependency injected into logger to break circular dependency\nlet config: Config = null\nexport const setConfig = (_config: any) => {\n  config = _config\n}\n\n/**\n * The levels of the logger\n */\nexport enum LEVELS {\n  debug = 5,\n  info = 4,\n  log = 3,\n  warn = 2,\n  error = 1,\n}\n\n/**\n * Builds a message formatted for the logger\n * @param options - The options for the log\n * @param options.title - The title of the log\n * @param options.message - The message of the log\n * @returns The message formatted for the logger\n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = (options: {\n  title: string\n  message: string\n}): string[] => {\n  const {title, message} = options\n  return [\n    `\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `\n      .replace(/\\n[^\\S\\r\\n]+/g, \"\\n\")\n      .trim(),\n    \"font-weight:bold;font-family:monospace;\",\n  ]\n}\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * @param options - The options for the log\n * @param options.title - The title of the log\n * @param options.message - The message of the log\n * @param options.level - The level of the log\n * @param options.always - Whether to always show the log\n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n */\nexport const log = async (options: {\n  title: string\n  message: string\n  level: number\n  always?: boolean\n}) => {\n  const {title, message, level, always} = options\n  const configLoggerLevel =\n    (await config?.()?.get<number>(\"logger.level\")) ?? LEVELS.warn\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return\n\n  const loggerMessageArgs = buildLoggerMessageArgs({title, message})\n\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs)\n      break\n    case LEVELS.info:\n      console.info(...loggerMessageArgs)\n      break\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs)\n      break\n    case LEVELS.error:\n      console.error(...loggerMessageArgs)\n      break\n    default:\n      console.log(...loggerMessageArgs)\n  }\n}\n\n/**\n * Logs a deprecation notice.  If a callback is provided this function returns a function that will call the callback and log the deprecation notice, otherwise it just logs the deprecation notice.\n * @param options - The options for the log\n * @param options.pkg - The package that is being deprecated\n * @param options.subject - The subject of the deprecation\n * @param options.transition - The transition path for the deprecation\n * @param options.level - The level of the log\n * @param options.message - The message of the log\n * @param options.callback - A callback to run after the log\n * @returns A function that will call the callback and log the deprecation notice if the callback is provided\n * @example\n * // Logs a deprecation notice\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * @example\n * function someFunction() { ... }\n * const deprecatedFunction = log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/foo/bar/TRANSITIONS.md\", message: \"Descriptive message\", level: LEVELS.warn, callback: someFunction })\n * deprecatedFunction() // Calls someFunction and logs the deprecation notice\n */\nlog.deprecate = <T, U>(options: {\n  pkg?: string\n  subject?: string\n  transition?: string\n  level?: number\n  message?: string\n  callback?: (...args: T[]) => U\n}): ((...args: T[]) => Promise<U>) | Promise<void> => {\n  const {\n    pkg,\n    subject,\n    transition,\n    level = LEVELS.warn,\n    message = \"\",\n    callback = null,\n  } = options\n\n  const capitalizeFirstLetter = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  const logMessage = () =>\n    log({\n      title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n      message: `\n      ${\n        subject\n          ? `${capitalizeFirstLetter(\n              subject\n            )} is deprecated and will cease to work in future releases${\n              pkg ? \" of \" + pkg : \"\"\n            }.`\n          : \"\"\n      }${message ? \"\\n\" + message : \"\"}${\n        transition\n          ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}`\n          : \"\"\n      }\n    `.trim(),\n      level,\n    })\n\n  if (typeof callback === \"function\") {\n    return async (...args: T[]) => {\n      await logMessage()\n      return await callback(...args)\n    }\n  }\n  return logMessage()\n}\n"],"names":["config","setConfig","_config","LEVELS","buildLoggerMessageArgs","options","title","message","replace","trim","log","level","always","configLoggerLevel","get","warn","loggerMessageArgs","debug","console","info","error","deprecate","pkg","subject","transition","callback","capitalizeFirstLetter","str","charAt","toUpperCase","slice","logMessage","arguments"],"mappings":"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"}