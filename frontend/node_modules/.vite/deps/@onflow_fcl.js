import {
  BaseError,
  Hash,
  LruMap,
  abytes,
  aexists,
  anumber,
  aoutput,
  checksumAddress,
  clean as clean2,
  concat,
  createHasher as createHasher2,
  createView,
  createXOFer,
  defineFormatter,
  from,
  fromBoolean,
  fromBytes,
  fromNumber,
  fromString,
  fromString2,
  hexToBigInt,
  hexToNumber,
  isHex,
  keccak256,
  numberToHex,
  padLeft,
  padRight,
  rotl as rotl2,
  rotr,
  size,
  size2,
  swap32IfBE,
  toBytes,
  toHex,
  u32
} from "./chunk-47LZZA36.js";
import {
  Chi,
  HashMD,
  Maj
} from "./chunk-JWYA77PC.js";
import {
  clean,
  createHasher,
  rotl
} from "./chunk-2BLWM4FZ.js";
import {
  __commonJS,
  __esm,
  __export,
  __publicField,
  __reExport,
  __toCommonJS,
  __toESM
} from "./chunk-LXPOGQIV.js";

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i6 = 0, len = code2.length; i6 < len; ++i6) {
      lookup[i6] = code2[i6];
      revLookup[code2.charCodeAt(i6)] = i6;
    }
    var i6;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i7;
      for (i7 = 0; i7 < len2; i7 += 4) {
        tmp = revLookup[b64.charCodeAt(i7)] << 18 | revLookup[b64.charCodeAt(i7 + 1)] << 12 | revLookup[b64.charCodeAt(i7 + 2)] << 6 | revLookup[b64.charCodeAt(i7 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i7)] << 2 | revLookup[b64.charCodeAt(i7 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i7)] << 10 | revLookup[b64.charCodeAt(i7 + 1)] << 4 | revLookup[b64.charCodeAt(i7 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i7 = start; i7 < end; i7 += 3) {
        tmp = (uint8[i7] << 16 & 16711680) + (uint8[i7 + 1] << 8 & 65280) + (uint8[i7 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i7 = 0, len22 = len2 - extraBytes; i7 < len22; i7 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i7, i7 + maxChunkLength > len22 ? len22 : i7 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e3, m6;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i6 = isLE ? nBytes - 1 : 0;
      var d8 = isLE ? -1 : 1;
      var s4 = buffer[offset + i6];
      i6 += d8;
      e3 = s4 & (1 << -nBits) - 1;
      s4 >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e3 = e3 * 256 + buffer[offset + i6], i6 += d8, nBits -= 8) {
      }
      m6 = e3 & (1 << -nBits) - 1;
      e3 >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m6 = m6 * 256 + buffer[offset + i6], i6 += d8, nBits -= 8) {
      }
      if (e3 === 0) {
        e3 = 1 - eBias;
      } else if (e3 === eMax) {
        return m6 ? NaN : (s4 ? -1 : 1) * Infinity;
      } else {
        m6 = m6 + Math.pow(2, mLen);
        e3 = e3 - eBias;
      }
      return (s4 ? -1 : 1) * m6 * Math.pow(2, e3 - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e3, m6, c8;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt5 = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i6 = isLE ? 0 : nBytes - 1;
      var d8 = isLE ? 1 : -1;
      var s4 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m6 = isNaN(value) ? 1 : 0;
        e3 = eMax;
      } else {
        e3 = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c8 = Math.pow(2, -e3)) < 1) {
          e3--;
          c8 *= 2;
        }
        if (e3 + eBias >= 1) {
          value += rt5 / c8;
        } else {
          value += rt5 * Math.pow(2, 1 - eBias);
        }
        if (value * c8 >= 2) {
          e3++;
          c8 /= 2;
        }
        if (e3 + eBias >= eMax) {
          m6 = 0;
          e3 = eMax;
        } else if (e3 + eBias >= 1) {
          m6 = (value * c8 - 1) * Math.pow(2, mLen);
          e3 = e3 + eBias;
        } else {
          m6 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e3 = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i6] = m6 & 255, i6 += d8, m6 /= 256, mLen -= 8) {
      }
      e3 = e3 << mLen | m6;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i6] = e3 & 255, i6 += d8, e3 /= 256, eLen -= 8) {
      }
      buffer[offset + i6 - d8] |= s4 * 128;
    };
  }
});

// node_modules/buffer/index.js
var require_buffer = __commonJS({
  "node_modules/buffer/index.js"(exports) {
    "use strict";
    var base643 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer4;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer4.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer4.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e3) {
        return false;
      }
    }
    Object.defineProperty(Buffer4.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer4.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer4.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer4.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length2) {
      if (length2 > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length2 + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length2);
      Object.setPrototypeOf(buf, Buffer4.prototype);
      return buf;
    }
    function Buffer4(arg2, encodingOrOffset, length2) {
      if (typeof arg2 === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe2(arg2);
      }
      return from8(arg2, encodingOrOffset, length2);
    }
    Buffer4.poolSize = 8192;
    function from8(value, encodingOrOffset, length2) {
      if (typeof value === "string") {
        return fromString5(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length2);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length2);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer4.from(valueOf, encodingOrOffset, length2);
      }
      const b5 = fromObject(value);
      if (b5)
        return b5;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer4.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length2);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer4.from = function(value, encodingOrOffset, length2) {
      return from8(value, encodingOrOffset, length2);
    };
    Object.setPrototypeOf(Buffer4.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer4, Uint8Array);
    function assertSize(size4) {
      if (typeof size4 !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size4 < 0) {
        throw new RangeError('The value "' + size4 + '" is invalid for option "size"');
      }
    }
    function alloc(size4, fill, encoding) {
      assertSize(size4);
      if (size4 <= 0) {
        return createBuffer(size4);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size4).fill(fill, encoding) : createBuffer(size4).fill(fill);
      }
      return createBuffer(size4);
    }
    Buffer4.alloc = function(size4, fill, encoding) {
      return alloc(size4, fill, encoding);
    };
    function allocUnsafe2(size4) {
      assertSize(size4);
      return createBuffer(size4 < 0 ? 0 : checked(size4) | 0);
    }
    Buffer4.allocUnsafe = function(size4) {
      return allocUnsafe2(size4);
    };
    Buffer4.allocUnsafeSlow = function(size4) {
      return allocUnsafe2(size4);
    };
    function fromString5(string2, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer4.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length2 = byteLength(string2, encoding) | 0;
      let buf = createBuffer(length2);
      const actual = buf.write(string2, encoding);
      if (actual !== length2) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      const length2 = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length2);
      for (let i6 = 0; i6 < length2; i6 += 1) {
        buf[i6] = array[i6] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length2) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length2 || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length2 === void 0) {
        buf = new Uint8Array(array);
      } else if (length2 === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length2);
      }
      Object.setPrototypeOf(buf, Buffer4.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer4.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length2) {
      if (length2 >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length2 | 0;
    }
    function SlowBuffer(length2) {
      if (+length2 != length2) {
        length2 = 0;
      }
      return Buffer4.alloc(+length2);
    }
    Buffer4.isBuffer = function isBuffer(b5) {
      return b5 != null && b5._isBuffer === true && b5 !== Buffer4.prototype;
    };
    Buffer4.compare = function compare4(a4, b5) {
      if (isInstance(a4, Uint8Array))
        a4 = Buffer4.from(a4, a4.offset, a4.byteLength);
      if (isInstance(b5, Uint8Array))
        b5 = Buffer4.from(b5, b5.offset, b5.byteLength);
      if (!Buffer4.isBuffer(a4) || !Buffer4.isBuffer(b5)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a4 === b5)
        return 0;
      let x7 = a4.length;
      let y6 = b5.length;
      for (let i6 = 0, len = Math.min(x7, y6); i6 < len; ++i6) {
        if (a4[i6] !== b5[i6]) {
          x7 = a4[i6];
          y6 = b5[i6];
          break;
        }
      }
      if (x7 < y6)
        return -1;
      if (y6 < x7)
        return 1;
      return 0;
    };
    Buffer4.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer4.concat = function concat4(list, length2) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer4.alloc(0);
      }
      let i6;
      if (length2 === void 0) {
        length2 = 0;
        for (i6 = 0; i6 < list.length; ++i6) {
          length2 += list[i6].length;
        }
      }
      const buffer = Buffer4.allocUnsafe(length2);
      let pos = 0;
      for (i6 = 0; i6 < list.length; ++i6) {
        let buf = list[i6];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            if (!Buffer4.isBuffer(buf))
              buf = Buffer4.from(buf);
            buf.copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer4.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string2, encoding) {
      if (Buffer4.isBuffer(string2)) {
        return string2.length;
      }
      if (ArrayBuffer.isView(string2) || isInstance(string2, ArrayBuffer)) {
        return string2.byteLength;
      }
      if (typeof string2 !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string2
        );
      }
      const len = string2.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string2).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string2).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string2).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer4.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer4.prototype._isBuffer = true;
    function swap(b5, n6, m6) {
      const i6 = b5[n6];
      b5[n6] = b5[m6];
      b5[m6] = i6;
    }
    Buffer4.prototype.swap16 = function swap16() {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i6 = 0; i6 < len; i6 += 2) {
        swap(this, i6, i6 + 1);
      }
      return this;
    };
    Buffer4.prototype.swap32 = function swap32() {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i6 = 0; i6 < len; i6 += 4) {
        swap(this, i6, i6 + 3);
        swap(this, i6 + 1, i6 + 2);
      }
      return this;
    };
    Buffer4.prototype.swap64 = function swap64() {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i6 = 0; i6 < len; i6 += 8) {
        swap(this, i6, i6 + 7);
        swap(this, i6 + 1, i6 + 6);
        swap(this, i6 + 2, i6 + 5);
        swap(this, i6 + 3, i6 + 4);
      }
      return this;
    };
    Buffer4.prototype.toString = function toString4() {
      const length2 = this.length;
      if (length2 === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length2);
      return slowToString.apply(this, arguments);
    };
    Buffer4.prototype.toLocaleString = Buffer4.prototype.toString;
    Buffer4.prototype.equals = function equals4(b5) {
      if (!Buffer4.isBuffer(b5))
        throw new TypeError("Argument must be a Buffer");
      if (this === b5)
        return true;
      return Buffer4.compare(this, b5) === 0;
    };
    Buffer4.prototype.inspect = function inspect() {
      let str = "";
      const max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max)
        str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer4.prototype[customInspectSymbol] = Buffer4.prototype.inspect;
    }
    Buffer4.prototype.compare = function compare4(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer4.from(target, target.offset, target.byteLength);
      }
      if (!Buffer4.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      let x7 = thisEnd - thisStart;
      let y6 = end - start;
      const len = Math.min(x7, y6);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i6 = 0; i6 < len; ++i6) {
        if (thisCopy[i6] !== targetCopy[i6]) {
          x7 = thisCopy[i6];
          y6 = targetCopy[i6];
          break;
        }
      }
      if (x7 < y6)
        return -1;
      if (y6 < x7)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer4.from(val, encoding);
      }
      if (Buffer4.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read2(buf, i7) {
        if (indexSize === 1) {
          return buf[i7];
        } else {
          return buf.readUInt16BE(i7 * indexSize);
        }
      }
      let i6;
      if (dir) {
        let foundIndex = -1;
        for (i6 = byteOffset; i6 < arrLength; i6++) {
          if (read2(arr, i6) === read2(val, foundIndex === -1 ? 0 : i6 - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i6;
            if (i6 - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i6 -= i6 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i6 = byteOffset; i6 >= 0; i6--) {
          let found = true;
          for (let j6 = 0; j6 < valLength; j6++) {
            if (read2(arr, i6 + j6) !== read2(val, j6)) {
              found = false;
              break;
            }
          }
          if (found)
            return i6;
        }
      }
      return -1;
    }
    Buffer4.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer4.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer4.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string2, offset, length2) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length2) {
        length2 = remaining;
      } else {
        length2 = Number(length2);
        if (length2 > remaining) {
          length2 = remaining;
        }
      }
      const strLen = string2.length;
      if (length2 > strLen / 2) {
        length2 = strLen / 2;
      }
      let i6;
      for (i6 = 0; i6 < length2; ++i6) {
        const parsed = parseInt(string2.substr(i6 * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i6;
        buf[offset + i6] = parsed;
      }
      return i6;
    }
    function utf8Write(buf, string2, offset, length2) {
      return blitBuffer(utf8ToBytes(string2, buf.length - offset), buf, offset, length2);
    }
    function asciiWrite(buf, string2, offset, length2) {
      return blitBuffer(asciiToBytes(string2), buf, offset, length2);
    }
    function base64Write(buf, string2, offset, length2) {
      return blitBuffer(base64ToBytes(string2), buf, offset, length2);
    }
    function ucs2Write(buf, string2, offset, length2) {
      return blitBuffer(utf16leToBytes(string2, buf.length - offset), buf, offset, length2);
    }
    Buffer4.prototype.write = function write(string2, offset, length2, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length2 = this.length;
        offset = 0;
      } else if (length2 === void 0 && typeof offset === "string") {
        encoding = offset;
        length2 = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length2)) {
          length2 = length2 >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length2;
          length2 = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length2 === void 0 || length2 > remaining)
        length2 = remaining;
      if (string2.length > 0 && (length2 < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string2, offset, length2);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string2, offset, length2);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string2, offset, length2);
          case "base64":
            return base64Write(this, string2, offset, length2);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string2, offset, length2);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer4.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base643.fromByteArray(buf);
      } else {
        return base643.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i6 = start;
      while (i6 < end) {
        const firstByte = buf[i6];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i6 + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i6 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i6 + 1];
              thirdByte = buf[i6 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i6 + 1];
              thirdByte = buf[i6 + 2];
              fourthByte = buf[i6 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i6 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i6 = 0;
      while (i6 < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i6, i6 += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i6 = start; i6 < end; ++i6) {
        ret += String.fromCharCode(buf[i6] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i6 = start; i6 < end; ++i6) {
        ret += String.fromCharCode(buf[i6]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      let out = "";
      for (let i6 = start; i6 < end; ++i6) {
        out += hexSliceLookupTable[buf[i6]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = "";
      for (let i6 = 0; i6 < bytes.length - 1; i6 += 2) {
        res += String.fromCharCode(bytes[i6] + bytes[i6 + 1] * 256);
      }
      return res;
    }
    Buffer4.prototype.slice = function slice4(start, end) {
      const len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer4.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length2) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length2)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer4.prototype.readUintLE = Buffer4.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i6 = 0;
      while (++i6 < byteLength2 && (mul *= 256)) {
        val += this[offset + i6] * mul;
      }
      return val;
    };
    Buffer4.prototype.readUintBE = Buffer4.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      let val = this[offset + --byteLength2];
      let mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer4.prototype.readUint8 = Buffer4.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer4.prototype.readUint16LE = Buffer4.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer4.prototype.readUint16BE = Buffer4.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer4.prototype.readUint32LE = Buffer4.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer4.prototype.readUint32BE = Buffer4.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer4.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first2 = this[offset];
      const last = this[offset + 7];
      if (first2 === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo4 = first2 + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi2 = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo4) + (BigInt(hi2) << BigInt(32));
    });
    Buffer4.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first2 = this[offset];
      const last = this[offset + 7];
      if (first2 === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi2 = first2 * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo4 = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi2) << BigInt(32)) + BigInt(lo4);
    });
    Buffer4.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i6 = 0;
      while (++i6 < byteLength2 && (mul *= 256)) {
        val += this[offset + i6] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer4.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let i6 = byteLength2;
      let mul = 1;
      let val = this[offset + --i6];
      while (i6 > 0 && (mul *= 256)) {
        val += this[offset + --i6] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer4.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer4.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer4.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer4.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer4.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer4.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first2 = this[offset];
      const last = this[offset + 7];
      if (first2 === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first2 + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer4.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first2 = this[offset];
      const last = this[offset + 7];
      if (first2 === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first2 << 24) + // Overflow
      this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer4.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer4.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer4.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer4.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer4.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer4.prototype.writeUintLE = Buffer4.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let mul = 1;
      let i6 = 0;
      this[offset] = value & 255;
      while (++i6 < byteLength2 && (mul *= 256)) {
        this[offset + i6] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer4.prototype.writeUintBE = Buffer4.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let i6 = byteLength2 - 1;
      let mul = 1;
      this[offset + i6] = value & 255;
      while (--i6 >= 0 && (mul *= 256)) {
        this[offset + i6] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer4.prototype.writeUint8 = Buffer4.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer4.prototype.writeUint16LE = Buffer4.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer4.prototype.writeUint16BE = Buffer4.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer4.prototype.writeUint32LE = Buffer4.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer4.prototype.writeUint32BE = Buffer4.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo4 = Number(value & BigInt(4294967295));
      buf[offset++] = lo4;
      lo4 = lo4 >> 8;
      buf[offset++] = lo4;
      lo4 = lo4 >> 8;
      buf[offset++] = lo4;
      lo4 = lo4 >> 8;
      buf[offset++] = lo4;
      let hi2 = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi2;
      hi2 = hi2 >> 8;
      buf[offset++] = hi2;
      hi2 = hi2 >> 8;
      buf[offset++] = hi2;
      hi2 = hi2 >> 8;
      buf[offset++] = hi2;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo4 = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo4;
      lo4 = lo4 >> 8;
      buf[offset + 6] = lo4;
      lo4 = lo4 >> 8;
      buf[offset + 5] = lo4;
      lo4 = lo4 >> 8;
      buf[offset + 4] = lo4;
      let hi2 = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi2;
      hi2 = hi2 >> 8;
      buf[offset + 2] = hi2;
      hi2 = hi2 >> 8;
      buf[offset + 1] = hi2;
      hi2 = hi2 >> 8;
      buf[offset] = hi2;
      return offset + 8;
    }
    Buffer4.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer4.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer4.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit2 = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit2 - 1, -limit2);
      }
      let i6 = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i6 < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i6 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i6] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer4.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit2 = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit2 - 1, -limit2);
      }
      let i6 = byteLength2 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i6] = value & 255;
      while (--i6 >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i6 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i6] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer4.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer4.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer4.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer4.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer4.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer4.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer4.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer4.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer4.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer4.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer4.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer4.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer4.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("Index out of range");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer4.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer4.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code2 = val.charCodeAt(0);
          if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
            val = code2;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      let i6;
      if (typeof val === "number") {
        for (i6 = start; i6 < end; ++i6) {
          this[i6] = val;
        }
      } else {
        const bytes = Buffer4.isBuffer(val) ? val : Buffer4.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i6 = 0; i6 < end - start; ++i6) {
          this[i6 + start] = bytes[i6 % len];
        }
      }
      return this;
    };
    var errors = {};
    function E6(sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E6(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name2) {
        if (name2) {
          return `${name2} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E6(
      "ERR_INVALID_ARG_TYPE",
      function(name2, actual) {
        return `The "${name2}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E6(
      "ERR_OUT_OF_RANGE",
      function(str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i6 = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i6 >= start + 4; i6 -= 3) {
        res = `_${val.slice(i6 - 3, i6)}${res}`;
      }
      return `${val.slice(0, i6)}${res}`;
    }
    function checkBounds(buf, offset, byteLength2) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
        boundsError(offset, buf.length - (byteLength2 + 1));
      }
    }
    function checkIntBI(value, min, max, buf, offset, byteLength2) {
      if (value > max || value < min) {
        const n6 = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength2 > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n6} and < 2${n6} ** ${(byteLength2 + 1) * 8}${n6}`;
          } else {
            range = `>= -(2${n6} ** ${(byteLength2 + 1) * 8 - 1}${n6}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n6}`;
          }
        } else {
          range = `>= ${min}${n6} and <= ${max}${n6}`;
        }
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
      }
      checkBounds(buf, offset, byteLength2);
    }
    function validateNumber(value, name2) {
      if (typeof value !== "number") {
        throw new errors.ERR_INVALID_ARG_TYPE(name2, "number", value);
      }
    }
    function boundsError(value, length2, type) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
      }
      if (length2 < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors.ERR_OUT_OF_RANGE(
        type || "offset",
        `>= ${type ? 1 : 0} and <= ${length2}`,
        value
      );
    }
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string2, units) {
      units = units || Infinity;
      let codePoint;
      const length2 = string2.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i6 = 0; i6 < length2; ++i6) {
        codePoint = string2.charCodeAt(i6);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i6 + 1 === length2) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i6 = 0; i6 < str.length; ++i6) {
        byteArray.push(str.charCodeAt(i6) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c8, hi2, lo4;
      const byteArray = [];
      for (let i6 = 0; i6 < str.length; ++i6) {
        if ((units -= 2) < 0)
          break;
        c8 = str.charCodeAt(i6);
        hi2 = c8 >> 8;
        lo4 = c8 % 256;
        byteArray.push(lo4);
        byteArray.push(hi2);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base643.toByteArray(base64clean(str));
    }
    function blitBuffer(src2, dst, offset, length2) {
      let i6;
      for (i6 = 0; i6 < length2; ++i6) {
        if (i6 + offset >= dst.length || i6 >= src2.length)
          break;
        dst[i6 + offset] = src2[i6];
      }
      return i6;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      const alphabet3 = "0123456789abcdef";
      const table = new Array(256);
      for (let i6 = 0; i6 < 16; ++i6) {
        const i16 = i6 * 16;
        for (let j6 = 0; j6 < 16; ++j6) {
          table[i16 + j6] = alphabet3[i6] + alphabet3[j6];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn3) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn3;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  }
});

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    "use strict";
    var R4 = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R4 && typeof R4.apply === "function" ? R4.apply : function ReflectApply2(target, receiver, args2) {
      return Function.prototype.apply.call(target, receiver, args2);
    };
    var ReflectOwnKeys;
    if (R4 && typeof R4.ownKeys === "function") {
      ReflectOwnKeys = R4.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter3() {
      EventEmitter3.init.call(this);
    }
    module.exports = EventEmitter3;
    module.exports.once = once;
    EventEmitter3.EventEmitter = EventEmitter3;
    EventEmitter3.prototype._events = void 0;
    EventEmitter3.prototype._eventsCount = 0;
    EventEmitter3.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter3, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg2) {
        if (typeof arg2 !== "number" || arg2 < 0 || NumberIsNaN(arg2)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg2 + ".");
        }
        defaultMaxListeners = arg2;
      }
    });
    EventEmitter3.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter3.prototype.setMaxListeners = function setMaxListeners(n6) {
      if (typeof n6 !== "number" || n6 < 0 || NumberIsNaN(n6)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n6 + ".");
      }
      this._maxListeners = n6;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter3.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter3.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter3.prototype.emit = function emit(type) {
      var args2 = [];
      for (var i6 = 1; i6 < arguments.length; i6++)
        args2.push(arguments[i6]);
      var doError = type === "error";
      var events2 = this._events;
      if (events2 !== void 0)
        doError = doError && events2.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er3;
        if (args2.length > 0)
          er3 = args2[0];
        if (er3 instanceof Error) {
          throw er3;
        }
        var err = new Error("Unhandled error." + (er3 ? " (" + er3.message + ")" : ""));
        err.context = er3;
        throw err;
      }
      var handler = events2[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args2);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i6 = 0; i6 < len; ++i6)
          ReflectApply(listeners[i6], this, args2);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m6;
      var events2;
      var existing;
      checkListener(listener);
      events2 = target._events;
      if (events2 === void 0) {
        events2 = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events2.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events2 = target._events;
        }
        existing = events2[type];
      }
      if (existing === void 0) {
        existing = events2[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events2[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m6 = _getMaxListeners(target);
        if (m6 > 0 && existing.length > m6 && !existing.warned) {
          existing.warned = true;
          var w6 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w6.name = "MaxListenersExceededWarning";
          w6.emitter = target;
          w6.type = type;
          w6.count = existing.length;
          ProcessEmitWarning(w6);
        }
      }
      return target;
    }
    EventEmitter3.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter3.prototype.on = EventEmitter3.prototype.addListener;
    EventEmitter3.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter3.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter3.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter3.prototype.removeListener = function removeListener(type, listener) {
      var list, events2, position, i6, originalListener;
      checkListener(listener);
      events2 = this._events;
      if (events2 === void 0)
        return this;
      list = events2[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events2[type];
          if (events2.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i6 = list.length - 1; i6 >= 0; i6--) {
          if (list[i6] === listener || list[i6].listener === listener) {
            originalListener = list[i6].listener;
            position = i6;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events2[type] = list[0];
        if (events2.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter3.prototype.off = EventEmitter3.prototype.removeListener;
    EventEmitter3.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events2, i6;
      events2 = this._events;
      if (events2 === void 0)
        return this;
      if (events2.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events2[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events2[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys2 = Object.keys(events2);
        var key;
        for (i6 = 0; i6 < keys2.length; ++i6) {
          key = keys2[i6];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events2[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i6 = listeners.length - 1; i6 >= 0; i6--) {
          this.removeListener(type, listeners[i6]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events2 = target._events;
      if (events2 === void 0)
        return [];
      var evlistener = events2[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter3.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter3.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter3.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter3.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events2 = this._events;
      if (events2 !== void 0) {
        var evlistener = events2[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter3.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n6) {
      var copy = new Array(n6);
      for (var i6 = 0; i6 < n6; ++i6)
        copy[i6] = arr[i6];
      return copy;
    }
    function spliceOne(list, index3) {
      for (; index3 + 1 < list.length; index3++)
        list[index3] = list[index3 + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i6 = 0; i6 < ret.length; ++i6) {
        ret[i6] = arr[i6].listener || arr[i6];
      }
      return ret;
    }
    function once(emitter, name2) {
      return new Promise(function(resolve2, reject) {
        function errorListener(err) {
          emitter.removeListener(name2, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve2([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name2, resolver, { once: true });
        if (name2 !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name2, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name2, listener);
        } else {
          emitter.on(name2, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name2, function wrapListener(arg2) {
          if (flags.once) {
            emitter.removeEventListener(name2, wrapListener);
          }
          listener(arg2);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = function() {
      function F4() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F4.prototype = __global__;
      return new F4();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports2) {
        var g7 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g7,
          iterable: "Symbol" in g7 && "iterator" in Symbol,
          blob: "FileReader" in g7 && "Blob" in g7 && function() {
            try {
              new Blob();
              return true;
            } catch (e3) {
              return false;
            }
          }(),
          formData: "FormData" in g7,
          arrayBuffer: "ArrayBuffer" in g7
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name2) {
          if (typeof name2 !== "string") {
            name2 = String(name2);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name2) || name2 === "") {
            throw new TypeError('Invalid character in header field name: "' + name2 + '"');
          }
          return name2.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers2(headers) {
          this.map = {};
          if (headers instanceof Headers2) {
            headers.forEach(function(value, name2) {
              this.append(name2, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name2) {
              this.append(name2, headers[name2]);
            }, this);
          }
        }
        Headers2.prototype.append = function(name2, value) {
          name2 = normalizeName(name2);
          value = normalizeValue(value);
          var oldValue = this.map[name2];
          this.map[name2] = oldValue ? oldValue + ", " + value : value;
        };
        Headers2.prototype["delete"] = function(name2) {
          delete this.map[normalizeName(name2)];
        };
        Headers2.prototype.get = function(name2) {
          name2 = normalizeName(name2);
          return this.has(name2) ? this.map[name2] : null;
        };
        Headers2.prototype.has = function(name2) {
          return this.map.hasOwnProperty(normalizeName(name2));
        };
        Headers2.prototype.set = function(name2, value) {
          this.map[normalizeName(name2)] = normalizeValue(value);
        };
        Headers2.prototype.forEach = function(callback, thisArg) {
          for (var name2 in this.map) {
            if (this.map.hasOwnProperty(name2)) {
              callback.call(thisArg, this.map[name2], name2, this);
            }
          }
        };
        Headers2.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push(name2);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push([name2, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody)
            return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve2, reject) {
            reader.onload = function() {
              resolve2(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise2 = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise2;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise2 = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise2;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i6 = 0; i6 < view.length; i6++) {
            chars[i6] = String.fromCharCode(view[i6]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode9);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers2(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers2(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g7) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode9(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split2 = bytes.split("=");
              var name2 = split2.shift().replace(/\+/g, " ");
              var value = split2.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name2), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers2();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response2(bodyInit, options) {
          if (!(this instanceof Response2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers2(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers2(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response2 = new Response2(null, { status: 200, statusText: "" });
          response2.ok = false;
          response2.status = 0;
          response2.type = "error";
          return response2;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g7.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name2) {
            this.message = message;
            this.name = name2;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve2, reject) {
            var request2 = new Request2(input, init);
            if (request2.signal && request2.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request2.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve2(new Response2(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g7.location.href ? g7.location.href : url;
              } catch (e3) {
                return url;
              }
            }
            xhr.open(request2.method, fixUrl(request2.url), true);
            if (request2.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request2.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers2 || g7.Headers && init.headers instanceof g7.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name2) {
                names.push(normalizeName(name2));
                xhr.setRequestHeader(name2, normalizeValue(init.headers[name2]));
              });
              request2.headers.forEach(function(value, name2) {
                if (names.indexOf(name2) === -1) {
                  xhr.setRequestHeader(name2, value);
                }
              });
            } else {
              request2.headers.forEach(function(value, name2) {
                xhr.setRequestHeader(name2, value);
              });
            }
            if (request2.signal) {
              request2.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request2.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request2._bodyInit === "undefined" ? null : request2._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g7.fetch) {
          g7.fetch = fetch2;
          g7.Headers = Headers2;
          g7.Request = Request2;
          g7.Response = Response2;
        }
        exports2.Headers = Headers2;
        exports2.Request = Request2;
        exports2.Response = Response2;
        exports2.fetch = fetch2;
        return exports2;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// node_modules/abort-controller/browser.js
var require_browser = __commonJS({
  "node_modules/abort-controller/browser.js"(exports, module) {
    "use strict";
    var { AbortController: AbortController5, AbortSignal } = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : (
      /* otherwise */
      void 0
    );
    module.exports = AbortController5;
    module.exports.AbortSignal = AbortSignal;
    module.exports.default = AbortController5;
  }
});

// node_modules/sha3/sponge/permute/copy/index.js
var require_copy = __commonJS({
  "node_modules/sha3/sponge/permute/copy/index.js"(exports, module) {
    "use strict";
    var copy = function copy2(I4, i6) {
      return function(O7, o6) {
        var oi3 = o6 * 2;
        var ii2 = i6 * 2;
        O7[oi3] = I4[ii2];
        O7[oi3 + 1] = I4[ii2 + 1];
      };
    };
    module.exports = copy;
  }
});

// node_modules/sha3/sponge/permute/chi/index.js
var require_chi = __commonJS({
  "node_modules/sha3/sponge/permute/chi/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _copy = _interopRequireDefault(require_copy());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var chi = function chi2(_ref) {
      var A5 = _ref.A, C7 = _ref.C;
      for (var y6 = 0; y6 < 25; y6 += 5) {
        for (var x7 = 0; x7 < 5; x7++) {
          (0, _copy["default"])(A5, y6 + x7)(C7, x7);
        }
        for (var _x = 0; _x < 5; _x++) {
          var xy = (y6 + _x) * 2;
          var x1 = (_x + 1) % 5 * 2;
          var x22 = (_x + 2) % 5 * 2;
          A5[xy] ^= ~C7[x1] & C7[x22];
          A5[xy + 1] ^= ~C7[x1 + 1] & C7[x22 + 1];
        }
      }
    };
    var _default = chi;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/iota/round-constants/index.js
var require_round_constants = __commonJS({
  "node_modules/sha3/sponge/permute/iota/round-constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var ROUND_CONSTANTS = new Uint32Array([0, 1, 0, 32898, 2147483648, 32906, 2147483648, 2147516416, 0, 32907, 0, 2147483649, 2147483648, 2147516545, 2147483648, 32777, 0, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 2147483648, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 0, 32778, 2147483648, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 0, 2147483649, 2147483648, 2147516424]);
    var _default = ROUND_CONSTANTS;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/iota/index.js
var require_iota = __commonJS({
  "node_modules/sha3/sponge/permute/iota/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _roundConstants = _interopRequireDefault(require_round_constants());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var iota = function iota2(_ref) {
      var A5 = _ref.A, roundIndex = _ref.roundIndex;
      var i6 = roundIndex * 2;
      A5[0] ^= _roundConstants["default"][i6];
      A5[1] ^= _roundConstants["default"][i6 + 1];
    };
    var _default = iota;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js
var require_pi_shuffles = __commonJS({
  "node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var PI_SHUFFLES = [10, 7, 11, 17, 18, 3, 5, 16, 8, 21, 24, 4, 15, 23, 19, 13, 12, 2, 20, 14, 22, 9, 6, 1];
    var _default = PI_SHUFFLES;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js
var require_rho_offsets = __commonJS({
  "node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var RHO_OFFSETS = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 2, 14, 27, 41, 56, 8, 25, 43, 62, 18, 39, 61, 20, 44];
    var _default = RHO_OFFSETS;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/rho-pi/index.js
var require_rho_pi = __commonJS({
  "node_modules/sha3/sponge/permute/rho-pi/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _piShuffles = _interopRequireDefault(require_pi_shuffles());
    var _rhoOffsets = _interopRequireDefault(require_rho_offsets());
    var _copy = _interopRequireDefault(require_copy());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var rhoPi = function rhoPi2(_ref) {
      var A5 = _ref.A, C7 = _ref.C, W5 = _ref.W;
      (0, _copy["default"])(A5, 1)(W5, 0);
      var H3 = 0;
      var L5 = 0;
      var Wi3 = 0;
      var ri3 = 32;
      for (var i6 = 0; i6 < 24; i6++) {
        var j6 = _piShuffles["default"][i6];
        var r4 = _rhoOffsets["default"][i6];
        (0, _copy["default"])(A5, j6)(C7, 0);
        H3 = W5[0];
        L5 = W5[1];
        ri3 = 32 - r4;
        Wi3 = r4 < 32 ? 0 : 1;
        W5[Wi3] = H3 << r4 | L5 >>> ri3;
        W5[(Wi3 + 1) % 2] = L5 << r4 | H3 >>> ri3;
        (0, _copy["default"])(W5, 0)(A5, j6);
        (0, _copy["default"])(C7, 0)(W5, 0);
      }
    };
    var _default = rhoPi;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/theta/index.js
var require_theta = __commonJS({
  "node_modules/sha3/sponge/permute/theta/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _copy = _interopRequireDefault(require_copy());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var theta = function theta2(_ref) {
      var A5 = _ref.A, C7 = _ref.C, D3 = _ref.D, W5 = _ref.W;
      var H3 = 0;
      var L5 = 0;
      for (var x7 = 0; x7 < 5; x7++) {
        var x20 = x7 * 2;
        var x21 = (x7 + 5) * 2;
        var x22 = (x7 + 10) * 2;
        var x23 = (x7 + 15) * 2;
        var x24 = (x7 + 20) * 2;
        C7[x20] = A5[x20] ^ A5[x21] ^ A5[x22] ^ A5[x23] ^ A5[x24];
        C7[x20 + 1] = A5[x20 + 1] ^ A5[x21 + 1] ^ A5[x22 + 1] ^ A5[x23 + 1] ^ A5[x24 + 1];
      }
      for (var _x = 0; _x < 5; _x++) {
        (0, _copy["default"])(C7, (_x + 1) % 5)(W5, 0);
        H3 = W5[0];
        L5 = W5[1];
        W5[0] = H3 << 1 | L5 >>> 31;
        W5[1] = L5 << 1 | H3 >>> 31;
        D3[_x * 2] = C7[(_x + 4) % 5 * 2] ^ W5[0];
        D3[_x * 2 + 1] = C7[(_x + 4) % 5 * 2 + 1] ^ W5[1];
        for (var y6 = 0; y6 < 25; y6 += 5) {
          A5[(y6 + _x) * 2] ^= D3[_x * 2];
          A5[(y6 + _x) * 2 + 1] ^= D3[_x * 2 + 1];
        }
      }
    };
    var _default = theta;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/index.js
var require_permute = __commonJS({
  "node_modules/sha3/sponge/permute/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _chi = _interopRequireDefault(require_chi());
    var _iota = _interopRequireDefault(require_iota());
    var _rhoPi = _interopRequireDefault(require_rho_pi());
    var _theta = _interopRequireDefault(require_theta());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var permute = function permute2() {
      var C7 = new Uint32Array(10);
      var D3 = new Uint32Array(10);
      var W5 = new Uint32Array(2);
      return function(A5) {
        for (var roundIndex = 0; roundIndex < 24; roundIndex++) {
          (0, _theta["default"])({ A: A5, C: C7, D: D3, W: W5 });
          (0, _rhoPi["default"])({ A: A5, C: C7, W: W5 });
          (0, _chi["default"])({ A: A5, C: C7 });
          (0, _iota["default"])({ A: A5, roundIndex });
        }
        C7.fill(0);
        D3.fill(0);
        W5.fill(0);
      };
    };
    var _default = permute;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/index.js
var require_sponge = __commonJS({
  "node_modules/sha3/sponge/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _buffer = require_buffer();
    var _permute = _interopRequireDefault(require_permute());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var xorWords = function xorWords2(I4, O7) {
      for (var i6 = 0; i6 < I4.length; i6 += 8) {
        var o6 = i6 / 4;
        O7[o6] ^= I4[i6 + 7] << 24 | I4[i6 + 6] << 16 | I4[i6 + 5] << 8 | I4[i6 + 4];
        O7[o6 + 1] ^= I4[i6 + 3] << 24 | I4[i6 + 2] << 16 | I4[i6 + 1] << 8 | I4[i6];
      }
      return O7;
    };
    var readWords = function readWords2(I4, O7) {
      for (var o6 = 0; o6 < O7.length; o6 += 8) {
        var i6 = o6 / 4;
        O7[o6] = I4[i6 + 1];
        O7[o6 + 1] = I4[i6 + 1] >>> 8;
        O7[o6 + 2] = I4[i6 + 1] >>> 16;
        O7[o6 + 3] = I4[i6 + 1] >>> 24;
        O7[o6 + 4] = I4[i6];
        O7[o6 + 5] = I4[i6] >>> 8;
        O7[o6 + 6] = I4[i6] >>> 16;
        O7[o6 + 7] = I4[i6] >>> 24;
      }
      return O7;
    };
    var Sponge = function Sponge2(_ref) {
      var _this = this;
      var capacity = _ref.capacity, padding2 = _ref.padding;
      var keccak = (0, _permute["default"])();
      var stateSize = 200;
      var blockSize = capacity / 8;
      var queueSize = stateSize - capacity / 4;
      var queueOffset = 0;
      var state = new Uint32Array(stateSize / 4);
      var queue = _buffer.Buffer.allocUnsafe(queueSize);
      this.absorb = function(buffer) {
        for (var i6 = 0; i6 < buffer.length; i6++) {
          queue[queueOffset] = buffer[i6];
          queueOffset += 1;
          if (queueOffset >= queueSize) {
            xorWords(queue, state);
            keccak(state);
            queueOffset = 0;
          }
        }
        return _this;
      };
      this.squeeze = function() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var output = { buffer: options.buffer || _buffer.Buffer.allocUnsafe(blockSize), padding: options.padding || padding2, queue: _buffer.Buffer.allocUnsafe(queue.length), state: new Uint32Array(state.length) };
        queue.copy(output.queue);
        for (var i6 = 0; i6 < state.length; i6++) {
          output.state[i6] = state[i6];
        }
        output.queue.fill(0, queueOffset);
        output.queue[queueOffset] |= output.padding;
        output.queue[queueSize - 1] |= 128;
        xorWords(output.queue, output.state);
        for (var offset = 0; offset < output.buffer.length; offset += queueSize) {
          keccak(output.state);
          readWords(output.state, output.buffer.slice(offset, offset + queueSize));
        }
        return output.buffer;
      };
      this.reset = function() {
        queue.fill(0);
        state.fill(0);
        queueOffset = 0;
        return _this;
      };
      return this;
    };
    var _default = Sponge;
    exports["default"] = _default;
  }
});

// node_modules/sha3/index.js
var require_sha3 = __commonJS({
  "node_modules/sha3/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = exports.SHAKE = exports.SHA3Hash = exports.SHA3 = exports.Keccak = void 0;
    var _buffer = require_buffer();
    var _sponge = _interopRequireDefault(require_sponge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var createHash = function createHash2(_ref) {
      var allowedSizes = _ref.allowedSizes, defaultSize = _ref.defaultSize, padding2 = _ref.padding;
      return function Hash2() {
        var _this = this;
        var size4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultSize;
        if (!this || this.constructor !== Hash2) {
          return new Hash2(size4);
        }
        if (allowedSizes && !allowedSizes.includes(size4)) {
          throw new Error("Unsupported hash length");
        }
        var sponge = new _sponge["default"]({ capacity: size4 });
        this.update = function(input) {
          var encoding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "utf8";
          if (_buffer.Buffer.isBuffer(input)) {
            sponge.absorb(input);
            return _this;
          }
          if (typeof input === "string") {
            return _this.update(_buffer.Buffer.from(input, encoding));
          }
          throw new TypeError("Not a string or buffer");
        };
        this.digest = function() {
          var formatOrOptions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "binary";
          var options = typeof formatOrOptions === "string" ? { format: formatOrOptions } : formatOrOptions;
          var buffer = sponge.squeeze({ buffer: options.buffer, padding: options.padding || padding2 });
          if (options.format && options.format !== "binary") {
            return buffer.toString(options.format);
          }
          return buffer;
        };
        this.reset = function() {
          sponge.reset();
          return _this;
        };
        return this;
      };
    };
    var Keccak2 = createHash({ allowedSizes: [224, 256, 384, 512], defaultSize: 512, padding: 1 });
    exports.Keccak = Keccak2;
    var SHA33 = createHash({ allowedSizes: [224, 256, 384, 512], defaultSize: 512, padding: 6 });
    exports.SHA3 = SHA33;
    var SHAKE = createHash({ allowedSizes: [128, 256], defaultSize: 256, padding: 31 });
    exports.SHAKE = SHAKE;
    var SHA3Hash = Keccak2;
    exports.SHA3Hash = SHA3Hash;
    SHA33.SHA3Hash = SHA3Hash;
    var _default = SHA33;
    exports["default"] = _default;
  }
});

// node_modules/@improbable-eng/grpc-web/dist/grpc-web-client.umd.js
var require_grpc_web_client_umd = __commonJS({
  "node_modules/@improbable-eng/grpc-web/dist/grpc-web-client.umd.js"(exports, module) {
    !function(e3, t2) {
      if ("object" == typeof exports && "object" == typeof module)
        module.exports = t2();
      else if ("function" == typeof define && define.amd)
        define([], t2);
      else {
        var r4 = t2();
        for (var n6 in r4)
          ("object" == typeof exports ? exports : e3)[n6] = r4[n6];
      }
    }(exports, function() {
      return e3 = { 418: function(e4, t3) {
        !function(e5, t4) {
          for (var r4 in t4)
            e5[r4] = t4[r4];
        }(t3, function(e5) {
          var t4 = {};
          function r4(n6) {
            if (t4[n6])
              return t4[n6].exports;
            var o6 = t4[n6] = { i: n6, l: false, exports: {} };
            return e5[n6].call(o6.exports, o6, o6.exports, r4), o6.l = true, o6.exports;
          }
          return r4.m = e5, r4.c = t4, r4.i = function(e6) {
            return e6;
          }, r4.d = function(e6, t5, n6) {
            r4.o(e6, t5) || Object.defineProperty(e6, t5, { configurable: false, enumerable: true, get: n6 });
          }, r4.n = function(e6) {
            var t5 = e6 && e6.__esModule ? function() {
              return e6.default;
            } : function() {
              return e6;
            };
            return r4.d(t5, "a", t5), t5;
          }, r4.o = function(e6, t5) {
            return Object.prototype.hasOwnProperty.call(e6, t5);
          }, r4.p = "", r4(r4.s = 1);
        }([function(e5, t4, r4) {
          "use strict";
          Object.defineProperty(t4, "__esModule", { value: true });
          var n6 = r4(3), o6 = function() {
            function e6(e7, t5) {
              void 0 === e7 && (e7 = {}), void 0 === t5 && (t5 = { splitValues: false });
              var r5, o7 = this;
              this.headersMap = {}, e7 && ("undefined" != typeof Headers && e7 instanceof Headers ? n6.getHeaderKeys(e7).forEach(function(r6) {
                n6.getHeaderValues(e7, r6).forEach(function(e8) {
                  t5.splitValues ? o7.append(r6, n6.splitHeaderValue(e8)) : o7.append(r6, e8);
                });
              }) : "object" == typeof (r5 = e7) && "object" == typeof r5.headersMap && "function" == typeof r5.forEach ? e7.forEach(function(e8, t6) {
                o7.append(e8, t6);
              }) : "undefined" != typeof Map && e7 instanceof Map ? e7.forEach(function(e8, t6) {
                o7.append(t6, e8);
              }) : "string" == typeof e7 ? this.appendFromString(e7) : "object" == typeof e7 && Object.getOwnPropertyNames(e7).forEach(function(t6) {
                var r6 = e7[t6];
                Array.isArray(r6) ? r6.forEach(function(e8) {
                  o7.append(t6, e8);
                }) : o7.append(t6, r6);
              }));
            }
            return e6.prototype.appendFromString = function(e7) {
              for (var t5 = e7.split("\r\n"), r5 = 0; r5 < t5.length; r5++) {
                var n7 = t5[r5], o7 = n7.indexOf(":");
                if (o7 > 0) {
                  var s4 = n7.substring(0, o7).trim(), i6 = n7.substring(o7 + 1).trim();
                  this.append(s4, i6);
                }
              }
            }, e6.prototype.delete = function(e7, t5) {
              var r5 = n6.normalizeName(e7);
              if (void 0 === t5)
                delete this.headersMap[r5];
              else {
                var o7 = this.headersMap[r5];
                if (o7) {
                  var s4 = o7.indexOf(t5);
                  s4 >= 0 && o7.splice(s4, 1), 0 === o7.length && delete this.headersMap[r5];
                }
              }
            }, e6.prototype.append = function(e7, t5) {
              var r5 = this, o7 = n6.normalizeName(e7);
              Array.isArray(this.headersMap[o7]) || (this.headersMap[o7] = []), Array.isArray(t5) ? t5.forEach(function(e8) {
                r5.headersMap[o7].push(n6.normalizeValue(e8));
              }) : this.headersMap[o7].push(n6.normalizeValue(t5));
            }, e6.prototype.set = function(e7, t5) {
              var r5 = n6.normalizeName(e7);
              if (Array.isArray(t5)) {
                var o7 = [];
                t5.forEach(function(e8) {
                  o7.push(n6.normalizeValue(e8));
                }), this.headersMap[r5] = o7;
              } else
                this.headersMap[r5] = [n6.normalizeValue(t5)];
            }, e6.prototype.has = function(e7, t5) {
              var r5 = this.headersMap[n6.normalizeName(e7)];
              if (!Array.isArray(r5))
                return false;
              if (void 0 !== t5) {
                var o7 = n6.normalizeValue(t5);
                return r5.indexOf(o7) >= 0;
              }
              return true;
            }, e6.prototype.get = function(e7) {
              var t5 = this.headersMap[n6.normalizeName(e7)];
              return void 0 !== t5 ? t5.concat() : [];
            }, e6.prototype.forEach = function(e7) {
              var t5 = this;
              Object.getOwnPropertyNames(this.headersMap).forEach(function(r5) {
                e7(r5, t5.headersMap[r5]);
              }, this);
            }, e6.prototype.toHeaders = function() {
              if ("undefined" != typeof Headers) {
                var e7 = new Headers();
                return this.forEach(function(t5, r5) {
                  r5.forEach(function(r6) {
                    e7.append(t5, r6);
                  });
                }), e7;
              }
              throw new Error("Headers class is not defined");
            }, e6;
          }();
          t4.BrowserHeaders = o6;
        }, function(e5, t4, r4) {
          "use strict";
          Object.defineProperty(t4, "__esModule", { value: true });
          var n6 = r4(0);
          t4.BrowserHeaders = n6.BrowserHeaders;
        }, function(e5, t4, r4) {
          "use strict";
          Object.defineProperty(t4, "__esModule", { value: true }), t4.iterateHeaders = function(e6, t5) {
            for (var r5 = e6[Symbol.iterator](), n6 = r5.next(); !n6.done; )
              t5(n6.value[0]), n6 = r5.next();
          }, t4.iterateHeadersKeys = function(e6, t5) {
            for (var r5 = e6.keys(), n6 = r5.next(); !n6.done; )
              t5(n6.value), n6 = r5.next();
          };
        }, function(e5, t4, r4) {
          "use strict";
          Object.defineProperty(t4, "__esModule", { value: true });
          var n6 = r4(2);
          t4.normalizeName = function(e6) {
            if ("string" != typeof e6 && (e6 = String(e6)), /[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e6))
              throw new TypeError("Invalid character in header field name");
            return e6.toLowerCase();
          }, t4.normalizeValue = function(e6) {
            return "string" != typeof e6 && (e6 = String(e6)), e6;
          }, t4.getHeaderValues = function(e6, t5) {
            var r5 = e6;
            if (r5 instanceof Headers && r5.getAll)
              return r5.getAll(t5);
            var n7 = r5.get(t5);
            return n7 && "string" == typeof n7 ? [n7] : n7;
          }, t4.getHeaderKeys = function(e6) {
            var t5 = e6, r5 = {}, o6 = [];
            return t5.keys ? n6.iterateHeadersKeys(t5, function(e7) {
              r5[e7] || (r5[e7] = true, o6.push(e7));
            }) : t5.forEach ? t5.forEach(function(e7, t6) {
              r5[t6] || (r5[t6] = true, o6.push(t6));
            }) : n6.iterateHeaders(t5, function(e7) {
              var t6 = e7[0];
              r5[t6] || (r5[t6] = true, o6.push(t6));
            }), o6;
          }, t4.splitHeaderValue = function(e6) {
            var t5 = [];
            return e6.split(", ").forEach(function(e7) {
              e7.split(",").forEach(function(e8) {
                t5.push(e8);
              });
            }), t5;
          };
        }]));
      }, 617: function(e4, t3, r4) {
        "use strict";
        Object.defineProperty(t3, "__esModule", { value: true }), t3.ChunkParser = t3.ChunkType = t3.encodeASCII = t3.decodeASCII = void 0;
        var n6, o6 = r4(65);
        function s4(e5) {
          return 9 === (t4 = e5) || 10 === t4 || 13 === t4 || e5 >= 32 && e5 <= 126;
          var t4;
        }
        function i6(e5) {
          for (var t4 = 0; t4 !== e5.length; ++t4)
            if (!s4(e5[t4]))
              throw new Error("Metadata is not valid (printable) ASCII");
          return String.fromCharCode.apply(String, Array.prototype.slice.call(e5));
        }
        function a4(e5) {
          return 128 == (128 & e5.getUint8(0));
        }
        function u4(e5) {
          return e5.getUint32(1, false);
        }
        function d8(e5, t4, r5) {
          return e5.byteLength - t4 >= r5;
        }
        function c8(e5, t4, r5) {
          if (e5.slice)
            return e5.slice(t4, r5);
          var n7 = e5.length;
          void 0 !== r5 && (n7 = r5);
          for (var o7 = new Uint8Array(n7 - t4), s5 = 0, i7 = t4; i7 < n7; i7++)
            o7[s5++] = e5[i7];
          return o7;
        }
        t3.decodeASCII = i6, t3.encodeASCII = function(e5) {
          for (var t4 = new Uint8Array(e5.length), r5 = 0; r5 !== e5.length; ++r5) {
            var n7 = e5.charCodeAt(r5);
            if (!s4(n7))
              throw new Error("Metadata contains invalid ASCII");
            t4[r5] = n7;
          }
          return t4;
        }, function(e5) {
          e5[e5.MESSAGE = 1] = "MESSAGE", e5[e5.TRAILERS = 2] = "TRAILERS";
        }(n6 = t3.ChunkType || (t3.ChunkType = {}));
        var p5 = function() {
          function e5() {
            this.buffer = null, this.position = 0;
          }
          return e5.prototype.parse = function(e6, t4) {
            if (0 === e6.length && t4)
              return [];
            var r5, s5 = [];
            if (null == this.buffer)
              this.buffer = e6, this.position = 0;
            else if (this.position === this.buffer.byteLength)
              this.buffer = e6, this.position = 0;
            else {
              var p6 = this.buffer.byteLength - this.position, h6 = new Uint8Array(p6 + e6.byteLength), f11 = c8(this.buffer, this.position);
              h6.set(f11, 0);
              var l8 = new Uint8Array(e6);
              h6.set(l8, p6), this.buffer = h6, this.position = 0;
            }
            for (; ; ) {
              if (!d8(this.buffer, this.position, 5))
                return s5;
              var g7 = c8(this.buffer, this.position, this.position + 5), b5 = new DataView(g7.buffer, g7.byteOffset, g7.byteLength), y6 = u4(b5);
              if (!d8(this.buffer, this.position, 5 + y6))
                return s5;
              var v11 = c8(this.buffer, this.position + 5, this.position + 5 + y6);
              if (this.position += 5 + y6, a4(b5))
                return s5.push({ chunkType: n6.TRAILERS, trailers: (r5 = v11, new o6.Metadata(i6(r5))) }), s5;
              s5.push({ chunkType: n6.MESSAGE, data: v11 });
            }
          }, e5;
        }();
        t3.ChunkParser = p5;
      }, 8: function(e4, t3) {
        "use strict";
        var r4;
        Object.defineProperty(t3, "__esModule", { value: true }), t3.httpStatusToCode = t3.Code = void 0, function(e5) {
          e5[e5.OK = 0] = "OK", e5[e5.Canceled = 1] = "Canceled", e5[e5.Unknown = 2] = "Unknown", e5[e5.InvalidArgument = 3] = "InvalidArgument", e5[e5.DeadlineExceeded = 4] = "DeadlineExceeded", e5[e5.NotFound = 5] = "NotFound", e5[e5.AlreadyExists = 6] = "AlreadyExists", e5[e5.PermissionDenied = 7] = "PermissionDenied", e5[e5.ResourceExhausted = 8] = "ResourceExhausted", e5[e5.FailedPrecondition = 9] = "FailedPrecondition", e5[e5.Aborted = 10] = "Aborted", e5[e5.OutOfRange = 11] = "OutOfRange", e5[e5.Unimplemented = 12] = "Unimplemented", e5[e5.Internal = 13] = "Internal", e5[e5.Unavailable = 14] = "Unavailable", e5[e5.DataLoss = 15] = "DataLoss", e5[e5.Unauthenticated = 16] = "Unauthenticated";
        }(r4 = t3.Code || (t3.Code = {})), t3.httpStatusToCode = function(e5) {
          switch (e5) {
            case 0:
              return r4.Internal;
            case 200:
              return r4.OK;
            case 400:
              return r4.InvalidArgument;
            case 401:
              return r4.Unauthenticated;
            case 403:
              return r4.PermissionDenied;
            case 404:
              return r4.NotFound;
            case 409:
              return r4.Aborted;
            case 412:
              return r4.FailedPrecondition;
            case 429:
              return r4.ResourceExhausted;
            case 499:
              return r4.Canceled;
            case 500:
              return r4.Unknown;
            case 501:
              return r4.Unimplemented;
            case 503:
              return r4.Unavailable;
            case 504:
              return r4.DeadlineExceeded;
            default:
              return r4.Unknown;
          }
        };
      }, 934: function(e4, t3, r4) {
        "use strict";
        Object.defineProperty(t3, "__esModule", { value: true }), t3.client = void 0;
        var n6 = r4(65), o6 = r4(617), s4 = r4(8), i6 = r4(346), a4 = r4(57), u4 = r4(882);
        t3.client = function(e5, t4) {
          return new d8(e5, t4);
        };
        var d8 = function() {
          function e5(e6, t4) {
            this.started = false, this.sentFirstMessage = false, this.completed = false, this.closed = false, this.finishedSending = false, this.onHeadersCallbacks = [], this.onMessageCallbacks = [], this.onEndCallbacks = [], this.parser = new o6.ChunkParser(), this.methodDefinition = e6, this.props = t4, this.createTransport();
          }
          return e5.prototype.createTransport = function() {
            var e6 = this.props.host + "/" + this.methodDefinition.service.serviceName + "/" + this.methodDefinition.methodName, t4 = { methodDefinition: this.methodDefinition, debug: this.props.debug || false, url: e6, onHeaders: this.onTransportHeaders.bind(this), onChunk: this.onTransportChunk.bind(this), onEnd: this.onTransportEnd.bind(this) };
            this.props.transport ? this.transport = this.props.transport(t4) : this.transport = a4.makeDefaultTransport(t4);
          }, e5.prototype.onTransportHeaders = function(e6, t4) {
            if (this.props.debug && i6.debug("onHeaders", e6, t4), this.closed)
              this.props.debug && i6.debug("grpc.onHeaders received after request was closed - ignoring");
            else if (0 === t4)
              ;
            else {
              this.responseHeaders = e6, this.props.debug && i6.debug("onHeaders.responseHeaders", JSON.stringify(this.responseHeaders, null, 2));
              var r5 = c8(e6);
              this.props.debug && i6.debug("onHeaders.gRPCStatus", r5);
              var n7 = r5 && r5 >= 0 ? r5 : s4.httpStatusToCode(t4);
              this.props.debug && i6.debug("onHeaders.code", n7);
              var o7 = e6.get("grpc-message") || [];
              if (this.props.debug && i6.debug("onHeaders.gRPCMessage", o7), this.rawOnHeaders(e6), n7 !== s4.Code.OK) {
                var a5 = this.decodeGRPCStatus(o7[0]);
                this.rawOnError(n7, a5, e6);
              }
            }
          }, e5.prototype.onTransportChunk = function(e6) {
            var t4 = this;
            if (this.closed)
              this.props.debug && i6.debug("grpc.onChunk received after request was closed - ignoring");
            else {
              var r5 = [];
              try {
                r5 = this.parser.parse(e6);
              } catch (e7) {
                return this.props.debug && i6.debug("onChunk.parsing error", e7, e7.message), void this.rawOnError(s4.Code.Internal, "parsing error: " + e7.message);
              }
              r5.forEach(function(e7) {
                if (e7.chunkType === o6.ChunkType.MESSAGE) {
                  var r6 = t4.methodDefinition.responseType.deserializeBinary(e7.data);
                  t4.rawOnMessage(r6);
                } else
                  e7.chunkType === o6.ChunkType.TRAILERS && (t4.responseHeaders ? (t4.responseTrailers = new n6.Metadata(e7.trailers), t4.props.debug && i6.debug("onChunk.trailers", t4.responseTrailers)) : (t4.responseHeaders = new n6.Metadata(e7.trailers), t4.rawOnHeaders(t4.responseHeaders)));
              });
            }
          }, e5.prototype.onTransportEnd = function() {
            if (this.props.debug && i6.debug("grpc.onEnd"), this.closed)
              this.props.debug && i6.debug("grpc.onEnd received after request was closed - ignoring");
            else if (void 0 !== this.responseTrailers) {
              var e6 = c8(this.responseTrailers);
              if (null !== e6) {
                var t4 = this.responseTrailers.get("grpc-message"), r5 = this.decodeGRPCStatus(t4[0]);
                this.rawOnEnd(e6, r5, this.responseTrailers);
              } else
                this.rawOnError(s4.Code.Internal, "Response closed without grpc-status (Trailers provided)");
            } else {
              if (void 0 === this.responseHeaders)
                return void this.rawOnError(s4.Code.Unknown, "Response closed without headers");
              var n7 = c8(this.responseHeaders), o7 = this.responseHeaders.get("grpc-message");
              if (this.props.debug && i6.debug("grpc.headers only response ", n7, o7), null === n7)
                return void this.rawOnEnd(s4.Code.Unknown, "Response closed without grpc-status (Headers only)", this.responseHeaders);
              var a5 = this.decodeGRPCStatus(o7[0]);
              this.rawOnEnd(n7, a5, this.responseHeaders);
            }
          }, e5.prototype.decodeGRPCStatus = function(e6) {
            if (!e6)
              return "";
            try {
              return decodeURIComponent(e6);
            } catch (t4) {
              return e6;
            }
          }, e5.prototype.rawOnEnd = function(e6, t4, r5) {
            var n7 = this;
            this.props.debug && i6.debug("rawOnEnd", e6, t4, r5), this.completed || (this.completed = true, this.onEndCallbacks.forEach(function(o7) {
              if (!n7.closed)
                try {
                  o7(e6, t4, r5);
                } catch (e7) {
                  setTimeout(function() {
                    throw e7;
                  }, 0);
                }
            }));
          }, e5.prototype.rawOnHeaders = function(e6) {
            this.props.debug && i6.debug("rawOnHeaders", e6), this.completed || this.onHeadersCallbacks.forEach(function(t4) {
              try {
                t4(e6);
              } catch (e7) {
                setTimeout(function() {
                  throw e7;
                }, 0);
              }
            });
          }, e5.prototype.rawOnError = function(e6, t4, r5) {
            var o7 = this;
            void 0 === r5 && (r5 = new n6.Metadata()), this.props.debug && i6.debug("rawOnError", e6, t4), this.completed || (this.completed = true, this.onEndCallbacks.forEach(function(n7) {
              if (!o7.closed)
                try {
                  n7(e6, t4, r5);
                } catch (e7) {
                  setTimeout(function() {
                    throw e7;
                  }, 0);
                }
            }));
          }, e5.prototype.rawOnMessage = function(e6) {
            var t4 = this;
            this.props.debug && i6.debug("rawOnMessage", e6.toObject()), this.completed || this.closed || this.onMessageCallbacks.forEach(function(r5) {
              if (!t4.closed)
                try {
                  r5(e6);
                } catch (e7) {
                  setTimeout(function() {
                    throw e7;
                  }, 0);
                }
            });
          }, e5.prototype.onHeaders = function(e6) {
            this.onHeadersCallbacks.push(e6);
          }, e5.prototype.onMessage = function(e6) {
            this.onMessageCallbacks.push(e6);
          }, e5.prototype.onEnd = function(e6) {
            this.onEndCallbacks.push(e6);
          }, e5.prototype.start = function(e6) {
            if (this.started)
              throw new Error("Client already started - cannot .start()");
            this.started = true;
            var t4 = new n6.Metadata(e6 || {});
            t4.set("content-type", "application/grpc-web+proto"), t4.set("x-grpc-web", "1"), this.transport.start(t4);
          }, e5.prototype.send = function(e6) {
            if (!this.started)
              throw new Error("Client not started - .start() must be called before .send()");
            if (this.closed)
              throw new Error("Client already closed - cannot .send()");
            if (this.finishedSending)
              throw new Error("Client already finished sending - cannot .send()");
            if (!this.methodDefinition.requestStream && this.sentFirstMessage)
              throw new Error("Message already sent for non-client-streaming method - cannot .send()");
            this.sentFirstMessage = true;
            var t4 = u4.frameRequest(e6);
            this.transport.sendMessage(t4);
          }, e5.prototype.finishSend = function() {
            if (!this.started)
              throw new Error("Client not started - .finishSend() must be called before .close()");
            if (this.closed)
              throw new Error("Client already closed - cannot .send()");
            if (this.finishedSending)
              throw new Error("Client already finished sending - cannot .finishSend()");
            this.finishedSending = true, this.transport.finishSend();
          }, e5.prototype.close = function() {
            if (!this.started)
              throw new Error("Client not started - .start() must be called before .close()");
            if (this.closed)
              throw new Error("Client already closed - cannot .close()");
            this.closed = true, this.props.debug && i6.debug("request.abort aborting request"), this.transport.cancel();
          }, e5;
        }();
        function c8(e5) {
          var t4 = e5.get("grpc-status") || [];
          if (t4.length > 0)
            try {
              var r5 = t4[0];
              return parseInt(r5, 10);
            } catch (e6) {
              return null;
            }
          return null;
        }
      }, 346: function(e4, t3) {
        "use strict";
        Object.defineProperty(t3, "__esModule", { value: true }), t3.debug = void 0, t3.debug = function() {
          for (var e5 = [], t4 = 0; t4 < arguments.length; t4++)
            e5[t4] = arguments[t4];
          console.debug ? console.debug.apply(null, e5) : console.log.apply(null, e5);
        };
      }, 607: function(e4, t3, r4) {
        "use strict";
        Object.defineProperty(t3, "__esModule", { value: true }), t3.grpc = void 0;
        var n6, o6 = r4(418), s4 = r4(57), i6 = r4(229), a4 = r4(540), u4 = r4(210), d8 = r4(859), c8 = r4(8), p5 = r4(938), h6 = r4(35), f11 = r4(934);
        (n6 = t3.grpc || (t3.grpc = {})).setDefaultTransport = s4.setDefaultTransportFactory, n6.CrossBrowserHttpTransport = d8.CrossBrowserHttpTransport, n6.FetchReadableStreamTransport = i6.FetchReadableStreamTransport, n6.XhrTransport = u4.XhrTransport, n6.WebsocketTransport = a4.WebsocketTransport, n6.Code = c8.Code, n6.Metadata = o6.BrowserHeaders, n6.client = function(e5, t4) {
          return f11.client(e5, t4);
        }, n6.invoke = p5.invoke, n6.unary = h6.unary;
      }, 938: function(e4, t3, r4) {
        "use strict";
        Object.defineProperty(t3, "__esModule", { value: true }), t3.invoke = void 0;
        var n6 = r4(934);
        t3.invoke = function(e5, t4) {
          if (e5.requestStream)
            throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");
          var r5 = n6.client(e5, { host: t4.host, transport: t4.transport, debug: t4.debug });
          return t4.onHeaders && r5.onHeaders(t4.onHeaders), t4.onMessage && r5.onMessage(t4.onMessage), t4.onEnd && r5.onEnd(t4.onEnd), r5.start(t4.metadata), r5.send(t4.request), r5.finishSend(), { close: function() {
            r5.close();
          } };
        };
      }, 65: function(e4, t3, r4) {
        "use strict";
        Object.defineProperty(t3, "__esModule", { value: true }), t3.Metadata = void 0;
        var n6 = r4(418);
        Object.defineProperty(t3, "Metadata", { enumerable: true, get: function() {
          return n6.BrowserHeaders;
        } });
      }, 57: function(e4, t3, r4) {
        "use strict";
        Object.defineProperty(t3, "__esModule", { value: true }), t3.makeDefaultTransport = t3.setDefaultTransportFactory = void 0;
        var n6 = r4(859), o6 = function(e5) {
          return n6.CrossBrowserHttpTransport({ withCredentials: false })(e5);
        };
        t3.setDefaultTransportFactory = function(e5) {
          o6 = e5;
        }, t3.makeDefaultTransport = function(e5) {
          return o6(e5);
        };
      }, 229: function(e4, t3, r4) {
        "use strict";
        var n6 = this && this.__assign || function() {
          return (n6 = Object.assign || function(e5) {
            for (var t4, r5 = 1, n7 = arguments.length; r5 < n7; r5++)
              for (var o7 in t4 = arguments[r5])
                Object.prototype.hasOwnProperty.call(t4, o7) && (e5[o7] = t4[o7]);
            return e5;
          }).apply(this, arguments);
        };
        Object.defineProperty(t3, "__esModule", { value: true }), t3.detectFetchSupport = t3.FetchReadableStreamTransport = void 0;
        var o6 = r4(65), s4 = r4(346);
        t3.FetchReadableStreamTransport = function(e5) {
          return function(t4) {
            return function(e6, t5) {
              return e6.debug && s4.debug("fetchRequest", e6), new i6(e6, t5);
            }(t4, e5);
          };
        };
        var i6 = function() {
          function e5(e6, t4) {
            this.cancelled = false, this.controller = self.AbortController && new AbortController(), this.options = e6, this.init = t4;
          }
          return e5.prototype.pump = function(e6, t4) {
            var r5 = this;
            if (this.reader = e6, this.cancelled)
              return this.options.debug && s4.debug("Fetch.pump.cancel at first pump"), void this.reader.cancel().catch(function(e7) {
                r5.options.debug && s4.debug("Fetch.pump.reader.cancel exception", e7);
              });
            this.reader.read().then(function(e7) {
              if (e7.done)
                return r5.options.onEnd(), t4;
              r5.options.onChunk(e7.value), r5.pump(r5.reader, t4);
            }).catch(function(e7) {
              r5.cancelled ? r5.options.debug && s4.debug("Fetch.catch - request cancelled") : (r5.cancelled = true, r5.options.debug && s4.debug("Fetch.catch", e7.message), r5.options.onEnd(e7));
            });
          }, e5.prototype.send = function(e6) {
            var t4 = this;
            fetch(this.options.url, n6(n6({}, this.init), { headers: this.metadata.toHeaders(), method: "POST", body: e6, signal: this.controller && this.controller.signal })).then(function(e7) {
              if (t4.options.debug && s4.debug("Fetch.response", e7), t4.options.onHeaders(new o6.Metadata(e7.headers), e7.status), !e7.body)
                return e7;
              t4.pump(e7.body.getReader(), e7);
            }).catch(function(e7) {
              t4.cancelled ? t4.options.debug && s4.debug("Fetch.catch - request cancelled") : (t4.cancelled = true, t4.options.debug && s4.debug("Fetch.catch", e7.message), t4.options.onEnd(e7));
            });
          }, e5.prototype.sendMessage = function(e6) {
            this.send(e6);
          }, e5.prototype.finishSend = function() {
          }, e5.prototype.start = function(e6) {
            this.metadata = e6;
          }, e5.prototype.cancel = function() {
            var e6 = this;
            this.cancelled ? this.options.debug && s4.debug("Fetch.cancel already cancelled") : (this.cancelled = true, this.controller ? (this.options.debug && s4.debug("Fetch.cancel.controller.abort"), this.controller.abort()) : this.options.debug && s4.debug("Fetch.cancel.missing abort controller"), this.reader ? (this.options.debug && s4.debug("Fetch.cancel.reader.cancel"), this.reader.cancel().catch(function(t4) {
              e6.options.debug && s4.debug("Fetch.cancel.reader.cancel exception", t4);
            })) : this.options.debug && s4.debug("Fetch.cancel before reader"));
          }, e5;
        }();
        t3.detectFetchSupport = function() {
          return "undefined" != typeof Response && Response.prototype.hasOwnProperty("body") && "function" == typeof Headers;
        };
      }, 859: function(e4, t3, r4) {
        "use strict";
        Object.defineProperty(t3, "__esModule", { value: true }), t3.CrossBrowserHttpTransport = void 0;
        var n6 = r4(229), o6 = r4(210);
        t3.CrossBrowserHttpTransport = function(e5) {
          if (n6.detectFetchSupport()) {
            var t4 = { credentials: e5.withCredentials ? "include" : "same-origin" };
            return n6.FetchReadableStreamTransport(t4);
          }
          return o6.XhrTransport({ withCredentials: e5.withCredentials });
        };
      }, 210: function(e4, t3, r4) {
        "use strict";
        var n6, o6 = this && this.__extends || (n6 = function(e5, t4) {
          return (n6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t5) {
            e6.__proto__ = t5;
          } || function(e6, t5) {
            for (var r5 in t5)
              Object.prototype.hasOwnProperty.call(t5, r5) && (e6[r5] = t5[r5]);
          })(e5, t4);
        }, function(e5, t4) {
          function r5() {
            this.constructor = e5;
          }
          n6(e5, t4), e5.prototype = null === t4 ? Object.create(t4) : (r5.prototype = t4.prototype, new r5());
        });
        Object.defineProperty(t3, "__esModule", { value: true }), t3.stringToArrayBuffer = t3.MozChunkedArrayBufferXHR = t3.XHR = t3.XhrTransport = void 0;
        var s4 = r4(65), i6 = r4(346), a4 = r4(849);
        t3.XhrTransport = function(e5) {
          return function(t4) {
            if (a4.detectMozXHRSupport())
              return new d8(t4, e5);
            if (a4.detectXHROverrideMimeTypeSupport())
              return new u4(t4, e5);
            throw new Error("This environment's XHR implementation cannot support binary transfer.");
          };
        };
        var u4 = function() {
          function e5(e6, t4) {
            this.options = e6, this.init = t4;
          }
          return e5.prototype.onProgressEvent = function() {
            this.options.debug && i6.debug("XHR.onProgressEvent.length: ", this.xhr.response.length);
            var e6 = this.xhr.response.substr(this.index);
            this.index = this.xhr.response.length;
            var t4 = p5(e6);
            this.options.onChunk(t4);
          }, e5.prototype.onLoadEvent = function() {
            this.options.debug && i6.debug("XHR.onLoadEvent"), this.options.onEnd();
          }, e5.prototype.onStateChange = function() {
            this.options.debug && i6.debug("XHR.onStateChange", this.xhr.readyState), this.xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED && this.options.onHeaders(new s4.Metadata(this.xhr.getAllResponseHeaders()), this.xhr.status);
          }, e5.prototype.sendMessage = function(e6) {
            this.xhr.send(e6);
          }, e5.prototype.finishSend = function() {
          }, e5.prototype.start = function(e6) {
            var t4 = this;
            this.metadata = e6;
            var r5 = new XMLHttpRequest();
            this.xhr = r5, r5.open("POST", this.options.url), this.configureXhr(), this.metadata.forEach(function(e7, t5) {
              r5.setRequestHeader(e7, t5.join(", "));
            }), r5.withCredentials = Boolean(this.init.withCredentials), r5.addEventListener("readystatechange", this.onStateChange.bind(this)), r5.addEventListener("progress", this.onProgressEvent.bind(this)), r5.addEventListener("loadend", this.onLoadEvent.bind(this)), r5.addEventListener("error", function(e7) {
              t4.options.debug && i6.debug("XHR.error", e7), t4.options.onEnd(e7.error);
            });
          }, e5.prototype.configureXhr = function() {
            this.xhr.responseType = "text", this.xhr.overrideMimeType("text/plain; charset=x-user-defined");
          }, e5.prototype.cancel = function() {
            this.options.debug && i6.debug("XHR.abort"), this.xhr.abort();
          }, e5;
        }();
        t3.XHR = u4;
        var d8 = function(e5) {
          function t4() {
            return null !== e5 && e5.apply(this, arguments) || this;
          }
          return o6(t4, e5), t4.prototype.configureXhr = function() {
            this.options.debug && i6.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"), this.xhr.responseType = "moz-chunked-arraybuffer";
          }, t4.prototype.onProgressEvent = function() {
            var e6 = this.xhr.response;
            this.options.debug && i6.debug("MozXHR.onProgressEvent: ", new Uint8Array(e6)), this.options.onChunk(new Uint8Array(e6));
          }, t4;
        }(u4);
        function c8(e5, t4) {
          var r5 = e5.charCodeAt(t4);
          if (r5 >= 55296 && r5 <= 56319) {
            var n7 = e5.charCodeAt(t4 + 1);
            n7 >= 56320 && n7 <= 57343 && (r5 = 65536 + (r5 - 55296 << 10) + (n7 - 56320));
          }
          return r5;
        }
        function p5(e5) {
          for (var t4 = new Uint8Array(e5.length), r5 = 0, n7 = 0; n7 < e5.length; n7++) {
            var o7 = String.prototype.codePointAt ? e5.codePointAt(n7) : c8(e5, n7);
            t4[r5++] = 255 & o7;
          }
          return t4;
        }
        t3.MozChunkedArrayBufferXHR = d8, t3.stringToArrayBuffer = p5;
      }, 849: function(e4, t3) {
        "use strict";
        var r4;
        function n6() {
          if (void 0 !== r4)
            return r4;
          if (XMLHttpRequest) {
            r4 = new XMLHttpRequest();
            try {
              r4.open("GET", "https://localhost");
            } catch (e5) {
            }
          }
          return r4;
        }
        function o6(e5) {
          var t4 = n6();
          if (!t4)
            return false;
          try {
            return t4.responseType = e5, t4.responseType === e5;
          } catch (e6) {
          }
          return false;
        }
        Object.defineProperty(t3, "__esModule", { value: true }), t3.detectXHROverrideMimeTypeSupport = t3.detectMozXHRSupport = t3.xhrSupportsResponseType = void 0, t3.xhrSupportsResponseType = o6, t3.detectMozXHRSupport = function() {
          return "undefined" != typeof XMLHttpRequest && o6("moz-chunked-arraybuffer");
        }, t3.detectXHROverrideMimeTypeSupport = function() {
          return "undefined" != typeof XMLHttpRequest && XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType");
        };
      }, 540: function(e4, t3, r4) {
        "use strict";
        Object.defineProperty(t3, "__esModule", { value: true }), t3.WebsocketTransport = void 0;
        var n6, o6 = r4(346), s4 = r4(617);
        !function(e5) {
          e5[e5.FINISH_SEND = 1] = "FINISH_SEND";
        }(n6 || (n6 = {}));
        var i6 = new Uint8Array([1]);
        t3.WebsocketTransport = function() {
          return function(e5) {
            return function(e6) {
              e6.debug && o6.debug("websocketRequest", e6);
              var t4, r5 = function(e7) {
                if ("https://" === e7.substr(0, 8))
                  return "wss://" + e7.substr(8);
                if ("http://" === e7.substr(0, 7))
                  return "ws://" + e7.substr(7);
                throw new Error("Websocket transport constructed with non-https:// or http:// host.");
              }(e6.url), a4 = [];
              function u4(e7) {
                if (e7 === n6.FINISH_SEND)
                  t4.send(i6);
                else {
                  var r6 = e7, o7 = new Int8Array(r6.byteLength + 1);
                  o7.set(new Uint8Array([0])), o7.set(r6, 1), t4.send(o7);
                }
              }
              return { sendMessage: function(e7) {
                t4 && t4.readyState !== t4.CONNECTING ? u4(e7) : a4.push(e7);
              }, finishSend: function() {
                t4 && t4.readyState !== t4.CONNECTING ? u4(n6.FINISH_SEND) : a4.push(n6.FINISH_SEND);
              }, start: function(n7) {
                (t4 = new WebSocket(r5, ["grpc-websockets"])).binaryType = "arraybuffer", t4.onopen = function() {
                  var r6;
                  e6.debug && o6.debug("websocketRequest.onopen"), t4.send((r6 = "", n7.forEach(function(e7, t5) {
                    r6 += e7 + ": " + t5.join(", ") + "\r\n";
                  }), s4.encodeASCII(r6))), a4.forEach(function(e7) {
                    u4(e7);
                  });
                }, t4.onclose = function(t5) {
                  e6.debug && o6.debug("websocketRequest.onclose", t5), e6.onEnd();
                }, t4.onerror = function(t5) {
                  e6.debug && o6.debug("websocketRequest.onerror", t5);
                }, t4.onmessage = function(t5) {
                  e6.onChunk(new Uint8Array(t5.data));
                };
              }, cancel: function() {
                e6.debug && o6.debug("websocket.abort"), t4.close();
              } };
            }(e5);
          };
        };
      }, 35: function(e4, t3, r4) {
        "use strict";
        Object.defineProperty(t3, "__esModule", { value: true }), t3.unary = void 0;
        var n6 = r4(65), o6 = r4(934);
        t3.unary = function(e5, t4) {
          if (e5.responseStream)
            throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");
          if (e5.requestStream)
            throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");
          var r5 = null, s4 = null, i6 = o6.client(e5, { host: t4.host, transport: t4.transport, debug: t4.debug });
          return i6.onHeaders(function(e6) {
            r5 = e6;
          }), i6.onMessage(function(e6) {
            s4 = e6;
          }), i6.onEnd(function(e6, o7, i7) {
            t4.onEnd({ status: e6, statusMessage: o7, headers: r5 || new n6.Metadata(), message: s4, trailers: i7 });
          }), i6.start(t4.metadata), i6.send(t4.request), i6.finishSend(), { close: function() {
            i6.close();
          } };
        };
      }, 882: function(e4, t3) {
        "use strict";
        Object.defineProperty(t3, "__esModule", { value: true }), t3.frameRequest = void 0, t3.frameRequest = function(e5) {
          var t4 = e5.serializeBinary(), r4 = new ArrayBuffer(t4.byteLength + 5);
          return new DataView(r4, 1, 4).setUint32(0, t4.length, false), new Uint8Array(r4, 5).set(t4), new Uint8Array(r4);
        };
      } }, t2 = {}, function r4(n6) {
        if (t2[n6])
          return t2[n6].exports;
        var o6 = t2[n6] = { exports: {} };
        return e3[n6].call(o6.exports, o6, o6.exports, r4), o6.exports;
      }(607);
      var e3, t2;
    });
  }
});

// node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d8, b5) {
  extendStatics(d8, b5);
  function __() {
    this.constructor = d8;
  }
  d8.prototype = b5 === null ? Object.create(b5) : (__.prototype = b5.prototype, new __());
}
function __rest(s4, e3) {
  var t2 = {};
  for (var p5 in s4)
    if (Object.prototype.hasOwnProperty.call(s4, p5) && e3.indexOf(p5) < 0)
      t2[p5] = s4[p5];
  if (s4 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i6 = 0, p5 = Object.getOwnPropertySymbols(s4); i6 < p5.length; i6++) {
      if (e3.indexOf(p5[i6]) < 0 && Object.prototype.propertyIsEnumerable.call(s4, p5[i6]))
        t2[p5[i6]] = s4[p5[i6]];
    }
  return t2;
}
function __decorate(decorators, target, key, desc) {
  var c8 = arguments.length, r4 = c8 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d8;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r4 = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i6 = decorators.length - 1; i6 >= 0; i6--)
      if (d8 = decorators[i6])
        r4 = (c8 < 3 ? d8(r4) : c8 > 3 ? d8(target, key, r4) : d8(target, key)) || r4;
  return c8 > 3 && r4 && Object.defineProperty(target, key, r4), r4;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P7, generator) {
  function adopt(value) {
    return value instanceof P7 ? value : new P7(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P7 || (P7 = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _6 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f11, y6, t2, g7;
  return g7 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g7[Symbol.iterator] = function() {
    return this;
  }), g7;
  function verb(n6) {
    return function(v11) {
      return step([n6, v11]);
    };
  }
  function step(op) {
    if (f11)
      throw new TypeError("Generator is already executing.");
    while (_6)
      try {
        if (f11 = 1, y6 && (t2 = op[0] & 2 ? y6["return"] : op[0] ? y6["throw"] || ((t2 = y6["return"]) && t2.call(y6), 0) : y6.next) && !(t2 = t2.call(y6, op[1])).done)
          return t2;
        if (y6 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _6.label++;
            return { value: op[1], done: false };
          case 5:
            _6.label++;
            y6 = op[1];
            op = [0];
            continue;
          case 7:
            op = _6.ops.pop();
            _6.trys.pop();
            continue;
          default:
            if (!(t2 = _6.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _6 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _6.label = op[1];
              break;
            }
            if (op[0] === 6 && _6.label < t2[1]) {
              _6.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _6.label < t2[2]) {
              _6.label = t2[2];
              _6.ops.push(op);
              break;
            }
            if (t2[2])
              _6.ops.pop();
            _6.trys.pop();
            continue;
        }
        op = body.call(thisArg, _6);
      } catch (e3) {
        op = [6, e3];
        y6 = 0;
      } finally {
        f11 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o6, m6, k6, k22) {
  if (k22 === void 0)
    k22 = k6;
  o6[k22] = m6[k6];
}
function __exportStar(m6, exports) {
  for (var p5 in m6)
    if (p5 !== "default" && !exports.hasOwnProperty(p5))
      exports[p5] = m6[p5];
}
function __values(o6) {
  var s4 = typeof Symbol === "function" && Symbol.iterator, m6 = s4 && o6[s4], i6 = 0;
  if (m6)
    return m6.call(o6);
  if (o6 && typeof o6.length === "number")
    return {
      next: function() {
        if (o6 && i6 >= o6.length)
          o6 = void 0;
        return { value: o6 && o6[i6++], done: !o6 };
      }
    };
  throw new TypeError(s4 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o6, n6) {
  var m6 = typeof Symbol === "function" && o6[Symbol.iterator];
  if (!m6)
    return o6;
  var i6 = m6.call(o6), r4, ar4 = [], e3;
  try {
    while ((n6 === void 0 || n6-- > 0) && !(r4 = i6.next()).done)
      ar4.push(r4.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r4 && !r4.done && (m6 = i6["return"]))
        m6.call(i6);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar4;
}
function __spread() {
  for (var ar4 = [], i6 = 0; i6 < arguments.length; i6++)
    ar4 = ar4.concat(__read(arguments[i6]));
  return ar4;
}
function __spreadArrays() {
  for (var s4 = 0, i6 = 0, il = arguments.length; i6 < il; i6++)
    s4 += arguments[i6].length;
  for (var r4 = Array(s4), k6 = 0, i6 = 0; i6 < il; i6++)
    for (var a4 = arguments[i6], j6 = 0, jl = a4.length; j6 < jl; j6++, k6++)
      r4[k6] = a4[j6];
  return r4;
}
function __await(v11) {
  return this instanceof __await ? (this.v = v11, this) : new __await(v11);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g7 = generator.apply(thisArg, _arguments || []), i6, q3 = [];
  return i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
    return this;
  }, i6;
  function verb(n6) {
    if (g7[n6])
      i6[n6] = function(v11) {
        return new Promise(function(a4, b5) {
          q3.push([n6, v11, a4, b5]) > 1 || resume(n6, v11);
        });
      };
  }
  function resume(n6, v11) {
    try {
      step(g7[n6](v11));
    } catch (e3) {
      settle(q3[0][3], e3);
    }
  }
  function step(r4) {
    r4.value instanceof __await ? Promise.resolve(r4.value.v).then(fulfill, reject) : settle(q3[0][2], r4);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f11, v11) {
    if (f11(v11), q3.shift(), q3.length)
      resume(q3[0][0], q3[0][1]);
  }
}
function __asyncDelegator(o6) {
  var i6, p5;
  return i6 = {}, verb("next"), verb("throw", function(e3) {
    throw e3;
  }), verb("return"), i6[Symbol.iterator] = function() {
    return this;
  }, i6;
  function verb(n6, f11) {
    i6[n6] = o6[n6] ? function(v11) {
      return (p5 = !p5) ? { value: __await(o6[n6](v11)), done: n6 === "return" } : f11 ? f11(v11) : v11;
    } : f11;
  }
}
function __asyncValues(o6) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m6 = o6[Symbol.asyncIterator], i6;
  return m6 ? m6.call(o6) : (o6 = typeof __values === "function" ? __values(o6) : o6[Symbol.iterator](), i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
    return this;
  }, i6);
  function verb(n6) {
    i6[n6] = o6[n6] && function(v11) {
      return new Promise(function(resolve2, reject) {
        v11 = o6[n6](v11), settle(resolve2, reject, v11.done, v11.value);
      });
    };
  }
  function settle(resolve2, reject, d8, v11) {
    Promise.resolve(v11).then(function(v12) {
      resolve2({ value: v12, done: d8 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k6 in mod)
      if (Object.hasOwnProperty.call(mod, k6))
        result[k6] = mod[k6];
  }
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics, __assign;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d8, b5) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d9, b6) {
        d9.__proto__ = b6;
      } || function(d9, b6) {
        for (var p5 in b6)
          if (b6.hasOwnProperty(p5))
            d9[p5] = b6[p5];
      };
      return extendStatics(d8, b5);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t2) {
        for (var s4, i6 = 1, n6 = arguments.length; i6 < n6; i6++) {
          s4 = arguments[i6];
          for (var p5 in s4)
            if (Object.prototype.hasOwnProperty.call(s4, p5))
              t2[p5] = s4[p5];
        }
        return t2;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/delay.js
var require_delay = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay(timeout) {
      return new Promise((resolve2) => {
        setTimeout(() => {
          resolve2(true);
        }, timeout);
      });
    }
    exports.delay = delay;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/misc.js
var require_misc = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/misc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1e3;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/time.js
var require_time = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/index.js
var require_constants = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_misc(), exports);
    tslib_1.__exportStar(require_time(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/convert.js
var require_convert = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;
    var constants_1 = require_constants();
    function toMiliseconds(seconds) {
      return seconds * constants_1.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds(miliseconds) {
      return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds;
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_delay(), exports);
    tslib_1.__exportStar(require_convert(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/watch.js
var require_watch = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    var Watch = class {
      constructor() {
        this.timestamps = /* @__PURE__ */ new Map();
      }
      start(label) {
        if (this.timestamps.has(label)) {
          throw new Error(`Watch already started for label: ${label}`);
        }
        this.timestamps.set(label, { started: Date.now() });
      }
      stop(label) {
        const timestamp = this.get(label);
        if (typeof timestamp.elapsed !== "undefined") {
          throw new Error(`Watch already stopped for label: ${label}`);
        }
        const elapsed = Date.now() - timestamp.started;
        this.timestamps.set(label, { started: timestamp.started, elapsed });
      }
      get(label) {
        const timestamp = this.timestamps.get(label);
        if (typeof timestamp === "undefined") {
          throw new Error(`No timestamp found for label: ${label}`);
        }
        return timestamp;
      }
      elapsed(label) {
        const timestamp = this.get(label);
        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
        return elapsed;
      }
    };
    exports.Watch = Watch;
    exports.default = Watch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/watch.js
var require_watch2 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    var IWatch = class {
    };
    exports.IWatch = IWatch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/index.js
var require_types = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_watch2(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_utils(), exports);
    tslib_1.__exportStar(require_watch(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_constants(), exports);
  }
});

// node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow;
    function getFromWindowOrThrow(name2) {
      const res = getFromWindow(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow;
    function getDocumentOrThrow() {
      return getFromWindowOrThrow("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow;
    function getDocument() {
      return getFromWindow("document");
    }
    exports.getDocument = getDocument;
    function getNavigatorOrThrow() {
      return getFromWindowOrThrow("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow;
    function getNavigator() {
      return getFromWindow("navigator");
    }
    exports.getNavigator = getNavigator;
    function getLocationOrThrow() {
      return getFromWindowOrThrow("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow;
    function getLocation() {
      return getFromWindow("location");
    }
    exports.getLocation = getLocation;
    function getCryptoOrThrow() {
      return getFromWindowOrThrow("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow;
    function getCrypto() {
      return getFromWindow("crypto");
    }
    exports.getCrypto = getCrypto;
    function getLocalStorageOrThrow() {
      return getFromWindowOrThrow("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
    function getLocalStorage() {
      return getFromWindow("localStorage");
    }
    exports.getLocalStorage = getLocalStorage;
  }
});

// node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs2();
    function getWindowMetadata() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e3) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i6 = 0; i6 < links.length; i6++) {
          const link = links[i6];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args2) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i6 = 0; i6 < metaTags.length; i6++) {
          const tag = metaTags[i6];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args2.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata;
  }
});

// node_modules/blakejs/util.js
var require_util = __commonJS({
  "node_modules/blakejs/util.js"(exports, module) {
    var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
    function normalizeInput(input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (typeof input === "string") {
        const encoder = new TextEncoder();
        ret = encoder.encode(input);
      } else {
        throw new Error(ERROR_MSG_INPUT);
      }
      return ret;
    }
    function toHex3(bytes) {
      return Array.prototype.map.call(bytes, function(n6) {
        return (n6 < 16 ? "0" : "") + n6.toString(16);
      }).join("");
    }
    function uint32ToHex(val) {
      return (4294967296 + val).toString(16).substring(1);
    }
    function debugPrint(label, arr, size4) {
      let msg = "\n" + label + " = ";
      for (let i6 = 0; i6 < arr.length; i6 += 2) {
        if (size4 === 32) {
          msg += uint32ToHex(arr[i6]).toUpperCase();
          msg += " ";
          msg += uint32ToHex(arr[i6 + 1]).toUpperCase();
        } else if (size4 === 64) {
          msg += uint32ToHex(arr[i6 + 1]).toUpperCase();
          msg += uint32ToHex(arr[i6]).toUpperCase();
        } else
          throw new Error("Invalid size " + size4);
        if (i6 % 6 === 4) {
          msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i6 < arr.length - 2) {
          msg += " ";
        }
      }
      console.log(msg);
    }
    function testSpeed(hashFn, N14, M7) {
      let startMs = (/* @__PURE__ */ new Date()).getTime();
      const input = new Uint8Array(N14);
      for (let i6 = 0; i6 < N14; i6++) {
        input[i6] = i6 % 256;
      }
      const genMs = (/* @__PURE__ */ new Date()).getTime();
      console.log("Generated random input in " + (genMs - startMs) + "ms");
      startMs = genMs;
      for (let i6 = 0; i6 < M7; i6++) {
        const hashHex = hashFn(input);
        const hashMs = (/* @__PURE__ */ new Date()).getTime();
        const ms3 = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms3 + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(
          Math.round(N14 / (1 << 20) / (ms3 / 1e3) * 100) / 100 + " MB PER SECOND"
        );
      }
    }
    module.exports = {
      normalizeInput,
      toHex: toHex3,
      debugPrint,
      testSpeed
    };
  }
});

// node_modules/blakejs/blake2b.js
var require_blake2b = __commonJS({
  "node_modules/blakejs/blake2b.js"(exports, module) {
    var util = require_util();
    function ADD64AA(v12, a4, b5) {
      const o0 = v12[a4] + v12[b5];
      let o1 = v12[a4 + 1] + v12[b5 + 1];
      if (o0 >= 4294967296) {
        o1++;
      }
      v12[a4] = o0;
      v12[a4 + 1] = o1;
    }
    function ADD64AC(v12, a4, b0, b1) {
      let o0 = v12[a4] + b0;
      if (b0 < 0) {
        o0 += 4294967296;
      }
      let o1 = v12[a4 + 1] + b1;
      if (o0 >= 4294967296) {
        o1++;
      }
      v12[a4] = o0;
      v12[a4 + 1] = o1;
    }
    function B2B_GET32(arr, i6) {
      return arr[i6] ^ arr[i6 + 1] << 8 ^ arr[i6 + 2] << 16 ^ arr[i6 + 3] << 24;
    }
    function B2B_G(a4, b5, c8, d8, ix, iy) {
      const x0 = m6[ix];
      const x1 = m6[ix + 1];
      const y0 = m6[iy];
      const y1 = m6[iy + 1];
      ADD64AA(v11, a4, b5);
      ADD64AC(v11, a4, x0, x1);
      let xor0 = v11[d8] ^ v11[a4];
      let xor1 = v11[d8 + 1] ^ v11[a4 + 1];
      v11[d8] = xor1;
      v11[d8 + 1] = xor0;
      ADD64AA(v11, c8, d8);
      xor0 = v11[b5] ^ v11[c8];
      xor1 = v11[b5 + 1] ^ v11[c8 + 1];
      v11[b5] = xor0 >>> 24 ^ xor1 << 8;
      v11[b5 + 1] = xor1 >>> 24 ^ xor0 << 8;
      ADD64AA(v11, a4, b5);
      ADD64AC(v11, a4, y0, y1);
      xor0 = v11[d8] ^ v11[a4];
      xor1 = v11[d8 + 1] ^ v11[a4 + 1];
      v11[d8] = xor0 >>> 16 ^ xor1 << 16;
      v11[d8 + 1] = xor1 >>> 16 ^ xor0 << 16;
      ADD64AA(v11, c8, d8);
      xor0 = v11[b5] ^ v11[c8];
      xor1 = v11[b5 + 1] ^ v11[c8 + 1];
      v11[b5] = xor1 >>> 31 ^ xor0 << 1;
      v11[b5 + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    var BLAKE2B_IV32 = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];
    var SIGMA82 = new Uint8Array(
      SIGMA8.map(function(x7) {
        return x7 * 2;
      })
    );
    var v11 = new Uint32Array(32);
    var m6 = new Uint32Array(32);
    function blake2bCompress(ctx, last) {
      let i6 = 0;
      for (i6 = 0; i6 < 16; i6++) {
        v11[i6] = ctx.h[i6];
        v11[i6 + 16] = BLAKE2B_IV32[i6];
      }
      v11[24] = v11[24] ^ ctx.t;
      v11[25] = v11[25] ^ ctx.t / 4294967296;
      if (last) {
        v11[28] = ~v11[28];
        v11[29] = ~v11[29];
      }
      for (i6 = 0; i6 < 32; i6++) {
        m6[i6] = B2B_GET32(ctx.b, 4 * i6);
      }
      for (i6 = 0; i6 < 12; i6++) {
        B2B_G(0, 8, 16, 24, SIGMA82[i6 * 16 + 0], SIGMA82[i6 * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i6 * 16 + 2], SIGMA82[i6 * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i6 * 16 + 4], SIGMA82[i6 * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i6 * 16 + 6], SIGMA82[i6 * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i6 * 16 + 8], SIGMA82[i6 * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i6 * 16 + 10], SIGMA82[i6 * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i6 * 16 + 12], SIGMA82[i6 * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i6 * 16 + 14], SIGMA82[i6 * 16 + 15]);
      }
      for (i6 = 0; i6 < 16; i6++) {
        ctx.h[i6] = ctx.h[i6] ^ v11[i6] ^ v11[i6 + 16];
      }
    }
    var parameterBlock = new Uint8Array([
      0,
      0,
      0,
      0,
      //  0: outlen, keylen, fanout, depth
      0,
      0,
      0,
      0,
      //  4: leaf length, sequential mode
      0,
      0,
      0,
      0,
      //  8: node offset
      0,
      0,
      0,
      0,
      // 12: node offset
      0,
      0,
      0,
      0,
      // 16: node depth, inner length, rfu
      0,
      0,
      0,
      0,
      // 20: rfu
      0,
      0,
      0,
      0,
      // 24: rfu
      0,
      0,
      0,
      0,
      // 28: rfu
      0,
      0,
      0,
      0,
      // 32: salt
      0,
      0,
      0,
      0,
      // 36: salt
      0,
      0,
      0,
      0,
      // 40: salt
      0,
      0,
      0,
      0,
      // 44: salt
      0,
      0,
      0,
      0,
      // 48: personal
      0,
      0,
      0,
      0,
      // 52: personal
      0,
      0,
      0,
      0,
      // 56: personal
      0,
      0,
      0,
      0
      // 60: personal
    ]);
    function blake2bInit(outlen, key, salt, personal) {
      if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
      }
      if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
      }
      if (salt && salt.length !== 16) {
        throw new Error("Illegal salt, expected Uint8Array with length is 16");
      }
      if (personal && personal.length !== 16) {
        throw new Error("Illegal personal, expected Uint8Array with length is 16");
      }
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        // input count
        c: 0,
        // pointer within buffer
        outlen
        // output length in bytes
      };
      parameterBlock.fill(0);
      parameterBlock[0] = outlen;
      if (key)
        parameterBlock[1] = key.length;
      parameterBlock[2] = 1;
      parameterBlock[3] = 1;
      if (salt)
        parameterBlock.set(salt, 32);
      if (personal)
        parameterBlock.set(personal, 48);
      for (let i6 = 0; i6 < 16; i6++) {
        ctx.h[i6] = BLAKE2B_IV32[i6] ^ B2B_GET32(parameterBlock, i6 * 4);
      }
      if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
      }
      return ctx;
    }
    function blake2bUpdate(ctx, input) {
      for (let i6 = 0; i6 < input.length; i6++) {
        if (ctx.c === 128) {
          ctx.t += ctx.c;
          blake2bCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i6];
      }
    }
    function blake2bFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 128) {
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i6 = 0; i6 < ctx.outlen; i6++) {
        out[i6] = ctx.h[i6 >> 2] >> 8 * (i6 & 3);
      }
      return out;
    }
    function blake2b(input, key, outlen, salt, personal) {
      outlen = outlen || 64;
      input = util.normalizeInput(input);
      if (salt) {
        salt = util.normalizeInput(salt);
      }
      if (personal) {
        personal = util.normalizeInput(personal);
      }
      const ctx = blake2bInit(outlen, key, salt, personal);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx);
    }
    function blake2bHex(input, key, outlen, salt, personal) {
      const output = blake2b(input, key, outlen, salt, personal);
      return util.toHex(output);
    }
    module.exports = {
      blake2b,
      blake2bHex,
      blake2bInit,
      blake2bUpdate,
      blake2bFinal
    };
  }
});

// node_modules/blakejs/blake2s.js
var require_blake2s = __commonJS({
  "node_modules/blakejs/blake2s.js"(exports, module) {
    var util = require_util();
    function B2S_GET32(v12, i6) {
      return v12[i6] ^ v12[i6 + 1] << 8 ^ v12[i6 + 2] << 16 ^ v12[i6 + 3] << 24;
    }
    function B2S_G(a4, b5, c8, d8, x7, y6) {
      v11[a4] = v11[a4] + v11[b5] + x7;
      v11[d8] = ROTR32(v11[d8] ^ v11[a4], 16);
      v11[c8] = v11[c8] + v11[d8];
      v11[b5] = ROTR32(v11[b5] ^ v11[c8], 12);
      v11[a4] = v11[a4] + v11[b5] + y6;
      v11[d8] = ROTR32(v11[d8] ^ v11[a4], 8);
      v11[c8] = v11[c8] + v11[d8];
      v11[b5] = ROTR32(v11[b5] ^ v11[c8], 7);
    }
    function ROTR32(x7, y6) {
      return x7 >>> y6 ^ x7 << 32 - y6;
    }
    var BLAKE2S_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);
    var v11 = new Uint32Array(16);
    var m6 = new Uint32Array(16);
    function blake2sCompress(ctx, last) {
      let i6 = 0;
      for (i6 = 0; i6 < 8; i6++) {
        v11[i6] = ctx.h[i6];
        v11[i6 + 8] = BLAKE2S_IV[i6];
      }
      v11[12] ^= ctx.t;
      v11[13] ^= ctx.t / 4294967296;
      if (last) {
        v11[14] = ~v11[14];
      }
      for (i6 = 0; i6 < 16; i6++) {
        m6[i6] = B2S_GET32(ctx.b, 4 * i6);
      }
      for (i6 = 0; i6 < 10; i6++) {
        B2S_G(0, 4, 8, 12, m6[SIGMA[i6 * 16 + 0]], m6[SIGMA[i6 * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m6[SIGMA[i6 * 16 + 2]], m6[SIGMA[i6 * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m6[SIGMA[i6 * 16 + 4]], m6[SIGMA[i6 * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m6[SIGMA[i6 * 16 + 6]], m6[SIGMA[i6 * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m6[SIGMA[i6 * 16 + 8]], m6[SIGMA[i6 * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m6[SIGMA[i6 * 16 + 10]], m6[SIGMA[i6 * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m6[SIGMA[i6 * 16 + 12]], m6[SIGMA[i6 * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m6[SIGMA[i6 * 16 + 14]], m6[SIGMA[i6 * 16 + 15]]);
      }
      for (i6 = 0; i6 < 8; i6++) {
        ctx.h[i6] ^= v11[i6] ^ v11[i6 + 8];
      }
    }
    function blake2sInit(outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
      }
      const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        // hash state
        b: new Uint8Array(64),
        // input block
        c: 0,
        // pointer within block
        t: 0,
        // input count
        outlen
        // output length in bytes
      };
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
      }
      return ctx;
    }
    function blake2sUpdate(ctx, input) {
      for (let i6 = 0; i6 < input.length; i6++) {
        if (ctx.c === 64) {
          ctx.t += ctx.c;
          blake2sCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i6];
      }
    }
    function blake2sFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 64) {
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i6 = 0; i6 < ctx.outlen; i6++) {
        out[i6] = ctx.h[i6 >> 2] >> 8 * (i6 & 3) & 255;
      }
      return out;
    }
    function blake2s(input, key, outlen) {
      outlen = outlen || 32;
      input = util.normalizeInput(input);
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx);
    }
    function blake2sHex(input, key, outlen) {
      const output = blake2s(input, key, outlen);
      return util.toHex(output);
    }
    module.exports = {
      blake2s,
      blake2sHex,
      blake2sInit,
      blake2sUpdate,
      blake2sFinal
    };
  }
});

// node_modules/blakejs/index.js
var require_blakejs = __commonJS({
  "node_modules/blakejs/index.js"(exports, module) {
    var b2b = require_blake2b();
    var b2s = require_blake2s();
    module.exports = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };
  }
});

// node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS({
  "node_modules/quick-format-unescaped/index.js"(exports, module) {
    "use strict";
    function tryStringify(o6) {
      try {
        return JSON.stringify(o6);
      } catch (e3) {
        return '"[Circular]"';
      }
    }
    module.exports = format;
    function format(f11, args2, opts) {
      var ss3 = opts && opts.stringify || tryStringify;
      var offset = 1;
      if (typeof f11 === "object" && f11 !== null) {
        var len = args2.length + offset;
        if (len === 1)
          return f11;
        var objects = new Array(len);
        objects[0] = ss3(f11);
        for (var index3 = 1; index3 < len; index3++) {
          objects[index3] = ss3(args2[index3]);
        }
        return objects.join(" ");
      }
      if (typeof f11 !== "string") {
        return f11;
      }
      var argLen = args2.length;
      if (argLen === 0)
        return f11;
      var str = "";
      var a4 = 1 - offset;
      var lastPos = -1;
      var flen = f11 && f11.length || 0;
      for (var i6 = 0; i6 < flen; ) {
        if (f11.charCodeAt(i6) === 37 && i6 + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f11.charCodeAt(i6 + 1)) {
            case 100:
            case 102:
              if (a4 >= argLen)
                break;
              if (args2[a4] == null)
                break;
              if (lastPos < i6)
                str += f11.slice(lastPos, i6);
              str += Number(args2[a4]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 105:
              if (a4 >= argLen)
                break;
              if (args2[a4] == null)
                break;
              if (lastPos < i6)
                str += f11.slice(lastPos, i6);
              str += Math.floor(Number(args2[a4]));
              lastPos = i6 + 2;
              i6++;
              break;
            case 79:
            case 111:
            case 106:
              if (a4 >= argLen)
                break;
              if (args2[a4] === void 0)
                break;
              if (lastPos < i6)
                str += f11.slice(lastPos, i6);
              var type = typeof args2[a4];
              if (type === "string") {
                str += "'" + args2[a4] + "'";
                lastPos = i6 + 2;
                i6++;
                break;
              }
              if (type === "function") {
                str += args2[a4].name || "<anonymous>";
                lastPos = i6 + 2;
                i6++;
                break;
              }
              str += ss3(args2[a4]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 115:
              if (a4 >= argLen)
                break;
              if (lastPos < i6)
                str += f11.slice(lastPos, i6);
              str += String(args2[a4]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 37:
              if (lastPos < i6)
                str += f11.slice(lastPos, i6);
              str += "%";
              lastPos = i6 + 2;
              i6++;
              a4--;
              break;
          }
          ++a4;
        }
        ++i6;
      }
      if (lastPos === -1)
        return f11;
      else if (lastPos < flen) {
        str += f11.slice(lastPos);
      }
      return str;
    }
  }
});

// node_modules/pino/browser.js
var require_browser2 = __commonJS({
  "node_modules/pino/browser.js"(exports, module) {
    "use strict";
    var format = require_quick_format_unescaped();
    module.exports = pino;
    var _console = pfGlobalThisOrFallback().console || {};
    var stdSerializers = {
      mapHttpRequest: mock,
      mapHttpResponse: mock,
      wrapRequestSerializer: passthrough,
      wrapResponseSerializer: passthrough,
      wrapErrorSerializer: passthrough,
      req: mock,
      res: mock,
      err: asErrValue
    };
    function shouldSerialize(serialize2, serializers) {
      if (Array.isArray(serialize2)) {
        const hasToFilter = serialize2.filter(function(k6) {
          return k6 !== "!stdSerializers.err";
        });
        return hasToFilter;
      } else if (serialize2 === true) {
        return Object.keys(serializers);
      }
      return false;
    }
    function pino(opts) {
      opts = opts || {};
      opts.browser = opts.browser || {};
      const transmit2 = opts.browser.transmit;
      if (transmit2 && typeof transmit2.send !== "function") {
        throw Error("pino: transmit option must have a send function");
      }
      const proto = opts.browser.write || _console;
      if (opts.browser.write)
        opts.browser.asObject = true;
      const serializers = opts.serializers || {};
      const serialize2 = shouldSerialize(opts.browser.serialize, serializers);
      let stdErrSerialize = opts.browser.serialize;
      if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf("!stdSerializers.err") > -1)
        stdErrSerialize = false;
      const levels = ["error", "fatal", "warn", "info", "debug", "trace"];
      if (typeof proto === "function") {
        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;
      }
      if (opts.enabled === false)
        opts.level = "silent";
      const level = opts.level || "info";
      const logger = Object.create(proto);
      if (!logger.log)
        logger.log = noop3;
      Object.defineProperty(logger, "levelVal", {
        get: getLevelVal
      });
      Object.defineProperty(logger, "level", {
        get: getLevel,
        set: setLevel
      });
      const setOpts = {
        transmit: transmit2,
        serialize: serialize2,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts)
      };
      logger.levels = pino.levels;
      logger.level = level;
      logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop3;
      logger.serializers = serializers;
      logger._serialize = serialize2;
      logger._stdErrSerialize = stdErrSerialize;
      logger.child = child;
      if (transmit2)
        logger._logEvent = createLogEventShape();
      function getLevelVal() {
        return this.level === "silent" ? Infinity : this.levels.values[this.level];
      }
      function getLevel() {
        return this._level;
      }
      function setLevel(level2) {
        if (level2 !== "silent" && !this.levels.values[level2]) {
          throw Error("unknown level " + level2);
        }
        this._level = level2;
        set2(setOpts, logger, "error", "log");
        set2(setOpts, logger, "fatal", "error");
        set2(setOpts, logger, "warn", "error");
        set2(setOpts, logger, "info", "log");
        set2(setOpts, logger, "debug", "log");
        set2(setOpts, logger, "trace", "log");
      }
      function child(bindings, childOptions) {
        if (!bindings) {
          throw new Error("missing bindings for child Pino");
        }
        childOptions = childOptions || {};
        if (serialize2 && bindings.serializers) {
          childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize2 && childOptionsSerializers) {
          var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
          var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize2;
          delete bindings.serializers;
          applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child(parent) {
          this._childLevel = (parent._childLevel | 0) + 1;
          this.error = bind(parent, bindings, "error");
          this.fatal = bind(parent, bindings, "fatal");
          this.warn = bind(parent, bindings, "warn");
          this.info = bind(parent, bindings, "info");
          this.debug = bind(parent, bindings, "debug");
          this.trace = bind(parent, bindings, "trace");
          if (childSerializers) {
            this.serializers = childSerializers;
            this._serialize = childSerialize;
          }
          if (transmit2) {
            this._logEvent = createLogEventShape(
              [].concat(parent._logEvent.bindings, bindings)
            );
          }
        }
        Child.prototype = this;
        return new Child(this);
      }
      return logger;
    }
    pino.levels = {
      values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10
      },
      labels: {
        10: "trace",
        20: "debug",
        30: "info",
        40: "warn",
        50: "error",
        60: "fatal"
      }
    };
    pino.stdSerializers = stdSerializers;
    pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });
    function set2(opts, logger, level, fallback2) {
      const proto = Object.getPrototypeOf(logger);
      logger[level] = logger.levelVal > logger.levels.values[level] ? noop3 : proto[level] ? proto[level] : _console[level] || _console[fallback2] || noop3;
      wrap(opts, logger, level);
    }
    function wrap(opts, logger, level) {
      if (!opts.transmit && logger[level] === noop3)
        return;
      logger[level] = function(write) {
        return function LOG() {
          const ts3 = opts.timestamp();
          const args2 = new Array(arguments.length);
          const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;
          for (var i6 = 0; i6 < args2.length; i6++)
            args2[i6] = arguments[i6];
          if (opts.serialize && !opts.asObject) {
            applySerializers(args2, this._serialize, this.serializers, this._stdErrSerialize);
          }
          if (opts.asObject)
            write.call(proto, asObject(this, level, args2, ts3));
          else
            write.apply(proto, args2);
          if (opts.transmit) {
            const transmitLevel = opts.transmit.level || logger.level;
            const transmitValue = pino.levels.values[transmitLevel];
            const methodValue = pino.levels.values[level];
            if (methodValue < transmitValue)
              return;
            transmit(this, {
              ts: ts3,
              methodLevel: level,
              methodValue,
              transmitLevel,
              transmitValue: pino.levels.values[opts.transmit.level || logger.level],
              send: opts.transmit.send,
              val: logger.levelVal
            }, args2);
          }
        };
      }(logger[level]);
    }
    function asObject(logger, level, args2, ts3) {
      if (logger._serialize)
        applySerializers(args2, logger._serialize, logger.serializers, logger._stdErrSerialize);
      const argsCloned = args2.slice();
      let msg = argsCloned[0];
      const o6 = {};
      if (ts3) {
        o6.time = ts3;
      }
      o6.level = pino.levels.values[level];
      let lvl = (logger._childLevel | 0) + 1;
      if (lvl < 1)
        lvl = 1;
      if (msg !== null && typeof msg === "object") {
        while (lvl-- && typeof argsCloned[0] === "object") {
          Object.assign(o6, argsCloned.shift());
        }
        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : void 0;
      } else if (typeof msg === "string")
        msg = format(argsCloned.shift(), argsCloned);
      if (msg !== void 0)
        o6.msg = msg;
      return o6;
    }
    function applySerializers(args2, serialize2, serializers, stdErrSerialize) {
      for (const i6 in args2) {
        if (stdErrSerialize && args2[i6] instanceof Error) {
          args2[i6] = pino.stdSerializers.err(args2[i6]);
        } else if (typeof args2[i6] === "object" && !Array.isArray(args2[i6])) {
          for (const k6 in args2[i6]) {
            if (serialize2 && serialize2.indexOf(k6) > -1 && k6 in serializers) {
              args2[i6][k6] = serializers[k6](args2[i6][k6]);
            }
          }
        }
      }
    }
    function bind(parent, bindings, level) {
      return function() {
        const args2 = new Array(1 + arguments.length);
        args2[0] = bindings;
        for (var i6 = 1; i6 < args2.length; i6++) {
          args2[i6] = arguments[i6 - 1];
        }
        return parent[level].apply(this, args2);
      };
    }
    function transmit(logger, opts, args2) {
      const send4 = opts.send;
      const ts3 = opts.ts;
      const methodLevel = opts.methodLevel;
      const methodValue = opts.methodValue;
      const val = opts.val;
      const bindings = logger._logEvent.bindings;
      applySerializers(
        args2,
        logger._serialize || Object.keys(logger.serializers),
        logger.serializers,
        logger._stdErrSerialize === void 0 ? true : logger._stdErrSerialize
      );
      logger._logEvent.ts = ts3;
      logger._logEvent.messages = args2.filter(function(arg2) {
        return bindings.indexOf(arg2) === -1;
      });
      logger._logEvent.level.label = methodLevel;
      logger._logEvent.level.value = methodValue;
      send4(methodLevel, logger._logEvent, val);
      logger._logEvent = createLogEventShape(bindings);
    }
    function createLogEventShape(bindings) {
      return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: "", value: 0 }
      };
    }
    function asErrValue(err) {
      const obj = {
        type: err.constructor.name,
        msg: err.message,
        stack: err.stack
      };
      for (const key in err) {
        if (obj[key] === void 0) {
          obj[key] = err[key];
        }
      }
      return obj;
    }
    function getTimeFunction(opts) {
      if (typeof opts.timestamp === "function") {
        return opts.timestamp;
      }
      if (opts.timestamp === false) {
        return nullTime;
      }
      return epochTime;
    }
    function mock() {
      return {};
    }
    function passthrough(a4) {
      return a4;
    }
    function noop3() {
    }
    function nullTime() {
      return false;
    }
    function epochTime() {
      return Date.now();
    }
    function unixTime() {
      return Math.round(Date.now() / 1e3);
    }
    function isoTime() {
      return new Date(Date.now()).toISOString();
    }
    function pfGlobalThisOrFallback() {
      function defd(o6) {
        return typeof o6 !== "undefined" && o6;
      }
      try {
        if (typeof globalThis !== "undefined")
          return globalThis;
        Object.defineProperty(Object.prototype, "globalThis", {
          get: function() {
            delete Object.prototype.globalThis;
            return this.globalThis = this;
          },
          configurable: true
        });
        return globalThis;
      } catch (e3) {
        return defd(self) || defd(window) || defd(this) || {};
      }
    }
  }
});

// node_modules/@walletconnect/environment/dist/cjs/crypto.js
var require_crypto = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
      return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/env.js
var require_env = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative2() {
      return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    exports.isReactNative = isReactNative2;
    function isNode2() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    exports.isNode = isNode2;
    function isBrowser() {
      return !isReactNative2() && !isNode2();
    }
    exports.isBrowser = isBrowser;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_env(), exports);
  }
});

// node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js
var require_browser3 = __commonJS({
  "node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill2 = __commonJS({
  "node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = function() {
      function F4() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F4.prototype = __global__;
      return new F4();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports2) {
        var g7 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g7,
          iterable: "Symbol" in g7 && "iterator" in Symbol,
          blob: "FileReader" in g7 && "Blob" in g7 && function() {
            try {
              new Blob();
              return true;
            } catch (e3) {
              return false;
            }
          }(),
          formData: "FormData" in g7,
          arrayBuffer: "ArrayBuffer" in g7
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name2) {
          if (typeof name2 !== "string") {
            name2 = String(name2);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name2) || name2 === "") {
            throw new TypeError('Invalid character in header field name: "' + name2 + '"');
          }
          return name2.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers2(headers) {
          this.map = {};
          if (headers instanceof Headers2) {
            headers.forEach(function(value, name2) {
              this.append(name2, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name2) {
              this.append(name2, headers[name2]);
            }, this);
          }
        }
        Headers2.prototype.append = function(name2, value) {
          name2 = normalizeName(name2);
          value = normalizeValue(value);
          var oldValue = this.map[name2];
          this.map[name2] = oldValue ? oldValue + ", " + value : value;
        };
        Headers2.prototype["delete"] = function(name2) {
          delete this.map[normalizeName(name2)];
        };
        Headers2.prototype.get = function(name2) {
          name2 = normalizeName(name2);
          return this.has(name2) ? this.map[name2] : null;
        };
        Headers2.prototype.has = function(name2) {
          return this.map.hasOwnProperty(normalizeName(name2));
        };
        Headers2.prototype.set = function(name2, value) {
          this.map[normalizeName(name2)] = normalizeValue(value);
        };
        Headers2.prototype.forEach = function(callback, thisArg) {
          for (var name2 in this.map) {
            if (this.map.hasOwnProperty(name2)) {
              callback.call(thisArg, this.map[name2], name2, this);
            }
          }
        };
        Headers2.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push(name2);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push([name2, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody)
            return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve2, reject) {
            reader.onload = function() {
              resolve2(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise2 = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise2;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise2 = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise2;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i6 = 0; i6 < view.length; i6++) {
            chars[i6] = String.fromCharCode(view[i6]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode9);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers2(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers2(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g7) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode9(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split2 = bytes.split("=");
              var name2 = split2.shift().replace(/\+/g, " ");
              var value = split2.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name2), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers2();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response2(bodyInit, options) {
          if (!(this instanceof Response2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers2(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers2(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response2 = new Response2(null, { status: 200, statusText: "" });
          response2.ok = false;
          response2.status = 0;
          response2.type = "error";
          return response2;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g7.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name2) {
            this.message = message;
            this.name = name2;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve2, reject) {
            var request2 = new Request2(input, init);
            if (request2.signal && request2.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request2.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve2(new Response2(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g7.location.href ? g7.location.href : url;
              } catch (e3) {
                return url;
              }
            }
            xhr.open(request2.method, fixUrl(request2.url), true);
            if (request2.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request2.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers2 || g7.Headers && init.headers instanceof g7.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name2) {
                names.push(normalizeName(name2));
                xhr.setRequestHeader(name2, normalizeValue(init.headers[name2]));
              });
              request2.headers.forEach(function(value, name2) {
                if (names.indexOf(name2) === -1) {
                  xhr.setRequestHeader(name2, value);
                }
              });
            } else {
              request2.headers.forEach(function(value, name2) {
                xhr.setRequestHeader(name2, value);
              });
            }
            if (request2.signal) {
              request2.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request2.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request2._bodyInit === "undefined" ? null : request2._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g7.fetch) {
          g7.fetch = fetch2;
          g7.Headers = Headers2;
          g7.Request = Request2;
          g7.Response = Response2;
        }
        exports2.Headers = Headers2;
        exports2.Request = Request2;
        exports2.Response = Response2;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// node_modules/@onflow/util-logger/dist/util-logger.module.js
var config = null;
var setConfig = (_config) => {
  config = _config;
};
var LEVELS = function(LEVELS2) {
  LEVELS2[LEVELS2["debug"] = 5] = "debug";
  LEVELS2[LEVELS2["info"] = 4] = "info";
  LEVELS2[LEVELS2["log"] = 3] = "log";
  LEVELS2[LEVELS2["warn"] = 2] = "warn";
  LEVELS2[LEVELS2["error"] = 1] = "error";
  return LEVELS2;
}({});
var buildLoggerMessageArgs = (options) => {
  const {
    title,
    message
  } = options;
  return [`
    %c${title}
    ============================

    ${message}

    ============================
    `.replace(/\n[^\S\r\n]+/g, "\n").trim(), "font-weight:bold;font-family:monospace;"];
};
var log = async (options) => {
  var _a2;
  const {
    title,
    message,
    level,
    always
  } = options;
  const configLoggerLevel = await ((_a2 = config == null ? void 0 : config()) == null ? void 0 : _a2.get("logger.level")) ?? LEVELS.warn;
  if (!always && configLoggerLevel < level)
    return;
  const loggerMessageArgs = buildLoggerMessageArgs({
    title,
    message
  });
  switch (level) {
    case LEVELS.debug:
      console.debug(...loggerMessageArgs);
      break;
    case LEVELS.info:
      console.info(...loggerMessageArgs);
      break;
    case LEVELS.warn:
      console.warn(...loggerMessageArgs);
      break;
    case LEVELS.error:
      console.error(...loggerMessageArgs);
      break;
    default:
      console.log(...loggerMessageArgs);
  }
};
log.deprecate = (options) => {
  const {
    pkg,
    subject,
    transition,
    level = LEVELS.warn,
    message = "",
    callback = null
  } = options;
  const capitalizeFirstLetter = (str) => {
    return str.charAt(0).toUpperCase() + str.slice(1);
  };
  const logMessage = () => log({
    title: `${pkg ? pkg + " " : ""}Deprecation Notice`,
    message: `
      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? " of " + pkg : ""}.` : ""}${message ? "\n" + message : ""}${transition ? `
You can learn more (including a guide on common transition paths) here: ${transition}` : ""}
    `.trim(),
    level
  });
  if (typeof callback === "function") {
    return async function() {
      await logMessage();
      return await callback(...arguments);
    };
  }
  return logMessage();
};

// node_modules/@onflow/util-invariant/dist/util-invariant.module.js
function invariant(fact, msg) {
  var _a2, _b, _c2;
  if (!fact) {
    const error = new Error(`INVARIANT ${msg}`);
    error.stack = (_c2 = (_b = (_a2 = error.stack) == null ? void 0 : _a2.split("\n")) == null ? void 0 : _b.filter((d8) => !/at invariant/.test(d8))) == null ? void 0 : _c2.join("\n");
    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      rest[_key - 2] = arguments[_key];
    }
    console.error("\n\n---\n\n", error, "\n\n", ...rest, "\n\n---\n\n");
    throw error;
  }
}

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i6 = 0; i6 < 256; ++i6) {
  byteToHex.push((i6 + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v11;
  const arr = new Uint8Array(16);
  arr[0] = (v11 = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v11 >>> 16 & 255;
  arr[2] = v11 >>> 8 & 255;
  arr[3] = v11 & 255;
  arr[4] = (v11 = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v11 & 255;
  arr[6] = (v11 = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v11 & 255;
  arr[8] = (v11 = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v11 & 255;
  arr[10] = (v11 = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v11 / 4294967296 & 255;
  arr[12] = v11 >>> 24 & 255;
  arr[13] = v11 >>> 16 & 255;
  arr[14] = v11 >>> 8 & 255;
  arr[15] = v11 & 255;
  return arr;
}
var parse_default = parse;

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i6 = 0; i6 < str.length; ++i6) {
    bytes.push(str.charCodeAt(i6));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name2, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i6 = 0; i6 < 16; ++i6) {
        buf[offset + i6] = bytes[i6];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name2;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (let i6 = 0; i6 < msg.length; ++i6) {
      bytes[i6] = msg.charCodeAt(i6);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = "0123456789abcdef";
  for (let i6 = 0; i6 < length32; i6 += 8) {
    const x7 = input[i6 >> 5] >>> i6 % 32 & 255;
    const hex2 = parseInt(hexTab.charAt(x7 >>> 4 & 15) + hexTab.charAt(x7 & 15), 16);
    output.push(hex2);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x7, len) {
  x7[len >> 5] |= 128 << len % 32;
  x7[getOutputLength(len) - 1] = len;
  let a4 = 1732584193;
  let b5 = -271733879;
  let c8 = -1732584194;
  let d8 = 271733878;
  for (let i6 = 0; i6 < x7.length; i6 += 16) {
    const olda = a4;
    const oldb = b5;
    const oldc = c8;
    const oldd = d8;
    a4 = md5ff(a4, b5, c8, d8, x7[i6], 7, -680876936);
    d8 = md5ff(d8, a4, b5, c8, x7[i6 + 1], 12, -389564586);
    c8 = md5ff(c8, d8, a4, b5, x7[i6 + 2], 17, 606105819);
    b5 = md5ff(b5, c8, d8, a4, x7[i6 + 3], 22, -1044525330);
    a4 = md5ff(a4, b5, c8, d8, x7[i6 + 4], 7, -176418897);
    d8 = md5ff(d8, a4, b5, c8, x7[i6 + 5], 12, 1200080426);
    c8 = md5ff(c8, d8, a4, b5, x7[i6 + 6], 17, -1473231341);
    b5 = md5ff(b5, c8, d8, a4, x7[i6 + 7], 22, -45705983);
    a4 = md5ff(a4, b5, c8, d8, x7[i6 + 8], 7, 1770035416);
    d8 = md5ff(d8, a4, b5, c8, x7[i6 + 9], 12, -1958414417);
    c8 = md5ff(c8, d8, a4, b5, x7[i6 + 10], 17, -42063);
    b5 = md5ff(b5, c8, d8, a4, x7[i6 + 11], 22, -1990404162);
    a4 = md5ff(a4, b5, c8, d8, x7[i6 + 12], 7, 1804603682);
    d8 = md5ff(d8, a4, b5, c8, x7[i6 + 13], 12, -40341101);
    c8 = md5ff(c8, d8, a4, b5, x7[i6 + 14], 17, -1502002290);
    b5 = md5ff(b5, c8, d8, a4, x7[i6 + 15], 22, 1236535329);
    a4 = md5gg(a4, b5, c8, d8, x7[i6 + 1], 5, -165796510);
    d8 = md5gg(d8, a4, b5, c8, x7[i6 + 6], 9, -1069501632);
    c8 = md5gg(c8, d8, a4, b5, x7[i6 + 11], 14, 643717713);
    b5 = md5gg(b5, c8, d8, a4, x7[i6], 20, -373897302);
    a4 = md5gg(a4, b5, c8, d8, x7[i6 + 5], 5, -701558691);
    d8 = md5gg(d8, a4, b5, c8, x7[i6 + 10], 9, 38016083);
    c8 = md5gg(c8, d8, a4, b5, x7[i6 + 15], 14, -660478335);
    b5 = md5gg(b5, c8, d8, a4, x7[i6 + 4], 20, -405537848);
    a4 = md5gg(a4, b5, c8, d8, x7[i6 + 9], 5, 568446438);
    d8 = md5gg(d8, a4, b5, c8, x7[i6 + 14], 9, -1019803690);
    c8 = md5gg(c8, d8, a4, b5, x7[i6 + 3], 14, -187363961);
    b5 = md5gg(b5, c8, d8, a4, x7[i6 + 8], 20, 1163531501);
    a4 = md5gg(a4, b5, c8, d8, x7[i6 + 13], 5, -1444681467);
    d8 = md5gg(d8, a4, b5, c8, x7[i6 + 2], 9, -51403784);
    c8 = md5gg(c8, d8, a4, b5, x7[i6 + 7], 14, 1735328473);
    b5 = md5gg(b5, c8, d8, a4, x7[i6 + 12], 20, -1926607734);
    a4 = md5hh(a4, b5, c8, d8, x7[i6 + 5], 4, -378558);
    d8 = md5hh(d8, a4, b5, c8, x7[i6 + 8], 11, -2022574463);
    c8 = md5hh(c8, d8, a4, b5, x7[i6 + 11], 16, 1839030562);
    b5 = md5hh(b5, c8, d8, a4, x7[i6 + 14], 23, -35309556);
    a4 = md5hh(a4, b5, c8, d8, x7[i6 + 1], 4, -1530992060);
    d8 = md5hh(d8, a4, b5, c8, x7[i6 + 4], 11, 1272893353);
    c8 = md5hh(c8, d8, a4, b5, x7[i6 + 7], 16, -155497632);
    b5 = md5hh(b5, c8, d8, a4, x7[i6 + 10], 23, -1094730640);
    a4 = md5hh(a4, b5, c8, d8, x7[i6 + 13], 4, 681279174);
    d8 = md5hh(d8, a4, b5, c8, x7[i6], 11, -358537222);
    c8 = md5hh(c8, d8, a4, b5, x7[i6 + 3], 16, -722521979);
    b5 = md5hh(b5, c8, d8, a4, x7[i6 + 6], 23, 76029189);
    a4 = md5hh(a4, b5, c8, d8, x7[i6 + 9], 4, -640364487);
    d8 = md5hh(d8, a4, b5, c8, x7[i6 + 12], 11, -421815835);
    c8 = md5hh(c8, d8, a4, b5, x7[i6 + 15], 16, 530742520);
    b5 = md5hh(b5, c8, d8, a4, x7[i6 + 2], 23, -995338651);
    a4 = md5ii(a4, b5, c8, d8, x7[i6], 6, -198630844);
    d8 = md5ii(d8, a4, b5, c8, x7[i6 + 7], 10, 1126891415);
    c8 = md5ii(c8, d8, a4, b5, x7[i6 + 14], 15, -1416354905);
    b5 = md5ii(b5, c8, d8, a4, x7[i6 + 5], 21, -57434055);
    a4 = md5ii(a4, b5, c8, d8, x7[i6 + 12], 6, 1700485571);
    d8 = md5ii(d8, a4, b5, c8, x7[i6 + 3], 10, -1894986606);
    c8 = md5ii(c8, d8, a4, b5, x7[i6 + 10], 15, -1051523);
    b5 = md5ii(b5, c8, d8, a4, x7[i6 + 1], 21, -2054922799);
    a4 = md5ii(a4, b5, c8, d8, x7[i6 + 8], 6, 1873313359);
    d8 = md5ii(d8, a4, b5, c8, x7[i6 + 15], 10, -30611744);
    c8 = md5ii(c8, d8, a4, b5, x7[i6 + 6], 15, -1560198380);
    b5 = md5ii(b5, c8, d8, a4, x7[i6 + 13], 21, 1309151649);
    a4 = md5ii(a4, b5, c8, d8, x7[i6 + 4], 6, -145523070);
    d8 = md5ii(d8, a4, b5, c8, x7[i6 + 11], 10, -1120210379);
    c8 = md5ii(c8, d8, a4, b5, x7[i6 + 2], 15, 718787259);
    b5 = md5ii(b5, c8, d8, a4, x7[i6 + 9], 21, -343485551);
    a4 = safeAdd(a4, olda);
    b5 = safeAdd(b5, oldb);
    c8 = safeAdd(c8, oldc);
    d8 = safeAdd(d8, oldd);
  }
  return [a4, b5, c8, d8];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));
  for (let i6 = 0; i6 < length8; i6 += 8) {
    output[i6 >> 5] |= (input[i6 / 8] & 255) << i6 % 32;
  }
  return output;
}
function safeAdd(x7, y6) {
  const lsw = (x7 & 65535) + (y6 & 65535);
  const msw = (x7 >> 16) + (y6 >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q3, a4, b5, x7, s4, t2) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a4, q3), safeAdd(x7, t2)), s4), b5);
}
function md5ff(a4, b5, c8, d8, x7, s4, t2) {
  return md5cmn(b5 & c8 | ~b5 & d8, a4, b5, x7, s4, t2);
}
function md5gg(a4, b5, c8, d8, x7, s4, t2) {
  return md5cmn(b5 & d8 | c8 & ~d8, a4, b5, x7, s4, t2);
}
function md5hh(a4, b5, c8, d8, x7, s4, t2) {
  return md5cmn(b5 ^ c8 ^ d8, a4, b5, x7, s4, t2);
}
function md5ii(a4, b5, c8, d8, x7, s4, t2) {
  return md5cmn(c8 ^ (b5 | ~d8), a4, b5, x7, s4, t2);
}
var md5_default = md5;

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35("v3", 48, md5_default);

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i6 = 0; i6 < 16; ++i6) {
      buf[offset + i6] = rnds[i6];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/sha1.js
function f(s4, x7, y6, z7) {
  switch (s4) {
    case 0:
      return x7 & y6 ^ ~x7 & z7;
    case 1:
      return x7 ^ y6 ^ z7;
    case 2:
      return x7 & y6 ^ x7 & z7 ^ y6 & z7;
    case 3:
      return x7 ^ y6 ^ z7;
  }
}
function ROTL(x7, n6) {
  return x7 << n6 | x7 >>> 32 - n6;
}
function sha1(bytes) {
  const K7 = [1518500249, 1859775393, 2400959708, 3395469782];
  const H3 = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (let i6 = 0; i6 < msg.length; ++i6) {
      bytes.push(msg.charCodeAt(i6));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  const l8 = bytes.length / 4 + 2;
  const N14 = Math.ceil(l8 / 16);
  const M7 = new Array(N14);
  for (let i6 = 0; i6 < N14; ++i6) {
    const arr = new Uint32Array(16);
    for (let j6 = 0; j6 < 16; ++j6) {
      arr[j6] = bytes[i6 * 64 + j6 * 4] << 24 | bytes[i6 * 64 + j6 * 4 + 1] << 16 | bytes[i6 * 64 + j6 * 4 + 2] << 8 | bytes[i6 * 64 + j6 * 4 + 3];
    }
    M7[i6] = arr;
  }
  M7[N14 - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M7[N14 - 1][14] = Math.floor(M7[N14 - 1][14]);
  M7[N14 - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i6 = 0; i6 < N14; ++i6) {
    const W5 = new Uint32Array(80);
    for (let t2 = 0; t2 < 16; ++t2) {
      W5[t2] = M7[i6][t2];
    }
    for (let t2 = 16; t2 < 80; ++t2) {
      W5[t2] = ROTL(W5[t2 - 3] ^ W5[t2 - 8] ^ W5[t2 - 14] ^ W5[t2 - 16], 1);
    }
    let a4 = H3[0];
    let b5 = H3[1];
    let c8 = H3[2];
    let d8 = H3[3];
    let e3 = H3[4];
    for (let t2 = 0; t2 < 80; ++t2) {
      const s4 = Math.floor(t2 / 20);
      const T7 = ROTL(a4, 5) + f(s4, b5, c8, d8) + e3 + K7[s4] + W5[t2] >>> 0;
      e3 = d8;
      d8 = c8;
      c8 = ROTL(b5, 30) >>> 0;
      b5 = a4;
      a4 = T7;
    }
    H3[0] = H3[0] + a4 >>> 0;
    H3[1] = H3[1] + b5 >>> 0;
    H3[2] = H3[2] + c8 >>> 0;
    H3[3] = H3[3] + d8 >>> 0;
    H3[4] = H3[4] + e3 >>> 0;
  }
  return [H3[0] >> 24 & 255, H3[0] >> 16 & 255, H3[0] >> 8 & 255, H3[0] & 255, H3[1] >> 24 & 255, H3[1] >> 16 & 255, H3[1] >> 8 & 255, H3[1] & 255, H3[2] >> 24 & 255, H3[2] >> 16 & 255, H3[2] >> 8 & 255, H3[2] & 255, H3[3] >> 24 & 255, H3[3] >> 16 & 255, H3[3] >> 8 & 255, H3[3] & 255, H3[4] >> 24 & 255, H3[4] >> 16 & 255, H3[4] >> 8 & 255, H3[4] & 255];
}
var sha1_default = sha1;

// node_modules/@onflow/sdk/node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35("v5", 80, sha1_default);

// node_modules/@onflow/typedefs/dist/typedefs.module.js
var InteractionTag = function(InteractionTag2) {
  InteractionTag2["UNKNOWN"] = "UNKNOWN";
  InteractionTag2["SCRIPT"] = "SCRIPT";
  InteractionTag2["TRANSACTION"] = "TRANSACTION";
  InteractionTag2["GET_TRANSACTION_STATUS"] = "GET_TRANSACTION_STATUS";
  InteractionTag2["GET_ACCOUNT"] = "GET_ACCOUNT";
  InteractionTag2["GET_EVENTS"] = "GET_EVENTS";
  InteractionTag2["PING"] = "PING";
  InteractionTag2["GET_TRANSACTION"] = "GET_TRANSACTION";
  InteractionTag2["GET_BLOCK"] = "GET_BLOCK";
  InteractionTag2["GET_BLOCK_HEADER"] = "GET_BLOCK_HEADER";
  InteractionTag2["GET_COLLECTION"] = "GET_COLLECTION";
  InteractionTag2["GET_NETWORK_PARAMETERS"] = "GET_NETWORK_PARAMETERS";
  InteractionTag2["SUBSCRIBE_EVENTS"] = "SUBSCRIBE_EVENTS";
  InteractionTag2["GET_NODE_VERSION_INFO"] = "GET_NODE_VERSION_INFO";
  return InteractionTag2;
}({});
var InteractionStatus = function(InteractionStatus2) {
  InteractionStatus2["BAD"] = "BAD";
  InteractionStatus2["OK"] = "OK";
  return InteractionStatus2;
}({});
var TransactionRole = function(TransactionRole2) {
  TransactionRole2["AUTHORIZER"] = "authorizer";
  TransactionRole2["PAYER"] = "payer";
  TransactionRole2["PROPOSER"] = "proposer";
  return TransactionRole2;
}({});
var InteractionResolverKind = function(InteractionResolverKind2) {
  InteractionResolverKind2["ARGUMENT"] = "ARGUMENT";
  InteractionResolverKind2["ACCOUNT"] = "ACCOUNT";
  return InteractionResolverKind2;
}({});
var FvmErrorCode = function(FvmErrorCode2) {
  FvmErrorCode2[FvmErrorCode2["UNKNOWN_ERROR"] = -1] = "UNKNOWN_ERROR";
  FvmErrorCode2[FvmErrorCode2["TX_VALIDATION_ERROR"] = 1e3] = "TX_VALIDATION_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_TX_BYTE_SIZE_ERROR"] = 1001] = "INVALID_TX_BYTE_SIZE_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_REFERENCE_BLOCK_ERROR"] = 1002] = "INVALID_REFERENCE_BLOCK_ERROR";
  FvmErrorCode2[FvmErrorCode2["EXPIRED_TRANSACTION_ERROR"] = 1003] = "EXPIRED_TRANSACTION_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_SCRIPT_ERROR"] = 1004] = "INVALID_SCRIPT_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_GAS_LIMIT_ERROR"] = 1005] = "INVALID_GAS_LIMIT_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_PROPOSAL_SIGNATURE_ERROR"] = 1006] = "INVALID_PROPOSAL_SIGNATURE_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_PROPOSAL_SEQ_NUMBER_ERROR"] = 1007] = "INVALID_PROPOSAL_SEQ_NUMBER_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_PAYLOAD_SIGNATURE_ERROR"] = 1008] = "INVALID_PAYLOAD_SIGNATURE_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_ENVELOPE_SIGNATURE_ERROR"] = 1009] = "INVALID_ENVELOPE_SIGNATURE_ERROR";
  FvmErrorCode2[FvmErrorCode2["FVM_INTERNAL_ERROR"] = 1050] = "FVM_INTERNAL_ERROR";
  FvmErrorCode2[FvmErrorCode2["VALUE_ERROR"] = 1051] = "VALUE_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_ARGUMENT_ERROR"] = 1052] = "INVALID_ARGUMENT_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_ADDRESS_ERROR"] = 1053] = "INVALID_ADDRESS_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_LOCATION_ERROR"] = 1054] = "INVALID_LOCATION_ERROR";
  FvmErrorCode2[FvmErrorCode2["ACCOUNT_AUTHORIZATION_ERROR"] = 1055] = "ACCOUNT_AUTHORIZATION_ERROR";
  FvmErrorCode2[FvmErrorCode2["OPERATION_AUTHORIZATION_ERROR"] = 1056] = "OPERATION_AUTHORIZATION_ERROR";
  FvmErrorCode2[FvmErrorCode2["OPERATION_NOT_SUPPORTED_ERROR"] = 1057] = "OPERATION_NOT_SUPPORTED_ERROR";
  FvmErrorCode2[FvmErrorCode2["BLOCK_HEIGHT_OUT_OF_RANGE_ERROR"] = 1058] = "BLOCK_HEIGHT_OUT_OF_RANGE_ERROR";
  FvmErrorCode2[FvmErrorCode2["EXECUTION_ERROR"] = 1100] = "EXECUTION_ERROR";
  FvmErrorCode2[FvmErrorCode2["CADENCE_RUNTIME_ERROR"] = 1101] = "CADENCE_RUNTIME_ERROR";
  FvmErrorCode2[FvmErrorCode2["ENCODING_UNSUPPORTED_VALUE"] = 1102] = "ENCODING_UNSUPPORTED_VALUE";
  FvmErrorCode2[FvmErrorCode2["STORAGE_CAPACITY_EXCEEDED"] = 1103] = "STORAGE_CAPACITY_EXCEEDED";
  FvmErrorCode2[FvmErrorCode2["GAS_LIMIT_EXCEEDED_ERROR"] = 1104] = "GAS_LIMIT_EXCEEDED_ERROR";
  FvmErrorCode2[FvmErrorCode2["EVENT_LIMIT_EXCEEDED_ERROR"] = 1105] = "EVENT_LIMIT_EXCEEDED_ERROR";
  FvmErrorCode2[FvmErrorCode2["LEDGER_INTERACTION_LIMIT_EXCEEDED_ERROR"] = 1106] = "LEDGER_INTERACTION_LIMIT_EXCEEDED_ERROR";
  FvmErrorCode2[FvmErrorCode2["STATE_KEY_SIZE_LIMIT_ERROR"] = 1107] = "STATE_KEY_SIZE_LIMIT_ERROR";
  FvmErrorCode2[FvmErrorCode2["STATE_VALUE_SIZE_LIMIT_ERROR"] = 1108] = "STATE_VALUE_SIZE_LIMIT_ERROR";
  FvmErrorCode2[FvmErrorCode2["TRANSACTION_FEE_DEDUCTION_FAILED_ERROR"] = 1109] = "TRANSACTION_FEE_DEDUCTION_FAILED_ERROR";
  FvmErrorCode2[FvmErrorCode2["COMPUTATION_LIMIT_EXCEEDED_ERROR"] = 1110] = "COMPUTATION_LIMIT_EXCEEDED_ERROR";
  FvmErrorCode2[FvmErrorCode2["MEMORY_LIMIT_EXCEEDED_ERROR"] = 1111] = "MEMORY_LIMIT_EXCEEDED_ERROR";
  FvmErrorCode2[FvmErrorCode2["COULD_NOT_DECODE_EXECUTION_PARAMETER_FROM_STATE"] = 1112] = "COULD_NOT_DECODE_EXECUTION_PARAMETER_FROM_STATE";
  FvmErrorCode2[FvmErrorCode2["SCRIPT_EXECUTION_TIMED_OUT_ERROR"] = 1113] = "SCRIPT_EXECUTION_TIMED_OUT_ERROR";
  FvmErrorCode2[FvmErrorCode2["SCRIPT_EXECUTION_CANCELLED_ERROR"] = 1114] = "SCRIPT_EXECUTION_CANCELLED_ERROR";
  FvmErrorCode2[FvmErrorCode2["EVENT_ENCODING_ERROR"] = 1115] = "EVENT_ENCODING_ERROR";
  FvmErrorCode2[FvmErrorCode2["INVALID_INTERNAL_STATE_ACCESS_ERROR"] = 1116] = "INVALID_INTERNAL_STATE_ACCESS_ERROR";
  FvmErrorCode2[FvmErrorCode2["INSUFFICIENT_PAYER_BALANCE"] = 1118] = "INSUFFICIENT_PAYER_BALANCE";
  FvmErrorCode2[FvmErrorCode2["ACCOUNT_ERROR"] = 1200] = "ACCOUNT_ERROR";
  FvmErrorCode2[FvmErrorCode2["ACCOUNT_NOT_FOUND_ERROR"] = 1201] = "ACCOUNT_NOT_FOUND_ERROR";
  FvmErrorCode2[FvmErrorCode2["ACCOUNT_PUBLIC_KEY_NOT_FOUND_ERROR"] = 1202] = "ACCOUNT_PUBLIC_KEY_NOT_FOUND_ERROR";
  FvmErrorCode2[FvmErrorCode2["ACCOUNT_ALREADY_EXISTS_ERROR"] = 1203] = "ACCOUNT_ALREADY_EXISTS_ERROR";
  FvmErrorCode2[FvmErrorCode2["FROZEN_ACCOUNT_ERROR"] = 1204] = "FROZEN_ACCOUNT_ERROR";
  FvmErrorCode2[FvmErrorCode2["ACCOUNT_STORAGE_NOT_INITIALIZED_ERROR"] = 1205] = "ACCOUNT_STORAGE_NOT_INITIALIZED_ERROR";
  FvmErrorCode2[FvmErrorCode2["ACCOUNT_PUBLIC_KEY_LIMIT_ERROR"] = 1206] = "ACCOUNT_PUBLIC_KEY_LIMIT_ERROR";
  FvmErrorCode2[FvmErrorCode2["CONTRACT_ERROR"] = 1250] = "CONTRACT_ERROR";
  FvmErrorCode2[FvmErrorCode2["CONTRACT_NOT_FOUND_ERROR"] = 1251] = "CONTRACT_NOT_FOUND_ERROR";
  FvmErrorCode2[FvmErrorCode2["CONTRACT_NAMES_NOT_FOUND_ERROR"] = 1252] = "CONTRACT_NAMES_NOT_FOUND_ERROR";
  FvmErrorCode2[FvmErrorCode2["EVM_EXECUTION_ERROR"] = 1300] = "EVM_EXECUTION_ERROR";
  return FvmErrorCode2;
}({});
var SubscriptionTopic = function(SubscriptionTopic2) {
  SubscriptionTopic2["BLOCKS"] = "blocks";
  SubscriptionTopic2["BLOCK_HEADERS"] = "block_headers";
  SubscriptionTopic2["BLOCK_DIGESTS"] = "block_digests";
  SubscriptionTopic2["ACCOUNT_STATUSES"] = "account_statuses";
  SubscriptionTopic2["TRANSACTION_STATUSES"] = "transaction_statuses";
  SubscriptionTopic2["EVENTS"] = "events";
  return SubscriptionTopic2;
}({});
var SignatureAlgorithm = function(SignatureAlgorithm2) {
  SignatureAlgorithm2[SignatureAlgorithm2["ECDSA_P256"] = 1] = "ECDSA_P256";
  SignatureAlgorithm2[SignatureAlgorithm2["ECDSA_secp256k1"] = 2] = "ECDSA_secp256k1";
  SignatureAlgorithm2[SignatureAlgorithm2["BLS_BLS12_381"] = 3] = "BLS_BLS12_381";
  return SignatureAlgorithm2;
}({});
var HashAlgorithm = function(HashAlgorithm2) {
  HashAlgorithm2[HashAlgorithm2["SHA2_256"] = 1] = "SHA2_256";
  HashAlgorithm2[HashAlgorithm2["SHA2_384"] = 2] = "SHA2_384";
  HashAlgorithm2[HashAlgorithm2["SHA3_256"] = 3] = "SHA3_256";
  HashAlgorithm2[HashAlgorithm2["SHA3_384"] = 4] = "SHA3_384";
  HashAlgorithm2[HashAlgorithm2["KMAC128_BLS_BLS12_381"] = 5] = "KMAC128_BLS_BLS12_381";
  return HashAlgorithm2;
}({});
var TransactionExecutionStatus = function(TransactionExecutionStatus2) {
  TransactionExecutionStatus2[TransactionExecutionStatus2["UNKNOWN"] = 0] = "UNKNOWN";
  TransactionExecutionStatus2[TransactionExecutionStatus2["PENDING"] = 1] = "PENDING";
  TransactionExecutionStatus2[TransactionExecutionStatus2["FINALIZED"] = 2] = "FINALIZED";
  TransactionExecutionStatus2[TransactionExecutionStatus2["EXECUTED"] = 3] = "EXECUTED";
  TransactionExecutionStatus2[TransactionExecutionStatus2["SEALED"] = 4] = "SEALED";
  TransactionExecutionStatus2[TransactionExecutionStatus2["EXPIRED"] = 5] = "EXPIRED";
  return TransactionExecutionStatus2;
}({});

// node_modules/@onflow/util-actor/dist/actor.module.js
var mailbox = () => {
  const queue = [];
  let next;
  return {
    async deliver(msg) {
      queue.push(msg);
      if (next) {
        next(queue.shift());
        next = void 0;
      }
    },
    receive() {
      return new Promise(function innerReceive(resolve2) {
        const msg = queue.shift();
        if (msg)
          return resolve2(msg);
        next = resolve2;
      });
    }
  };
};
var promise;
var _queueMicrotask = (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
  throw err;
}, 0));
var INIT = "INIT";
var SUBSCRIBE = "SUBSCRIBE";
var UNSUBSCRIBE = "UNSUBSCRIBE";
var UPDATED = "UPDATED";
var SNAPSHOT = "SNAPSHOT";
var EXIT = "EXIT";
var TERMINATE = "TERMINATE";
var root = typeof self === "object" && self.self === self && self || typeof global === "object" && global.global === global && global || typeof window === "object" && window.window === window && window || {
  FCL_REGISTRY: null
};
root.FCL_REGISTRY = root.FCL_REGISTRY == null ? {} : root.FCL_REGISTRY;
var FCL_REGISTRY = root.FCL_REGISTRY;
var pid = 0;
var DEFAULT_TIMEOUT = 5e3;
function send(addr, tag, data) {
  let opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
    expectReply: false
  };
  return new Promise((resolve2, reject) => {
    const expectReply = opts.expectReply || false;
    const timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT;
    if (expectReply && timeout) {
      setTimeout(() => reject(new Error(`Timeout: ${timeout}ms passed without a response.`)), timeout);
    }
    const payload = {
      to: addr,
      from: opts.from,
      tag,
      data,
      timeout,
      reply: resolve2,
      reject
    };
    try {
      if (FCL_REGISTRY[addr]) {
        FCL_REGISTRY[addr].mailbox.deliver(payload);
      }
      if (!expectReply) {
        resolve2(true);
      }
    } catch (error) {
      console.error("FCL.Actor -- Could Not Deliver Message", payload, FCL_REGISTRY[addr], error);
      reject(error);
    }
  });
}
var kill = (addr) => {
  delete FCL_REGISTRY[addr];
};
var fromHandlers = (handlers) => async (ctx) => {
  var _a2;
  if (typeof handlers[INIT] === "function")
    await handlers[INIT](ctx);
  __loop:
    while (1) {
      const letter = await ctx.receive();
      try {
        if (letter.tag === EXIT) {
          if (typeof handlers[TERMINATE] === "function") {
            await handlers[TERMINATE](ctx, letter, letter.data || {});
          }
          break __loop;
        }
        await ((_a2 = handlers[letter.tag]) == null ? void 0 : _a2.call(handlers, ctx, letter, letter.data || {}));
      } catch (error) {
        console.error(`${ctx.self()} Error`, letter, error);
      } finally {
        continue __loop;
      }
    }
};
var parseAddr = (addr) => {
  if (addr == null) {
    while (FCL_REGISTRY[String(pid)]) {
      pid++;
    }
    return String(pid);
  }
  return String(addr);
};
var spawn = function(fnOrHandlers) {
  let rawAddr = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
  const addr = parseAddr(rawAddr);
  if (FCL_REGISTRY[addr] != null)
    return addr;
  FCL_REGISTRY[addr] = {
    addr,
    mailbox: mailbox(),
    subs: /* @__PURE__ */ new Set(),
    kvs: {},
    error: null
  };
  const ctx = createCtx(addr);
  let fn3;
  if (typeof fnOrHandlers === "object")
    fn3 = fromHandlers(fnOrHandlers);
  else
    fn3 = fnOrHandlers;
  _queueMicrotask(async () => {
    await fn3(ctx);
    kill(addr);
  });
  return addr;
};
var createCtx = (addr) => ({
  self: () => addr,
  receive: () => FCL_REGISTRY[addr].mailbox.receive(),
  send: function(to4, tag, data) {
    let opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    if (to4 == null)
      return;
    opts.from = addr;
    return send(to4, tag, data, opts);
  },
  sendSelf: function(tag, data) {
    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (FCL_REGISTRY[addr])
      send(addr, tag, data, opts);
  },
  broadcast: function(tag, data) {
    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    opts.from = addr;
    for (const to4 of FCL_REGISTRY[addr].subs)
      send(to4, tag, data, opts);
  },
  subscribe: (sub) => sub != null && FCL_REGISTRY[addr].subs.add(sub),
  unsubscribe: (sub) => sub != null && FCL_REGISTRY[addr].subs.delete(sub),
  subscriberCount: () => FCL_REGISTRY[addr].subs.size,
  hasSubs: () => !!FCL_REGISTRY[addr].subs.size,
  put: (key, value) => {
    if (key != null)
      FCL_REGISTRY[addr].kvs[key] = value;
  },
  get: function(key) {
    let fallback2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
    const value = FCL_REGISTRY[addr].kvs[key];
    return value == null ? fallback2 : value;
  },
  delete: (key) => {
    delete FCL_REGISTRY[addr].kvs[key];
  },
  update: (key, fn3) => {
    if (key != null)
      FCL_REGISTRY[addr].kvs[key] = fn3(FCL_REGISTRY[addr].kvs[key]);
  },
  keys: () => {
    return Object.keys(FCL_REGISTRY[addr].kvs);
  },
  all: () => {
    return FCL_REGISTRY[addr].kvs;
  },
  where: (pattern) => {
    return Object.keys(FCL_REGISTRY[addr].kvs).reduce((acc, key) => {
      return pattern.test(key) ? {
        ...acc,
        [key]: FCL_REGISTRY[addr].kvs[key]
      } : acc;
    }, {});
  },
  merge: function() {
    let data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    Object.keys(data).forEach((key) => FCL_REGISTRY[addr].kvs[key] = data[key]);
  },
  fatalError: (error) => {
    FCL_REGISTRY[addr].error = error;
    for (const to4 of FCL_REGISTRY[addr].subs)
      send(to4, UPDATED);
  }
});
function subscriber(address, spawnFn, callback) {
  spawnFn(address);
  const self2 = spawn(async (ctx) => {
    ctx.send(address, SUBSCRIBE);
    while (1) {
      const letter = await ctx.receive();
      const error = FCL_REGISTRY[address].error;
      if (letter.tag === EXIT) {
        ctx.send(address, UNSUBSCRIBE);
        return;
      }
      if (error) {
        callback(null, error);
        ctx.send(address, UNSUBSCRIBE);
        return;
      }
      callback(letter.data, null);
    }
  });
  return () => send(self2, EXIT);
}
function snapshoter(address, spawnFn) {
  spawnFn(address);
  return send(address, SNAPSHOT, null, {
    expectReply: true,
    timeout: 0
  });
}

// node_modules/@onflow/config/dist/config.module.js
var pipe = function() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  return (v11) => {
    return funcs.reduce((res, func) => {
      return func(res);
    }, v11);
  };
};
var mergePipe = function() {
  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    funcs[_key2] = arguments[_key2];
  }
  return (v11) => {
    return funcs.reduce((res, func) => {
      return {
        ...res,
        ...func(v11)
      };
    }, {});
  };
};
var isObject = (value) => value && typeof value === "object" && !Array.isArray(value);
var mergeDeep = function(target) {
  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    sources[_key3 - 1] = arguments[_key3];
  }
  if (!sources.length)
    return target;
  const source = sources.shift();
  if (isObject(target) && isObject(source)) {
    for (const key in source) {
      if (isObject(source[key])) {
        if (!target[key])
          Object.assign(target, {
            [key]: {}
          });
        mergeDeep(target[key], source[key]);
      } else {
        Object.assign(target, {
          [key]: source[key]
        });
      }
    }
  }
  return mergeDeep(target, ...sources);
};
var mergeFlowJSONs = (value) => Array.isArray(value) ? mergeDeep({}, ...value) : value;
var filterContracts = (obj) => obj.contracts ? obj.contracts : {};
var filterDependencies = (obj) => obj.dependencies ? obj.dependencies : {};
var mapContractAliasesToNetworkAddress = (network) => (contracts) => {
  return Object.entries(contracts).reduce((c8, _ref) => {
    var _a2;
    let [key, value] = _ref;
    const networkContractAlias = (_a2 = value == null ? void 0 : value.aliases) == null ? void 0 : _a2[network];
    if (networkContractAlias) {
      c8[key] = networkContractAlias;
    }
    return c8;
  }, {});
};
var mapDependencyAliasesToNetworkAddress = (network) => (dependencies) => {
  return Object.entries(dependencies).reduce((c8, _ref2) => {
    var _a2;
    let [key, value] = _ref2;
    const networkDependencyAlias = (_a2 = value == null ? void 0 : value.aliases) == null ? void 0 : _a2[network];
    if (networkDependencyAlias) {
      c8[key] = networkDependencyAlias;
    }
    return c8;
  }, {});
};
var mapDeploymentsToNetworkAddress = (network) => (_ref3) => {
  let {
    deployments = {},
    accounts = {}
  } = _ref3;
  const networkDeployment = deployments == null ? void 0 : deployments[network];
  if (!networkDeployment)
    return {};
  return Object.entries(networkDeployment).reduce((c8, _ref4) => {
    var _a2;
    let [key, value] = _ref4;
    const accountAddress = (_a2 = accounts[key]) == null ? void 0 : _a2.address;
    if (!accountAddress)
      return c8;
    return value.reduce((c9, contract) => {
      return {
        ...c9,
        [contract]: accountAddress
      };
    }, {});
  }, {});
};
var getContracts = (jsons, network) => {
  return pipe(mergeFlowJSONs, mergePipe(mapDeploymentsToNetworkAddress(network), pipe(filterContracts, mapContractAliasesToNetworkAddress(network)), pipe(filterDependencies, mapDependencyAliasesToNetworkAddress(network))))(jsons);
};
var isHexidecimal = (str) => {
  if (typeof str !== "string")
    return false;
  return /^[0-9A-Fa-f]+$/.test(str);
};
var hasPrivateKeys = (flowJSON) => {
  return Object.entries((flowJSON == null ? void 0 : flowJSON.accounts) ?? []).reduce((hasPrivateKey, _ref5) => {
    let [, value] = _ref5;
    if (hasPrivateKey)
      return true;
    return value && Object.prototype.hasOwnProperty.call(value, "key") && isHexidecimal(value == null ? void 0 : value.key);
  }, false);
};
var anyHasPrivateKeys = (value) => {
  if (Array.isArray(value))
    return value.some(hasPrivateKeys);
  return hasPrivateKeys(value);
};
var cleanNetwork = (network) => {
  const cleanedNetwork = (network == null ? void 0 : network.toLowerCase()) === "local" ? "emulator" : network == null ? void 0 : network.toLowerCase();
  if (cleanedNetwork === "emulator" || cleanedNetwork === "testnet" || cleanedNetwork === "mainnet" || cleanedNetwork === "previewnet")
    return cleanedNetwork;
  throw new Error(`Invalid network "${network}". Must be one of "emulator", "local", "testnet", or "mainnet"`);
};
setConfig(config2);
var NAME = "config";
var PUT = "PUT_CONFIG";
var GET = "GET_CONFIG";
var GET_ALL = "GET_ALL_CONFIG";
var UPDATE = "UPDATE_CONFIG";
var DELETE = "DELETE_CONFIG";
var CLEAR = "CLEAR_CONFIG";
var WHERE = "WHERE_CONFIG";
var UPDATED2 = "CONFIG/UPDATED";
var identity = (v11) => v11;
var HANDLERS = {
  [PUT]: (ctx, _letter, _ref) => {
    let {
      key,
      value
    } = _ref;
    if (key == null)
      throw new Error("Missing 'key' for config/put.");
    ctx.put(key, value);
    ctx.broadcast(UPDATED2, {
      ...ctx.all()
    });
  },
  [GET]: (ctx, letter, _ref2) => {
    let {
      key,
      fallback: fallback2
    } = _ref2;
    if (key == null)
      throw new Error("Missing 'key' for config/get");
    letter.reply(ctx.get(key, fallback2));
  },
  [GET_ALL]: (ctx, letter) => {
    letter.reply({
      ...ctx.all()
    });
  },
  [UPDATE]: (ctx, letter, _ref3) => {
    let {
      key,
      fn: fn3
    } = _ref3;
    if (key == null)
      throw new Error("Missing 'key' for config/update");
    ctx.update(key, fn3 || identity);
    ctx.broadcast(UPDATED2, {
      ...ctx.all()
    });
  },
  [DELETE]: (ctx, letter, _ref4) => {
    let {
      key
    } = _ref4;
    if (key == null)
      throw new Error("Missing 'key' for config/delete");
    ctx.delete(key);
    ctx.broadcast(UPDATED2, {
      ...ctx.all()
    });
  },
  [CLEAR]: (ctx) => {
    const keys2 = Object.keys(ctx.all());
    for (const key of keys2)
      ctx.delete(key);
    ctx.broadcast(UPDATED2, {
      ...ctx.all()
    });
  },
  [WHERE]: (ctx, letter, _ref5) => {
    let {
      pattern
    } = _ref5;
    if (pattern == null)
      throw new Error("Missing 'pattern' for config/where");
    letter.reply(ctx.where(pattern));
  },
  [SUBSCRIBE]: (ctx, letter) => {
    ctx.subscribe(letter.from);
    ctx.send(letter.from, UPDATED2, {
      ...ctx.all()
    });
  },
  [UNSUBSCRIBE]: (ctx, letter) => {
    ctx.unsubscribe(letter.from);
  }
};
spawn(HANDLERS, NAME);
function put(key, value) {
  send(NAME, PUT, {
    key,
    value
  });
  return config2();
}
function get(key, fallback2) {
  return send(NAME, GET, {
    key,
    fallback: fallback2
  }, {
    expectReply: true,
    timeout: 10
  });
}
async function first() {
  let wants = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  let fallback2 = arguments.length > 1 ? arguments[1] : void 0;
  if (!wants.length)
    return fallback2;
  const [head, ...rest] = wants;
  const ret = await get(head);
  if (ret == null)
    return first(rest, fallback2);
  return ret;
}
function all() {
  return send(NAME, GET_ALL, null, {
    expectReply: true,
    timeout: 10
  });
}
function update(key) {
  let fn3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : identity;
  send(NAME, UPDATE, {
    key,
    fn: fn3
  });
  return config2();
}
function _delete(key) {
  send(NAME, DELETE, {
    key
  });
  return config2();
}
function where(pattern) {
  return send(NAME, WHERE, {
    pattern
  }, {
    expectReply: true,
    timeout: 10
  });
}
function subscribe(callback) {
  return subscriber(NAME, () => spawn(HANDLERS, NAME), callback);
}
async function clearConfig() {
  await send(NAME, CLEAR);
}
async function resetConfig(oldConfig) {
  return clearConfig().then(() => config2(oldConfig));
}
async function load(data) {
  let {
    ignoreConflicts = false
  } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const network = await get("flow.network");
  const cleanedNetwork = cleanNetwork(network);
  const {
    flowJSON
  } = data;
  invariant(Boolean(flowJSON), "config.load -- 'flowJSON' must be defined");
  invariant(!!cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define "flow.network" to "emulator", "local", "testnet", or "mainnet" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);
  if (anyHasPrivateKeys(flowJSON)) {
    const isEmulator = cleanedNetwork === "emulator";
    log({
      title: "Private Keys Detected",
      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,
      level: isEmulator ? LEVELS.warn : LEVELS.error
    });
    invariant(isEmulator, `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`);
  }
  for (const [key, value] of Object.entries(getContracts(flowJSON, cleanedNetwork))) {
    const contractConfigKey = `0x${key}`;
    const existingContractConfigKey = await get(contractConfigKey);
    if (existingContractConfigKey && existingContractConfigKey !== value && !ignoreConflicts) {
      log({
        title: "Contract Placeholder Conflict Detected",
        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,
        level: LEVELS.warn
      });
    } else {
      put(contractConfigKey, value);
    }
    const systemContractConfigKey = `system.contracts.${key}`;
    const systemExistingContractConfigKeyValue = await get(systemContractConfigKey);
    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value && !ignoreConflicts) {
      log({
        title: "Contract Placeholder Conflict Detected",
        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,
        level: LEVELS.warn
      });
    } else {
      put(systemContractConfigKey, value);
    }
  }
}
function config2(values) {
  if (values != null && typeof values === "object") {
    Object.keys(values).map((d8) => put(d8, values[d8]));
  }
  return {
    put,
    get,
    all,
    first,
    update,
    delete: _delete,
    where,
    subscribe,
    overload,
    load
  };
}
config2.put = put;
config2.get = get;
config2.all = all;
config2.first = first;
config2.update = update;
config2.delete = _delete;
config2.where = where;
config2.subscribe = subscribe;
config2.overload = overload;
config2.load = load;
async function overload(values, callback) {
  const oldConfig = await all();
  try {
    config2(values);
    const result = await callback(await all());
    return result;
  } finally {
    await resetConfig(oldConfig);
  }
}

// node_modules/@onflow/rlp/dist/rlp.module.js
var import_buffer = __toESM(require_buffer());
var import_buffer2 = __toESM(require_buffer());
function encode(input) {
  if (Array.isArray(input)) {
    const output = [];
    for (let i6 = 0; i6 < input.length; i6++) {
      output.push(encode(input[i6]));
    }
    const buf = import_buffer.Buffer.concat(output);
    return import_buffer.Buffer.concat([encodeLength(buf.length, 192), buf]);
  } else {
    const inputBuf = toBuffer(input);
    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : import_buffer.Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
  }
}
function encodeLength(len, offset) {
  if (len < 56) {
    return import_buffer.Buffer.from([len + offset]);
  } else {
    const hexLength = intToHex(len);
    const lLength = hexLength.length / 2;
    const firstByte = intToHex(offset + 55 + lLength);
    return import_buffer.Buffer.from(firstByte + hexLength, "hex");
  }
}
function isHexPrefixed(str) {
  return str.slice(0, 2) === "0x";
}
function stripHexPrefix(str) {
  if (typeof str !== "string") {
    return str;
  }
  return isHexPrefixed(str) ? str.slice(2) : str;
}
function intToHex(integer) {
  if (integer < 0) {
    throw new Error("Invalid integer as argument, must be unsigned!");
  }
  const hex2 = integer.toString(16);
  return hex2.length % 2 ? "0" + hex2 : hex2;
}
function padToEven(a4) {
  return a4.length % 2 ? "0" + a4 : a4;
}
function intToBuffer(integer) {
  const hex2 = intToHex(integer);
  return import_buffer.Buffer.from(hex2, "hex");
}
function toBuffer(v11) {
  if (!import_buffer.Buffer.isBuffer(v11)) {
    if (typeof v11 === "string") {
      if (isHexPrefixed(v11)) {
        return import_buffer.Buffer.from(padToEven(stripHexPrefix(v11)), "hex");
      } else {
        return import_buffer.Buffer.from(v11);
      }
    } else if (typeof v11 === "number") {
      if (!v11) {
        return import_buffer.Buffer.from([]);
      } else {
        return intToBuffer(v11);
      }
    } else if (v11 === null || v11 === void 0) {
      return import_buffer.Buffer.from([]);
    } else if (v11 instanceof Uint8Array) {
      return import_buffer.Buffer.from(v11);
    } else {
      throw new Error("invalid type");
    }
  }
  return v11;
}

// node_modules/@onflow/util-address/dist/util-address.module.js
function sansPrefix(address) {
  if (address == null)
    return null;
  return address.replace(/^0x/, "").replace(/^Fx/, "");
}
function withPrefix2(address) {
  if (address == null)
    return null;
  return "0x" + sansPrefix(address);
}
function display(address) {
  return withPrefix2(address);
}

// node_modules/@onflow/sdk/dist/sdk.module.js
var import_events2 = __toESM(require_events());

// node_modules/@onflow/transport-http/dist/index.module.js
var import_cross_fetch = __toESM(require_browser_ponyfill());
var import_events = __toESM(require_events());

// node_modules/isomorphic-ws/browser.js
var ws = null;
if (typeof WebSocket !== "undefined") {
  ws = WebSocket;
} else if (typeof MozWebSocket !== "undefined") {
  ws = MozWebSocket;
} else if (typeof global !== "undefined") {
  ws = global.WebSocket || global.MozWebSocket;
} else if (typeof window !== "undefined") {
  ws = window.WebSocket || window.MozWebSocket;
} else if (typeof self !== "undefined") {
  ws = self.WebSocket || self.MozWebSocket;
}
var browser_default = ws;

// node_modules/@onflow/transport-http/dist/index.module.js
var import_buffer3 = __toESM(require_buffer());
function safeParseJSON(data) {
  try {
    return JSON.parse(data);
  } catch {
    return null;
  }
}
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}
var AbortController2 = globalThis.AbortController || require_browser();
var HTTPRequestError = class extends Error {
  constructor(_ref) {
    let {
      error,
      hostname,
      path,
      method,
      requestBody,
      responseBody,
      responseStatusText,
      statusCode
    } = _ref;
    const msg = `
      HTTP Request Error: An error occurred when interacting with the Access API.
      ${error ? `error=${error}` : ""}
      ${hostname ? `hostname=${hostname}` : ""}
      ${path ? `path=${path}` : ""}
      ${method ? `method=${method}` : ""}
      ${requestBody ? `requestBody=${requestBody}` : ""}
      ${responseBody ? `responseBody=${responseBody}` : ""}
      ${responseStatusText ? `responseStatusText=${responseStatusText}` : ""}
      ${statusCode ? `statusCode=${statusCode}` : ""}
    `;
    super(msg);
    this.name = "HTTP Request Error";
    this.statusCode = statusCode;
    this.errorMessage = error;
  }
};
async function httpRequest(_ref2) {
  let {
    hostname,
    path,
    method,
    body,
    headers,
    retryLimit = 5,
    retryIntervalMs = 1e3,
    timeoutLimit = 3e4,
    enableRequestLogging = true
  } = _ref2;
  const bodyJSON = body ? JSON.stringify(body) : null;
  function makeRequest() {
    const controller = new AbortController2();
    const fetchTimeout = setTimeout(() => {
      controller.abort();
    }, timeoutLimit);
    return (0, import_cross_fetch.default)(combineURLs(hostname, path).toString(), {
      method,
      body: bodyJSON,
      headers,
      signal: controller.signal
    }).then(async (res) => {
      if (res.ok) {
        return res.json();
      }
      const responseText = await res.text().catch(() => null);
      const response2 = safeParseJSON(responseText);
      throw new HTTPRequestError({
        error: response2 == null ? void 0 : response2.message,
        hostname,
        path,
        method,
        requestBody: bodyJSON,
        responseBody: responseText,
        responseStatusText: res.statusText,
        statusCode: res.status
      });
    }).catch(async (e3) => {
      if (e3 instanceof HTTPRequestError) {
        throw e3;
      }
      if (e3.name === "AbortError") {
        throw e3;
      }
      if (enableRequestLogging) {
        await log({
          title: "Access Node Error",
          message: `The provided access node ${hostname} does not appear to be a valid REST/HTTP access node.
  Please verify that you are not unintentionally using a GRPC access node.
  See more here: https://docs.onflow.org/fcl/reference/sdk-guidelines/#connect`,
          level: LEVELS.error
        });
      }
      throw new HTTPRequestError({
        error: e3 == null ? void 0 : e3.message,
        hostname,
        path,
        method,
        requestBody: bodyJSON
      });
    }).finally(() => {
      clearTimeout(fetchTimeout);
    });
  }
  async function requestLoop() {
    let retryAttempt = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    try {
      const resp = await makeRequest();
      return resp;
    } catch (error) {
      const retryStatusCodes = [408, 429, 500, 502, 503, 504];
      if (error.name === "AbortError" || retryStatusCodes.includes(error.statusCode)) {
        return await new Promise((resolve2, reject) => {
          if (retryAttempt < retryLimit) {
            if (enableRequestLogging) {
              console.warn(`Access node unavailable, retrying in ${retryIntervalMs} ms...`);
            }
            setTimeout(() => {
              resolve2(requestLoop(retryAttempt + 1));
            }, retryIntervalMs);
          } else {
            reject(error);
          }
        });
      } else {
        throw error;
      }
    }
  }
  return await requestLoop();
}
async function sendExecuteScriptAtBlockIDRequest(ix, context, opts) {
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/scripts?block_id=${ix.block.id}`,
    method: "POST",
    body: {
      script: context.Buffer.from(ix.message.cadence).toString("base64"),
      arguments: ix.message.arguments.map((arg2) => context.Buffer.from(JSON.stringify(ix.arguments[arg2].asArgument)).toString("base64"))
    }
  });
  return constructResponse$5(ix, context, res);
}
async function sendExecuteScriptAtBlockHeightRequest(ix, context, opts) {
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/scripts?block_height=${ix.block.height}`,
    method: "POST",
    body: {
      script: context.Buffer.from(ix.message.cadence).toString("base64"),
      arguments: ix.message.arguments.map((arg2) => context.Buffer.from(JSON.stringify(ix.arguments[arg2].asArgument)).toString("base64"))
    }
  });
  return constructResponse$5(ix, context, res);
}
async function sendExecuteScriptAtLatestBlockRequest(ix, context, opts) {
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/scripts?block_height=${ix.block.isSealed ? "sealed" : "final"}`,
    method: "POST",
    body: {
      script: context.Buffer.from(ix.message.cadence).toString("base64"),
      arguments: ix.message.arguments.map((arg2) => context.Buffer.from(JSON.stringify(ix.arguments[arg2].asArgument)).toString("base64"))
    }
  });
  return constructResponse$5(ix, context, res);
}
function constructResponse$5(ix, context, res) {
  let ret = context.response();
  ret.tag = ix.tag;
  ret.encodedData = JSON.parse(context.Buffer.from(res, "base64").toString());
  return ret;
}
async function sendExecuteScript(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Execute Script Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Execute Script Error: context.response must be defined.`);
  invariant(context.Buffer, `SDK Send Execute Script Error: context.Buffer must be defined.`);
  ix = await ix;
  if (ix.block.id) {
    return await sendExecuteScriptAtBlockIDRequest(ix, context, opts);
  } else if (ix.block.height) {
    return await sendExecuteScriptAtBlockHeightRequest(ix, context, opts);
  } else {
    return await sendExecuteScriptAtLatestBlockRequest(ix, context, opts);
  }
}
var HashAlgorithmIDs = {
  SHA2_256: 1,
  SHA2_384: 2,
  SHA3_256: 3,
  SHA3_384: 4,
  KMAC128_BLS_BLS12_381: 5
};
var SignatureAlgorithmIDs = {
  ECDSA_P256: 1,
  ECDSA_secp256k1: 2,
  BLS_BLS12_381: 3
};
async function sendGetAccountAtBlockHeightRequest(ix, context, opts) {
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/accounts/${ix.account.addr}?block_height=${ix.block.height}&expand=contracts,keys`,
    method: "GET",
    body: null
  });
  return constructResponse$4(ix, context, res);
}
async function sendGetAccountAtLatestBlockRequest(ix, context, opts) {
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/accounts/${ix.account.addr}?block_height=${ix.block.isSealed ? "sealed" : "final"}&expand=contracts,keys`,
    method: "GET",
    body: null
  });
  return constructResponse$4(ix, context, res);
}
function constructResponse$4(ix, context, res) {
  var _a2;
  let ret = context.response();
  ret.tag = ix.tag;
  const unwrapContracts = (contracts) => {
    const c8 = {};
    if (!contracts)
      return c8;
    for (let key of Object.keys(contracts)) {
      c8[key] = context.Buffer.from(contracts[key], "base64").toString();
    }
    return c8;
  };
  ret.account = {
    address: res.address,
    balance: Number(res.balance),
    code: "",
    contracts: unwrapContracts(res.contracts),
    keys: ((_a2 = res.keys) == null ? void 0 : _a2.map((key) => ({
      index: Number(key.index),
      publicKey: key.public_key.replace(/^0x/, ""),
      signAlgo: SignatureAlgorithmIDs[key.signing_algorithm],
      signAlgoString: key.signing_algorithm,
      hashAlgo: HashAlgorithmIDs[key.hashing_algorithm],
      hashAlgoString: key.hashing_algorithm,
      sequenceNumber: Number(key.sequence_number),
      weight: Number(key.weight),
      revoked: key.revoked
    }))) ?? []
  };
  return ret;
}
async function sendGetAccount(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Get Account Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Get Account Error: context.response must be defined.`);
  invariant(context.Buffer, `SDK Send Get Account Error: context.Buffer must be defined.`);
  ix = await ix;
  if (ix.block.height !== null) {
    return await sendGetAccountAtBlockHeightRequest(ix, context, opts);
  } else {
    return await sendGetAccountAtLatestBlockRequest(ix, context, opts);
  }
}
async function sendGetBlockHeaderByIDRequest(ix, context, opts) {
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/blocks/${ix.block.id}`,
    method: "GET",
    body: null
  });
  return constructResponse$3(ix, context, res);
}
async function sendGetBlockHeaderByHeightRequest(ix, context, opts) {
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/blocks?height=${ix.block.height}`,
    method: "GET",
    body: null
  });
  return constructResponse$3(ix, context, res);
}
async function sendGetLatestBlockHeaderRequest(ix, context, opts) {
  var _a2;
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const height = ((_a2 = ix.block) == null ? void 0 : _a2.isSealed) ? "sealed" : "final";
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/blocks?height=${height}`,
    method: "GET",
    body: null
  });
  return constructResponse$3(ix, context, res);
}
function constructResponse$3(ix, context, res) {
  const block2 = res.length ? res[0] : null;
  const ret = context.response();
  ret.tag = ix.tag;
  ret.blockHeader = {
    id: block2.header.id,
    parentId: block2.header.parent_id,
    height: Number(block2.header.height),
    timestamp: block2.header.timestamp
  };
  return ret;
}
async function sendGetBlockHeader(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Get Block Header Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Get Block Header Error: context.response must be defined.`);
  ix = await ix;
  const interactionHasBlockID = ix.block.id !== null;
  const interactionHasBlockHeight = ix.block.height !== null;
  if (interactionHasBlockID) {
    return await sendGetBlockHeaderByIDRequest(ix, context, opts);
  } else if (interactionHasBlockHeight) {
    return await sendGetBlockHeaderByHeightRequest(ix, context, opts);
  } else {
    return await sendGetLatestBlockHeaderRequest(ix, context, opts);
  }
}
async function sendGetBlockByIDRequest(ix, context, opts) {
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/blocks/${ix.block.id}?expand=payload`,
    method: "GET",
    body: null
  });
  return constructResponse$2(ix, context, res);
}
async function sendGetBlockByHeightRequest(ix, context, opts) {
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/blocks?height=${ix.block.height}&expand=payload`,
    method: "GET",
    body: null
  });
  return constructResponse$2(ix, context, res);
}
async function sendGetBlockRequest(ix, context, opts) {
  var _a2;
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const height = ((_a2 = ix.block) == null ? void 0 : _a2.isSealed) ? "sealed" : "final";
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/blocks?height=${height}&expand=payload`,
    method: "GET",
    body: null
  });
  return constructResponse$2(ix, context, res);
}
function constructResponse$2(ix, context, res) {
  const block2 = res.length ? res[0] : null;
  const ret = context.response();
  ret.tag = ix.tag;
  ret.block = {
    id: block2.header.id,
    parentId: block2.header.parent_id,
    height: Number(block2.header.height),
    timestamp: block2.header.timestamp,
    parentVoterSignature: block2.header.parent_voter_signature,
    collectionGuarantees: block2.payload.collection_guarantees.map((collectionGuarantee) => ({
      collectionId: collectionGuarantee.collection_id,
      signerIds: collectionGuarantee.signer_ids
    })),
    blockSeals: block2.payload.block_seals.map((blockSeal) => ({
      blockId: blockSeal.block_id,
      executionReceiptId: blockSeal.result_id
    }))
  };
  return ret;
}
async function sendGetBlock(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Get Block Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Get Block Error: context.response must be defined.`);
  ix = await ix;
  const interactionHasBlockID = ix.block.id !== null;
  const interactionHasBlockHeight = ix.block.height !== null;
  if (interactionHasBlockID) {
    return await sendGetBlockByIDRequest(ix, context, opts);
  } else if (interactionHasBlockHeight) {
    return await sendGetBlockByHeightRequest(ix, context, opts);
  } else {
    return await sendGetBlockRequest(ix, context, opts);
  }
}
async function sendGetCollection(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Get Collection Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Get Collection Error: context.response must be defined.`);
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/collections/${ix.collection.id}?expand=transactions`,
    method: "GET",
    body: null
  });
  const ret = context.response();
  ret.tag = ix.tag;
  ret.collection = {
    id: res.id,
    transactionIds: res.transactions.map((transaction3) => transaction3.id)
  };
  return ret;
}
async function sendGetEventsForHeightRangeRequest(ix, context, opts) {
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/events?type=${ix.events.eventType}&start_height=${ix.events.start}&end_height=${ix.events.end}`,
    method: "GET",
    body: null
  });
  return constructResponse$1(ix, context, res);
}
async function sendGetEventsForBlockIDsRequest(ix, context, opts) {
  const httpRequest$1 = opts.httpRequest || httpRequest;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/events?type=${ix.events.eventType}&block_ids=${ix.events.blockIds.join(",")}`,
    method: "GET",
    body: null
  });
  return constructResponse$1(ix, context, res);
}
function constructResponse$1(ix, context, res) {
  let ret = context.response();
  ret.tag = ix.tag;
  ret.events = [];
  res.forEach((block2) => block2.events ? block2.events.forEach((event) => ret.events.push({
    blockId: block2.block_id,
    blockHeight: Number(block2.block_height),
    blockTimestamp: block2.block_timestamp,
    type: event.type,
    transactionId: event.transaction_id,
    transactionIndex: Number(event.transaction_index),
    eventIndex: Number(event.event_index),
    payload: JSON.parse(context.Buffer.from(event.payload, "base64").toString())
  })) : null);
  return ret;
}
async function sendGetEvents(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Get Events Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Get Events Error: context.response must be defined.`);
  invariant(context.Buffer, `SDK Send Get Events Error: context.Buffer must be defined.`);
  ix = await ix;
  const interactionContainsBlockHeightRange = ix.events.start !== null;
  const interactionContainsBlockIDsList = Array.isArray(ix.events.blockIds) && ix.events.blockIds.length > 0;
  invariant(interactionContainsBlockHeightRange || interactionContainsBlockIDsList, "SendGetEventsError: Unable to determine which get events request to send. Either a block height range, or block IDs must be specified.");
  if (interactionContainsBlockHeightRange) {
    return await sendGetEventsForHeightRangeRequest(ix, context, opts);
  } else {
    return await sendGetEventsForBlockIDsRequest(ix, context, opts);
  }
}
async function sendGetTransaction(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Get Transaction Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Get Transaction Error: context.response must be defined.`);
  invariant(context.Buffer, `SDK Send Get Transaction Error: context.Buffer must be defined.`);
  const httpRequest$1 = opts.httpRequest || httpRequest;
  ix = await ix;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/transactions/${ix.transaction.id}`,
    method: "GET",
    body: null
  });
  const unwrapKey = (key) => ({
    address: key.address,
    keyId: Number(key.key_index),
    sequenceNumber: Number(key.sequence_number)
  });
  const unwrapSignature = (sig2) => ({
    address: sig2.address,
    keyId: Number(sig2.key_index),
    signature: sig2.signature
  });
  const unwrapArg = (arg2) => JSON.parse(context.Buffer.from(arg2, "base64").toString());
  let ret = context.response();
  ret.tag = ix.tag;
  ret.transaction = {
    script: context.Buffer.from(res.script, "base64").toString(),
    args: [...res.arguments.map(unwrapArg)],
    referenceBlockId: res.reference_block_id,
    gasLimit: Number(res.gas_limit),
    payer: res.payer,
    proposalKey: res.proposal_key ? unwrapKey(res.proposal_key) : res.proposal_key,
    authorizers: res.authorizers,
    payloadSignatures: [...res.payload_signatures.map(unwrapSignature)],
    envelopeSignatures: [...res.envelope_signatures.map(unwrapSignature)]
  };
  return ret;
}
var STATUS_MAP$1 = {
  UNKNOWN: 0,
  PENDING: 1,
  FINALIZED: 2,
  EXECUTED: 3,
  SEALED: 4,
  EXPIRED: 5
};
async function sendGetTransactionStatus(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Get Transaction Status Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Get Transaction Status Error: context.response must be defined.`);
  invariant(context.Buffer, `SDK Send Get Transaction Status Error: context.Buffer must be defined.`);
  const httpRequest$1 = opts.httpRequest || httpRequest;
  ix = await ix;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/transaction_results/${ix.transaction.id}`,
    method: "GET",
    body: null
  });
  let ret = context.response();
  ret.tag = ix.tag;
  ret.transactionStatus = {
    blockId: res.block_id,
    status: STATUS_MAP$1[res.status.toUpperCase()] || "",
    statusString: res.status.toUpperCase(),
    statusCode: res.status_code,
    errorMessage: res.error_message,
    events: res.events.map((event) => ({
      type: event.type,
      transactionId: event.transaction_id,
      transactionIndex: Number(event.transaction_index),
      eventIndex: Number(event.event_index),
      payload: JSON.parse(context.Buffer.from(event.payload, "base64").toString())
    }))
  };
  return ret;
}
async function sendPing(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(Boolean(opts.node), `SDK Send Ping Error: opts.node must be defined.`);
  invariant(Boolean(context.response), `SDK Send Ping Error: context.response must be defined.`);
  const httpRequest$1 = opts.httpRequest || httpRequest;
  await httpRequest$1({
    hostname: opts.node,
    path: "/v1/blocks?height=sealed",
    method: "GET",
    body: null
  });
  let ret = typeof (context == null ? void 0 : context.response) === "function" ? context.response() : {};
  ret.tag = ix.tag;
  return ret;
}
var idof = (acct) => `${withPrefix(acct.addr)}-${acct.keyId}`;
async function sendTransaction(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Transaction Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Transaction Error: context.response must be defined.`);
  invariant(context.Buffer, `SDK Send Transaction Error: context.Buffer must be defined.`);
  const httpRequest$1 = opts.httpRequest || httpRequest;
  ix = await ix;
  let payloadSignatures = [];
  for (let acct of Object.values(ix.accounts)) {
    try {
      if (!acct.role.payer && acct.signature != null) {
        const signature = {
          address: sansPrefix(acct.addr),
          key_index: String(acct.keyId),
          signature: context.Buffer.from(acct.signature, "hex").toString("base64")
        };
        if (!payloadSignatures.find((existingSignature) => existingSignature.address === signature.address && existingSignature.key_index === signature.key_index && existingSignature.signature === signature.signature)) {
          payloadSignatures.push(signature);
        }
      }
    } catch (error) {
      console.error("SDK HTTP Send Error: Trouble applying payload signature", {
        acct,
        ix
      });
      throw error;
    }
  }
  let envelopeSignatures = {};
  for (let acct of Object.values(ix.accounts)) {
    try {
      if (acct.role.payer && acct.signature != null) {
        let id2 = acct.tempId || idof(acct);
        envelopeSignatures[id2] = envelopeSignatures[id2] || {
          address: sansPrefix(acct.addr),
          key_index: String(acct.keyId),
          signature: context.Buffer.from(acct.signature, "hex").toString("base64")
        };
      }
    } catch (error) {
      console.error("SDK HTTP Send Error: Trouble applying envelope signature", {
        acct,
        ix
      });
      throw error;
    }
  }
  envelopeSignatures = Object.values(envelopeSignatures);
  var t1 = Date.now();
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/transactions`,
    method: "POST",
    body: {
      script: context.Buffer.from(ix.message.cadence).toString("base64"),
      arguments: [...ix.message.arguments.map((arg2) => context.Buffer.from(JSON.stringify(ix.arguments[arg2].asArgument)).toString("base64"))],
      reference_block_id: ix.message.refBlock ? ix.message.refBlock : null,
      gas_limit: String(ix.message.computeLimit),
      payer: sansPrefix(ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr),
      proposal_key: {
        address: sansPrefix(ix.accounts[ix.proposer].addr),
        key_index: String(ix.accounts[ix.proposer].keyId),
        sequence_number: String(ix.accounts[ix.proposer].sequenceNum)
      },
      authorizers: ix.authorizations.map((tempId) => ix.accounts[tempId].addr).reduce((prev, current) => {
        return prev.find((item) => item === current) ? prev : [...prev, current];
      }, []).map(sansPrefix),
      payload_signatures: payloadSignatures,
      envelope_signatures: envelopeSignatures
    }
  });
  var t2 = Date.now();
  let ret = context.response();
  ret.tag = ix.tag;
  ret.transactionId = res.id;
  if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") {
    window.dispatchEvent(new CustomEvent("FLOW::TX", {
      detail: {
        txId: ret.transactionId,
        delta: t2 - t1
      }
    }));
  }
  return ret;
}
async function sendGetNetworkParameters(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Get Network Parameters Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Get Network Parameters Error: context.response must be defined.`);
  const httpRequest$1 = opts.httpRequest || httpRequest;
  ix = await ix;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/network/parameters`,
    method: "GET",
    body: null,
    enableRequestLogging: opts.enableRequestLogging ?? true
  });
  let ret = context.response();
  ret.tag = ix.tag;
  ret.networkParameters = {
    chainId: res.chain_id
  };
  return ret;
}
async function sendGetNodeVersionInfo(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Get Node Version Info Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Get Node Verison Info Error: context.response must be defined.`);
  const httpRequest$1 = opts.httpRequest || httpRequest;
  ix = await ix;
  const res = await httpRequest$1({
    hostname: opts.node,
    path: `/v1/node_version_info`,
    method: "GET"
  });
  let ret = context.response();
  ret.tag = ix.tag;
  ret.nodeVersionInfo = {
    semver: res.semver,
    commit: res.commit,
    sporkId: res.spork_id,
    protocolVersion: parseInt(res.protocol_version),
    sporkRootBlockHeight: parseInt(res.spork_root_block_height),
    nodeRootBlockHeight: parseInt(res.node_root_block_height)
  };
  return ret;
}
var WebSocket2 = browser_default;
var WebsocketError = class extends Error {
  constructor(_ref) {
    let {
      code: code2,
      reason,
      message,
      wasClean
    } = _ref;
    const msg = `
      connectWs: connection closed with error${message ? `: ${message}` : ""}
      ${code2 ? `code: ${code2}` : ""}
      ${reason ? `reason: ${reason}` : ""}
      ${wasClean ? `wasClean: ${wasClean}` : ""}
    `;
    super(msg);
    this.name = "WebsocketError";
    this.code = code2;
    this.reason = reason;
    this.wasClean = false;
  }
};
function connectWs(_ref2) {
  let {
    hostname,
    path,
    params: params2,
    getParams,
    retryLimit = 5,
    retryIntervalMs = 1e3
  } = _ref2;
  if (getParams && params2) {
    throw new Error("connectWs: cannot specify both params and getParams");
  }
  let outputEmitter = new import_events.EventEmitter();
  let retryCount = 0;
  const resolveParams = getParams || (() => params2);
  let close2 = () => {
  };
  (function connect() {
    let userClosed = false;
    let hasOpened = false;
    const url = buildConnectionUrl(hostname, path, resolveParams());
    const ws4 = new WebSocket2(url);
    ws4.onmessage = function(e3) {
      const data = safeParseJSON(e3.data);
      if (data) {
        outputEmitter.emit("data", data);
      } else {
        outputEmitter.emit("error", new WebsocketError({
          message: "invalid JSON data"
        }));
        this.close();
      }
    };
    ws4.onclose = function(e3) {
      if (userClosed) {
        outputEmitter.emit("close");
        outputEmitter.removeAllListeners();
        return;
      }
      if (!hasOpened) {
        if (retryCount < retryLimit) {
          retryCount++;
          setTimeout(connect, retryIntervalMs);
        } else {
          outputEmitter.emit("error", new WebsocketError({
            wasClean: e3.wasClean,
            code: e3.code,
            reason: e3.reason,
            message: "failed to connect"
          }));
          setTimeout(() => {
            outputEmitter.emit("close");
            outputEmitter.removeAllListeners();
          });
        }
      } else {
        setTimeout(connect, retryIntervalMs);
      }
    };
    ws4.onopen = function() {
      hasOpened = true;
      retryCount = 0;
    };
    close2 = () => {
      userClosed = true;
      ws4.close();
    };
  })();
  return {
    on(event, listener) {
      outputEmitter.on(event, listener);
      return this;
    },
    off(event, listener) {
      outputEmitter.off(event, listener);
      return this;
    },
    close() {
      close2();
    }
  };
}
function buildConnectionUrl(hostname, path, params2) {
  const url = new URL(path || "", hostname);
  if (url.protocol === "https:") {
    url.protocol = "wss:";
  } else if (url.protocol === "http:") {
    url.protocol = "ws:";
  }
  Object.entries(params2 || {}).forEach((_ref3) => {
    let [key, value] = _ref3;
    if (value) {
      let formattedValue;
      if (Array.isArray(value)) {
        formattedValue = value.join(",");
      } else {
        formattedValue = value.toString();
      }
      url.searchParams.append(key, formattedValue);
    }
  });
  return url.toString();
}
function constructData(ix, context, data) {
  var _a2;
  const response2 = context.response();
  response2.tag = ix.tag;
  response2.events = ((_a2 = data.Events) == null ? void 0 : _a2.length) > 0 ? data.Events.map((event) => ({
    blockId: data.BlockID,
    blockHeight: Number(data.Height),
    blockTimestamp: data.BlockTimestamp,
    type: event.Type,
    transactionId: event.TransactionID,
    transactionIndex: Number(event.TransactionIndex),
    eventIndex: Number(event.EventIndex),
    payload: JSON.parse(context.Buffer.from(event.Payload, "base64").toString())
  })) : null;
  response2.heartbeat = {
    blockId: data.BlockID,
    blockHeight: Number(data.Height),
    blockTimestamp: data.BlockTimestamp
  };
  return response2;
}
function constructResponse(ix, context, stream) {
  const response2 = context.response();
  response2.tag = ix.tag;
  response2.streamConnection = stream;
  return response2;
}
async function connectSubscribeEvents(ix) {
  let context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(opts.node, `SDK Send Get Events Error: opts.node must be defined.`);
  invariant(context.response, `SDK Send Get Events Error: context.response must be defined.`);
  invariant(context.Buffer, `SDK Send Get Events Error: context.Buffer must be defined.`);
  const resolvedIx = await ix;
  const connectWs$1 = opts.connectWs || connectWs;
  const outputEmitter = new import_events.EventEmitter();
  let lastBlockHeight = null;
  const connection = connectWs$1({
    hostname: opts.node,
    path: `/v1/subscribe_events`,
    getParams: () => {
      var _a2, _b, _c2, _d, _e4, _f2;
      const params2 = {
        event_types: (_a2 = resolvedIx.subscribeEvents) == null ? void 0 : _a2.eventTypes,
        addresses: (_b = resolvedIx.subscribeEvents) == null ? void 0 : _b.addresses,
        contracts: (_c2 = resolvedIx.subscribeEvents) == null ? void 0 : _c2.contracts,
        heartbeat_interval: (_d = resolvedIx.subscribeEvents) == null ? void 0 : _d.heartbeatInterval
      };
      if (lastBlockHeight) {
        params2.start_height = lastBlockHeight + 1;
      } else {
        params2.start_block_id = (_e4 = resolvedIx.subscribeEvents) == null ? void 0 : _e4.startBlockId;
        params2.start_height = (_f2 = resolvedIx.subscribeEvents) == null ? void 0 : _f2.startHeight;
      }
      return params2;
    }
  });
  connection.on("data", (data) => {
    const responseData = constructData(resolvedIx, context, data);
    lastBlockHeight = responseData.heartbeat.blockHeight;
    outputEmitter.emit("data", responseData);
  });
  connection.on("error", (error) => {
    outputEmitter.emit("error", error);
  });
  connection.on("close", () => {
    outputEmitter.emit("close");
  });
  const responseStream = {
    on(event, listener) {
      outputEmitter.on(event, listener);
      return this;
    },
    off(event, listener) {
      outputEmitter.off(event, listener);
      return this;
    },
    close() {
      connection.close();
    }
  };
  return constructResponse(resolvedIx, context, responseStream);
}
var send2 = async function(ix, context) {
  var _a2, _b, _c2, _d;
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant(Boolean(opts == null ? void 0 : opts.node), `SDK Send Error: Either opts.node or "accessNode.api" in config must be defined.`);
  invariant(Boolean(context.ix), `SDK Send Error: context.ix must be defined.`);
  ix = await ix;
  switch (true) {
    case context.ix.isTransaction(ix):
      return opts.sendTransaction ? opts.sendTransaction(ix, context, opts) : sendTransaction(ix, context, opts);
    case context.ix.isGetTransactionStatus(ix):
      return opts.sendGetTransactionStatus ? opts.sendGetTransactionStatus(ix, context, opts) : sendGetTransactionStatus(ix, context, opts);
    case context.ix.isGetTransaction(ix):
      return opts.sendGetTransaction ? opts.sendGetTransaction(ix, context, opts) : sendGetTransaction(ix, context, opts);
    case context.ix.isScript(ix):
      return opts.sendExecuteScript ? opts.sendExecuteScript(ix, context, opts) : sendExecuteScript(ix, context, opts);
    case context.ix.isGetAccount(ix):
      return opts.sendGetAccount ? opts.sendGetAccount(ix, context, opts) : sendGetAccount(ix, context, opts);
    case context.ix.isGetEvents(ix):
      return opts.sendGetEvents ? opts.sendGetEvents(ix, context, opts) : sendGetEvents(ix, context, opts);
    case ((_b = (_a2 = context.ix).isSubscribeEvents) == null ? void 0 : _b.call(_a2, ix)):
      return opts.connectSubscribeEvents ? opts.connectSubscribeEvents(ix, context, opts) : connectSubscribeEvents(ix, context, opts);
    case context.ix.isGetBlock(ix):
      return opts.sendGetBlock ? opts.sendGetBlock(ix, context, opts) : sendGetBlock(ix, context, opts);
    case context.ix.isGetBlockHeader(ix):
      return opts.sendGetBlockHeader ? opts.sendGetBlockHeader(ix, context, opts) : sendGetBlockHeader(ix, context, opts);
    case context.ix.isGetCollection(ix):
      return opts.sendGetCollection ? opts.sendGetCollection(ix, context, opts) : sendGetCollection(ix, context, opts);
    case context.ix.isPing(ix):
      return opts.sendPing ? opts.sendPing(ix, context, opts) : sendPing(ix, context, opts);
    case context.ix.isGetNetworkParameters(ix):
      return opts.sendGetNetworkParameters ? opts.sendGetNetworkParameters(ix, context, opts) : sendGetNetworkParameters(ix, context, opts);
    case ((_d = (_c2 = context.ix).isGetNodeVersionInfo) == null ? void 0 : _d.call(_c2, ix)):
      return opts.sendGetNodeVersionInfo ? opts.sendGetNodeVersionInfo(ix, context, opts) : sendGetNodeVersionInfo(ix, context, opts);
    default:
      return ix;
  }
};
var Action = function(Action2) {
  Action2["LIST_SUBSCRIPTIONS"] = "list_subscriptions";
  Action2["SUBSCRIBE"] = "subscribe";
  Action2["UNSUBSCRIBE"] = "unsubscribe";
  return Action2;
}({});
var SocketError = class _SocketError extends Error {
  constructor(code2, message) {
    super(message);
    this.name = "SocketError";
    this.code = code2;
  }
  static fromMessage(error) {
    return new _SocketError(error.code, error.message);
  }
};
var WS_OPEN = 1;
var SubscriptionManager = class {
  constructor(handlers, config3) {
    __publicField(this, "counter", 0);
    __publicField(this, "socket", null);
    __publicField(this, "subscriptions", []);
    __publicField(this, "reconnectAttempts", 0);
    __publicField(this, "connectPromise", null);
    __publicField(this, "closeConnection", null);
    this.config = {
      ...config3,
      reconnectOptions: {
        initialReconnectDelay: 500,
        reconnectAttempts: 5,
        maxReconnectDelay: 5e3,
        ...config3.reconnectOptions
      }
    };
    this.handlers = handlers;
  }
  subscribe(opts) {
    const idPromise = this._subscribe(opts);
    return {
      unsubscribe: () => {
        idPromise.then((id2) => id2 && this.unsubscribe(id2));
      }
    };
  }
  async _subscribe(opts) {
    const topicHandler = this.getHandler(opts.topic);
    const subscriber2 = topicHandler.createSubscriber(opts.args, opts.onData, opts.onError);
    let sub = null;
    try {
      await this.connect();
      sub = {
        id: String(this.counter++),
        topic: opts.topic,
        subscriber: subscriber2
      };
      this.subscriptions.push(sub);
      const response2 = await this.sendSubscribe(sub);
      if (response2.error) {
        throw new Error(`Failed to subscribe to topic ${sub.topic}`, {
          cause: SocketError.fromMessage(response2.error)
        });
      }
    } catch (e3) {
      subscriber2.onError(e3 instanceof Error ? e3 : new Error(String(e3)));
      if (sub)
        this.unsubscribe(sub.id);
      return null;
    }
    return sub.id;
  }
  unsubscribe(id2) {
    var _a2;
    const sub = this.subscriptions.find((sub2) => sub2.id === id2);
    if (!sub)
      return;
    this.subscriptions = this.subscriptions.filter((sub2) => sub2.id !== id2);
    if (this.subscriptions.length === 0) {
      (_a2 = this.closeConnection) == null ? void 0 : _a2.call(this);
      return;
    }
    this.sendUnsubscribe(sub).catch((e3) => {
      console.error(`Error while unsubscribing from topic: ${e3}`);
    });
  }
  // Lazy connect to the socket when the first subscription is made
  async connect() {
    if (this.connectPromise) {
      return this.connectPromise;
    }
    this.connectPromise = new Promise((resolve2, reject) => {
      var _a2;
      if (((_a2 = this.socket) == null ? void 0 : _a2.readyState) === WS_OPEN) {
        resolve2();
        return;
      }
      this.socket = new WebSocket2(this.config.node);
      const onMessage = (event) => {
        const message = JSON.parse(event.data);
        if ("action" in message && message.error) {
          const sub2 = this.subscriptions.find((sub3) => sub3.id === message.subscription_id);
          if (sub2) {
            sub2.subscriber.onError(new Error(`Failed to subscribe to topic ${sub2.topic}: ${message.error.message}`));
            this.subscriptions = this.subscriptions.filter((sub3) => sub3.id !== message.subscription_id);
          }
          return;
        }
        const sub = this.subscriptions.find((sub2) => sub2.id === message.subscription_id);
        if (sub) {
          if (!("action" in message) && message.subscription_id === sub.id) {
            sub.subscriber.onData(message.payload);
          }
        }
      };
      const onClose = () => {
        this.handleSocketError(new Error("WebSocket closed")).then(() => {
          resolve2();
        }).catch((e3) => {
          reject(e3);
        });
      };
      const onOpen = () => {
        resolve2();
      };
      this.socket.addEventListener("message", onMessage);
      this.socket.addEventListener("close", onClose);
      this.socket.addEventListener("open", onOpen);
      this.closeConnection = () => {
        var _a3, _b, _c2, _d;
        (_a3 = this.socket) == null ? void 0 : _a3.removeEventListener("message", onMessage);
        (_b = this.socket) == null ? void 0 : _b.removeEventListener("close", onClose);
        (_c2 = this.socket) == null ? void 0 : _c2.removeEventListener("open", onOpen);
        (_d = this.socket) == null ? void 0 : _d.close();
        this.socket = null;
        this.closeConnection = null;
        this.connectPromise = null;
      };
    });
    return this.connectPromise;
  }
  async handleSocketError(error) {
    var _a2;
    (_a2 = this.closeConnection) == null ? void 0 : _a2.call(this);
    if (++this.reconnectAttempts >= this.config.reconnectOptions.reconnectAttempts) {
      log({
        level: LEVELS.error,
        title: "WebSocket Error",
        message: `Failed to reconnect to the server after ${this.reconnectAttempts + 1} attempts: ${error}`
      });
      this.subscriptions.forEach((sub) => {
        sub.subscriber.onError(new Error(`Failed to reconnect to the server after ${this.reconnectAttempts + 1} attempts: ${error}`));
      });
      this.subscriptions = [];
      this.reconnectAttempts = 0;
      throw error;
    } else {
      log({
        level: LEVELS.warn,
        title: "WebSocket Error",
        message: `WebSocket error, reconnecting in ${this.backoffInterval}ms: ${error}`
      });
      await new Promise((resolve2) => setTimeout(resolve2, this.backoffInterval));
      await this.connect();
      await Promise.all(this.subscriptions.map(async (sub) => {
        await this.sendSubscribe(sub).catch((e3) => {
          sub.subscriber.onError(new Error(`Failed to restore subscription: ${e3}`));
          this.subscriptions = this.subscriptions.filter((s4) => s4.id !== sub.id);
        });
      }));
      this.reconnectAttempts = 0;
    }
  }
  async sendSubscribe(sub) {
    const request2 = {
      action: Action.SUBSCRIBE,
      topic: sub.topic,
      arguments: sub.subscriber.getConnectionArgs(),
      subscription_id: String(sub.id)
    };
    const response2 = await this.request(request2);
    if (response2.error) {
      throw new Error(`Failed to subscribe to topic ${sub.topic}`, {
        cause: SocketError.fromMessage(response2.error)
      });
    }
    return response2;
  }
  async sendUnsubscribe(sub) {
    var _a2;
    const request2 = {
      action: Action.UNSUBSCRIBE,
      subscription_id: sub.id
    };
    (_a2 = this.socket) == null ? void 0 : _a2.send(JSON.stringify(request2));
    const response2 = await this.request(request2);
    if (response2.error) {
      throw new Error(`Failed to unsubscribe from topic ${sub.topic}`, {
        cause: SocketError.fromMessage(response2.error)
      });
    }
    return response2;
  }
  async request(request2) {
    let cleanup = () => {
    };
    return await new Promise((resolve2, reject) => {
      if (!this.socket) {
        reject(new Error("WebSocket is not connected"));
        return;
      }
      cleanup = () => {
        var _a2, _b, _c2;
        (_a2 = this.socket) == null ? void 0 : _a2.removeEventListener("error", onError);
        (_b = this.socket) == null ? void 0 : _b.removeEventListener("message", onMessage);
        (_c2 = this.socket) == null ? void 0 : _c2.removeEventListener("close", onClose);
      };
      this.socket.addEventListener("error", onError);
      this.socket.addEventListener("message", onMessage);
      this.socket.addEventListener("close", onClose);
      this.socket.send(JSON.stringify(request2));
      function onError(e3) {
        reject(new Error(`WebSocket error: ${e3}`));
      }
      function onClose() {
        reject(new Error("WebSocket closed"));
      }
      function onMessage(event) {
        const data = JSON.parse(event.data);
        if (data.subscription_id === request2.subscription_id) {
          resolve2(data);
        }
      }
    }).finally(() => {
      cleanup();
    });
  }
  getHandler(topic) {
    const handler = this.handlers.find((handler2) => handler2.topic === topic);
    if (!handler) {
      throw new Error(`No handler found for topic ${topic}`);
    }
    return handler;
  }
  /**
   * Calculate the backoff interval for reconnection attempts
   * @returns The backoff interval in milliseconds
   */
  get backoffInterval() {
    return Math.min(this.config.reconnectOptions.maxReconnectDelay, this.config.reconnectOptions.initialReconnectDelay * 2 ** this.reconnectAttempts);
  }
};
function createSubscriptionHandler(handler) {
  return handler;
}
var blocksHandler = createSubscriptionHandler({
  topic: SubscriptionTopic.BLOCKS,
  createSubscriber: (initialArgs, onData, onError) => {
    let resumeArgs = {
      ...initialArgs
    };
    return {
      onData(data) {
        const parsedData = {
          block: {
            id: data.header.id,
            parentId: data.header.parent_id,
            height: Number(data.header.height),
            timestamp: data.header.timestamp,
            parentVoterSignature: data.header.parent_voter_signature,
            collectionGuarantees: data.payload.collection_guarantees.map((guarantee) => ({
              collectionId: guarantee.collection_id,
              signerIds: guarantee.signer_indices
            })),
            blockSeals: data.payload.block_seals.map((seal) => ({
              blockId: seal.block_id,
              executionReceiptId: seal.result_id
            }))
          }
        };
        resumeArgs = {
          blockStatus: resumeArgs.blockStatus,
          startBlockHeight: Number(BigInt(data.header.height) + BigInt(1))
        };
        onData(parsedData);
      },
      onError(error) {
        onError(error);
      },
      getConnectionArgs() {
        let encodedArgs = {
          block_status: resumeArgs.blockStatus
        };
        if ("startBlockHeight" in resumeArgs && resumeArgs.startBlockHeight) {
          return {
            ...encodedArgs,
            start_block_height: String(resumeArgs.startBlockHeight)
          };
        }
        if ("startBlockId" in resumeArgs && resumeArgs.startBlockId) {
          return {
            ...encodedArgs,
            start_block_id: resumeArgs.startBlockId
          };
        }
        return encodedArgs;
      }
    };
  }
});
var blockHeadersHandler = createSubscriptionHandler({
  topic: SubscriptionTopic.BLOCK_HEADERS,
  createSubscriber: (initialArgs, onData, onError) => {
    let resumeArgs = {
      ...initialArgs
    };
    return {
      onData(data) {
        const parsedData = {
          blockHeader: {
            id: data.id,
            parentId: data.parent_id,
            height: Number(data.height),
            timestamp: data.timestamp,
            parentVoterSignature: data.parent_voter_signature
          }
        };
        resumeArgs = {
          blockStatus: resumeArgs.blockStatus,
          startBlockHeight: Number(BigInt(data.height) + BigInt(1))
        };
        onData(parsedData);
      },
      onError(error) {
        onError(error);
      },
      getConnectionArgs() {
        let encodedArgs = {
          block_status: resumeArgs.blockStatus
        };
        if ("startBlockHeight" in resumeArgs && resumeArgs.startBlockHeight) {
          return {
            ...encodedArgs,
            start_block_height: resumeArgs.startBlockHeight
          };
        }
        if ("startBlockId" in resumeArgs && resumeArgs.startBlockId) {
          return {
            ...encodedArgs,
            start_block_id: resumeArgs.startBlockId
          };
        }
        return encodedArgs;
      }
    };
  }
});
var blockDigestsHandler = createSubscriptionHandler({
  topic: SubscriptionTopic.BLOCK_DIGESTS,
  createSubscriber: (initialArgs, onData, onError) => {
    let resumeArgs = {
      ...initialArgs
    };
    return {
      onData(data) {
        const parsedData = {
          blockDigest: {
            id: data.block_id,
            height: Number(data.height),
            timestamp: data.timestamp
          }
        };
        resumeArgs = {
          blockStatus: resumeArgs.blockStatus,
          startBlockId: String(BigInt(data.height) + BigInt(1))
        };
        onData(parsedData);
      },
      onError(error) {
        onError(error);
      },
      getConnectionArgs() {
        let encodedArgs = {
          block_status: resumeArgs.blockStatus
        };
        if ("startBlockHeight" in resumeArgs && resumeArgs.startBlockHeight) {
          return {
            ...encodedArgs,
            start_block_height: resumeArgs.startBlockHeight
          };
        }
        if ("startBlockId" in resumeArgs && resumeArgs.startBlockId) {
          return {
            ...encodedArgs,
            start_block_id: resumeArgs.startBlockId
          };
        }
        return encodedArgs;
      }
    };
  }
});
var accountStatusesHandler = createSubscriptionHandler({
  topic: SubscriptionTopic.ACCOUNT_STATUSES,
  createSubscriber: (initialArgs, onData, onError) => {
    let resumeArgs = {
      ...initialArgs
    };
    return {
      onData(rawData) {
        const data = [];
        for (const [address, events2] of Object.entries(rawData.account_events)) {
          for (const event of events2) {
            const parsedData = {
              accountStatusEvent: {
                accountAddress: address,
                blockId: rawData.block_id,
                blockHeight: Number(rawData.height),
                type: event.type,
                transactionId: event.transaction_id,
                transactionIndex: Number(event.transaction_index),
                eventIndex: Number(event.event_index),
                payload: JSON.parse(Buffer.from(event.payload, "base64").toString())
              }
            };
            data.push(parsedData);
          }
          data.sort((a4, b5) => {
            const txIndexDiff = a4.accountStatusEvent.transactionIndex - b5.accountStatusEvent.transactionIndex;
            if (txIndexDiff !== 0)
              return txIndexDiff;
            return a4.accountStatusEvent.eventIndex - b5.accountStatusEvent.eventIndex;
          });
          for (const message of data) {
            onData(message);
          }
          resumeArgs = {
            ...resumeArgs,
            startBlockHeight: Number(BigInt(rawData.height) + BigInt(1)),
            startBlockId: void 0
          };
        }
      },
      onError(error) {
        onError(error);
      },
      getConnectionArgs() {
        let encodedArgs = {
          event_types: resumeArgs.eventTypes,
          addresses: resumeArgs.addresses,
          account_addresses: resumeArgs.accountAddresses
        };
        if ("startBlockHeight" in resumeArgs && resumeArgs.startBlockHeight) {
          return {
            ...encodedArgs,
            start_block_height: resumeArgs.startBlockHeight
          };
        }
        if ("startBlockId" in resumeArgs && resumeArgs.startBlockId) {
          return {
            ...encodedArgs,
            start_block_id: resumeArgs.startBlockId
          };
        }
        return encodedArgs;
      }
    };
  }
});
var STATUS_MAP = {
  UNKNOWN: 0,
  PENDING: 1,
  FINALIZED: 2,
  EXECUTED: 3,
  SEALED: 4,
  EXPIRED: 5
};
var transactionStatusesHandler = createSubscriptionHandler({
  topic: SubscriptionTopic.TRANSACTION_STATUSES,
  createSubscriber: (initialArgs, onData, onError) => {
    let resumeArgs = {
      ...initialArgs
    };
    return {
      onData(data) {
        const parsedData = {
          transactionStatus: {
            blockId: data.transaction_result.block_id,
            status: STATUS_MAP[data.transaction_result.status.toUpperCase()],
            statusString: data.transaction_result.status.toUpperCase(),
            statusCode: data.transaction_result.status_code,
            errorMessage: data.transaction_result.error_message,
            events: data.transaction_result.events.map((event) => ({
              type: event.type,
              transactionId: event.transaction_id,
              transactionIndex: Number(event.transaction_index),
              eventIndex: Number(event.event_index),
              payload: JSON.parse(import_buffer3.Buffer.from(event.payload, "base64").toString())
            }))
          }
        };
        onData(parsedData);
      },
      onError(error) {
        onError(error);
      },
      getConnectionArgs() {
        return {
          tx_id: resumeArgs.transactionId
        };
      }
    };
  }
});
var eventsHandler = createSubscriptionHandler({
  topic: SubscriptionTopic.EVENTS,
  createSubscriber: (initialArgs, onData, onError) => {
    let resumeArgs = {
      ...initialArgs
    };
    return {
      onData(rawData) {
        for (const event of rawData.events) {
          const result = {
            event: {
              blockId: rawData.block_id,
              blockHeight: Number(rawData.block_height),
              blockTimestamp: rawData.block_timestamp,
              type: event.type,
              transactionId: event.transaction_id,
              transactionIndex: Number(event.transaction_index),
              eventIndex: Number(event.event_index),
              payload: JSON.parse(Buffer.from(event.payload, "base64").toString())
            }
          };
          onData(result);
        }
        resumeArgs = {
          ...resumeArgs,
          startHeight: Number(BigInt(rawData.block_height) + BigInt(1)),
          startBlockId: void 0
        };
      },
      onError(error) {
        onError(error);
      },
      getConnectionArgs() {
        let encodedArgs = {
          event_types: resumeArgs.eventTypes,
          addresses: resumeArgs.addresses,
          contracts: resumeArgs.contracts
        };
        if ("startBlockHeight" in resumeArgs && resumeArgs.startBlockHeight) {
          return {
            ...encodedArgs,
            start_block_height: resumeArgs.startBlockHeight
          };
        }
        if ("startBlockId" in resumeArgs && resumeArgs.startBlockId) {
          return {
            ...encodedArgs,
            start_block_id: resumeArgs.startBlockId
          };
        }
        return encodedArgs;
      }
    };
  }
});
var SUBSCRIPTION_HANDLERS = [blocksHandler, blockHeadersHandler, blockDigestsHandler, accountStatusesHandler, transactionStatusesHandler, eventsHandler];
var subscriptionManagerMap = /* @__PURE__ */ new Map();
function subscribe2(_ref, opts) {
  let {
    topic,
    args: args2,
    onData,
    onError
  } = _ref;
  const node = getWsUrl(opts.node);
  const manager = subscriptionManagerMap.get(node) || new SubscriptionManager(SUBSCRIPTION_HANDLERS, {
    node
  });
  subscriptionManagerMap.set(node, manager);
  return manager.subscribe({
    topic,
    args: args2,
    onData,
    onError
  });
}
function getWsUrl(node) {
  const url = new URL(combineURLs(node, "/v1/ws"));
  if (url.protocol === "https:") {
    url.protocol = "wss:";
  } else if (url.protocol === "http:") {
    url.protocol = "ws:";
  }
  return url.toString();
}
var httpTransport = {
  send: send2,
  subscribe: subscribe2
};

// node_modules/@onflow/sdk/dist/sdk.module.js
var import_sha3 = __toESM(require_sha3());

// node_modules/@onflow/util-template/dist/template.module.js
function interleave() {
  let a4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  let b5 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  let c8 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
  if (!a4.length && !b5.length)
    return c8;
  if (!a4.length)
    return c8;
  if (!b5.length) {
    c8.push(...a4);
    return c8;
  }
  const [aHead, ...aRest] = a4;
  const [bHead, ...bRest] = b5;
  if (aHead !== void 0)
    c8.push(aHead);
  if (bHead !== void 0)
    c8.push(bHead);
  return interleave(aRest, bRest, c8);
}
function recApply(d8) {
  return function(arg1) {
    if (typeof arg1 === "function") {
      log.deprecate({
        pkg: "FCL/SDK",
        subject: "Interopolation of functions into template literals",
        transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params"
      });
      return recApply(d8)(arg1(d8));
    }
    return String(arg1);
  };
}
function template(head) {
  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    rest[_key - 1] = arguments[_key];
  }
  if (typeof head === "string")
    return () => head;
  if (typeof head === "function")
    return head;
  return (x7) => interleave([...head], rest.map(recApply(x7))).join("").trim();
}

// node_modules/@onflow/types/dist/types.module.js
var types_module_exports = {};
__export(types_module_exports, {
  Address: () => Address,
  Array: () => _Array,
  Bool: () => Bool,
  Character: () => Character,
  Dictionary: () => Dictionary,
  Enum: () => Enum,
  Event: () => Event,
  Fix64: () => Fix64,
  Identity: () => Identity,
  InclusiveRange: () => InclusiveRange,
  Int: () => Int,
  Int128: () => Int128,
  Int16: () => Int16,
  Int256: () => Int256,
  Int32: () => Int32,
  Int64: () => Int64,
  Int8: () => Int8,
  Optional: () => Optional,
  Path: () => Path,
  Reference: () => Reference,
  Resource: () => Resource,
  String: () => String2,
  Struct: () => Struct,
  UFix64: () => UFix64,
  UInt: () => UInt,
  UInt128: () => UInt128,
  UInt16: () => UInt16,
  UInt256: () => UInt256,
  UInt32: () => UInt32,
  UInt64: () => UInt64,
  UInt8: () => UInt8,
  Void: () => Void,
  Word128: () => Word128,
  Word16: () => Word16,
  Word256: () => Word256,
  Word32: () => Word32,
  Word64: () => Word64,
  Word8: () => Word8,
  _Array: () => _Array
});
var typedef = (label, asArgument, asInjection) => ({
  label,
  asArgument,
  asInjection: (x7) => {
    log.deprecate({
      pkg: "@onflow/types",
      subject: `Passing in ${label} as value for ${label}`,
      message: `Going forward, use ${label} as value for ${label}.`
    });
    return asInjection(x7);
  }
});
var isArray = (d8) => Array.isArray(d8);
var isObj = (d8) => typeof d8 === "object";
var isNull = (d8) => d8 == null;
var isBoolean = (d8) => typeof d8 === "boolean";
var isNumber = (d8) => typeof d8 === "number";
var isInteger = (d8) => Number.isInteger(d8);
var isString = (d8) => typeof d8 === "string";
var throwTypeError = (msg) => {
  throw new Error("Type Error: " + msg);
};
var numberValuesDeprecationNotice = (type) => {
  log.deprecate({
    pkg: "@onflow/types",
    subject: `Passing in Number as value for ${type}`,
    message: `Going forward, use String as value for ${type}.`,
    transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0002-[U]Int*-and-Word*-as-Number"
  });
};
var identityDeprecationShown = false;
var Identity = {
  label: "Identity",
  asArgument: (v11) => {
    if (!identityDeprecationShown) {
      log.deprecate({
        pkg: "@onflow/types",
        subject: "Identity",
        message: "Identity type is deprecated and will be removed in v2.0.0.  Please remove it from your code."
      });
      identityDeprecationShown = true;
    }
    return v11;
  },
  asInjection: (v11) => v11
};
var UInt = typedef("UInt", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("UInt");
    return {
      type: "UInt",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "UInt",
      value: v11
    };
  }
  return throwTypeError("Expected Positive Integer for type Unsigned Int");
}, (v11) => v11);
var Int = typedef("Int", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Int");
    return {
      type: "Int",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Int",
      value: v11
    };
  }
  return throwTypeError("Expected Integer for type Int");
}, (v11) => v11);
var UInt8 = typedef("UInt8", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("UInt8");
    return {
      type: "UInt8",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "UInt8",
      value: v11
    };
  }
  return throwTypeError("Expected integer for UInt8");
}, (v11) => v11);
var Int8 = typedef("Int8", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Int8");
    return {
      type: "Int8",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Int8",
      value: v11
    };
  }
  return throwTypeError("Expected positive integer for Int8");
}, (v11) => v11);
var UInt16 = typedef("UInt16", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("UInt16");
    return {
      type: "UInt16",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "UInt16",
      value: v11
    };
  }
  return throwTypeError("Expected integer for UInt16");
}, (v11) => v11);
var Int16 = typedef("Int16", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Int16");
    return {
      type: "Int16",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Int16",
      value: v11
    };
  }
  return throwTypeError("Expected positive integer for Int16");
}, (v11) => v11);
var UInt32 = typedef("UInt32", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("UInt32");
    return {
      type: "UInt32",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "UInt32",
      value: v11
    };
  }
  return throwTypeError("Expected integer for UInt32");
}, (v11) => v11);
var Int32 = typedef("Int32", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Int32");
    return {
      type: "Int32",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Int32",
      value: v11
    };
  }
  return throwTypeError("Expected positive integer for Int32");
}, (v11) => v11);
var UInt64 = typedef("UInt64", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("UInt64");
    return {
      type: "UInt64",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "UInt64",
      value: v11
    };
  }
  return throwTypeError("Expected integer for UInt64");
}, (v11) => v11);
var Int64 = typedef("Int64", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Int64");
    return {
      type: "Int64",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Int64",
      value: v11
    };
  }
  return throwTypeError("Expected positive integer for Int64");
}, (v11) => v11);
var UInt128 = typedef("UInt128", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("UInt128");
    return {
      type: "UInt128",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "UInt128",
      value: v11
    };
  }
  return throwTypeError("Expected integer for UInt128");
}, (v11) => v11);
var Int128 = typedef("Int128", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Int128");
    return {
      type: "Int128",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Int128",
      value: v11
    };
  }
  return throwTypeError("Expected positive integer for Int128");
}, (v11) => v11);
var UInt256 = typedef("UInt256", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("UInt256");
    return {
      type: "UInt256",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "UInt256",
      value: v11
    };
  }
  return throwTypeError("Expected integer for UInt256");
}, (v11) => v11);
var Int256 = typedef("Int256", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Int256");
    return {
      type: "Int256",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Int256",
      value: v11
    };
  }
  return throwTypeError("Expected integer for Int256");
}, (v11) => v11);
var Word8 = typedef("Word8", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Word8");
    return {
      type: "Word8",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Word8",
      value: v11
    };
  }
  return throwTypeError("Expected positive number for Word8");
}, (v11) => v11);
var Word16 = typedef("Word16", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Word16");
    return {
      type: "Word16",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Word16",
      value: v11
    };
  }
  return throwTypeError("Expected positive number for Word16");
}, (v11) => v11);
var Word32 = typedef("Word32", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Word32");
    return {
      type: "Word32",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Word32",
      value: v11
    };
  }
  return throwTypeError("Expected positive number for Word32");
}, (v11) => v11);
var Word64 = typedef("Word64", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Word64");
    return {
      type: "Word64",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Word64",
      value: v11
    };
  }
  return throwTypeError("Expected positive number for Word64");
}, (v11) => v11);
var Word128 = typedef("Word128", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Word128");
    return {
      type: "Word128",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Word128",
      value: v11
    };
  }
  return throwTypeError("Expected positive number for Word128");
}, (v11) => v11);
var Word256 = typedef("Word256", (v11) => {
  if (isNumber(v11) && isInteger(v11)) {
    numberValuesDeprecationNotice("Word256");
    return {
      type: "Word256",
      value: v11.toString()
    };
  }
  if (isString(v11)) {
    return {
      type: "Word256",
      value: v11
    };
  }
  return throwTypeError("Expected positive number for Word256");
}, (v11) => v11);
var UFix64AndFix64NumberDeprecationNotice = () => {
  log.deprecate({
    subject: "Passing in Numbers as values for Fix64 and UFix64 types",
    pkg: "@onflow/types",
    transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number"
  });
};
var UFix64 = typedef("UFix64", (v11) => {
  if (isString(v11)) {
    const vParts = v11.split(".");
    if (vParts.length !== 2) {
      return throwTypeError(`Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);
    }
    if (vParts[1].length == 0 || vParts[1].length > 8) {
      return throwTypeError(`Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);
    }
    vParts[1] = vParts[1].padEnd(8, "0");
    v11 = vParts.join(".");
    return {
      type: "UFix64",
      value: v11
    };
  } else if (isNumber(v11)) {
    UFix64AndFix64NumberDeprecationNotice();
    return {
      type: "UFix64",
      value: v11.toString()
    };
  }
  return throwTypeError("Expected String for UFix64");
}, (v11) => v11);
var Fix64 = typedef("Fix64", (v11) => {
  if (isString(v11)) {
    const vParts = v11.split(".");
    if (vParts.length !== 2) {
      return throwTypeError(`Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);
    }
    if (vParts[1].length == 0 || vParts[1].length > 8) {
      return throwTypeError(`Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);
    }
    vParts[1] = vParts[1].padEnd(8, "0");
    v11 = vParts.join(".");
    return {
      type: "Fix64",
      value: v11
    };
  } else if (isNumber(v11)) {
    UFix64AndFix64NumberDeprecationNotice();
    return {
      type: "Fix64",
      value: v11.toString()
    };
  }
  return throwTypeError("Expected String for Fix64");
}, (v11) => v11);
var String2 = typedef("String", (v11) => {
  if (isString(v11))
    return {
      type: "String",
      value: v11
    };
  return throwTypeError("Expected String for type String");
}, (v11) => v11);
var Character = typedef("Character", (v11) => {
  if (isString(v11))
    return {
      type: "Character",
      value: v11
    };
  return throwTypeError("Expected Character for type Character");
}, (v11) => v11);
var Bool = typedef("Bool", (v11) => {
  if (isBoolean(v11))
    return {
      type: "Bool",
      value: v11
    };
  return throwTypeError("Expected Boolean for type Bool");
}, (v11) => v11);
var Address = typedef("Address", (v11) => {
  if (isString(v11))
    return {
      type: "Address",
      value: v11
    };
  return throwTypeError("Expected Address for type Address");
}, (v11) => v11);
var Void = typedef("Void", (v11) => {
  if (!v11 || isNull(v11))
    return {
      type: "Void",
      value: null
    };
  return throwTypeError("Expected Void for type Void");
}, (v11) => v11);
var Optional = (children) => typedef("Optional", (v11) => ({
  type: "Optional",
  value: isNull(v11) ? null : children.asArgument(v11)
}), (v11) => v11);
var Reference = typedef("Reference", (v11) => {
  if (isObj(v11))
    return {
      type: "Reference",
      value: v11
    };
  return throwTypeError("Expected Object for type Reference");
}, (v11) => v11);
var _Array = function() {
  let children = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return typedef("Array", (v11) => {
    return {
      type: "Array",
      value: isArray(children) ? children.map((c8, i6) => c8.asArgument(v11[i6])) : v11.map((x7) => children.asArgument(x7))
    };
  }, (v11) => v11);
};
var Dictionary = function() {
  let children = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return typedef("Dictionary", (v11) => {
    const vIsArray = isArray(v11);
    const childrenIsArray = isArray(children);
    if (isObj(v11))
      return {
        type: "Dictionary",
        value: childrenIsArray && vIsArray ? children.map((c8, i6) => ({
          key: c8.key.asArgument(v11[i6].key),
          value: c8.value.asArgument(v11[i6].value)
        })) : vIsArray && !childrenIsArray ? v11.map((x7) => ({
          key: children.key.asArgument(x7.key),
          value: children.value.asArgument(x7.value)
        })) : !vIsArray && !childrenIsArray ? [{
          key: children.key.asArgument(v11.key),
          value: children.value.asArgument(v11.value)
        }] : throwTypeError("Invalid arguments for Dictionary.")
      };
    return throwTypeError("Expected Object for type Dictionary");
  }, (v11) => v11);
};
var Event = function(id2) {
  let fields = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  return typedef("Event", (v11) => {
    if (isObj(v11))
      return {
        type: "Event",
        value: {
          id: id2,
          fields: isArray(fields) ? fields.map((c8, i6) => ({
            name: v11.fields[i6].name,
            value: c8.value.asArgument(v11.fields[i6].value)
          })) : v11.fields.map((x7) => ({
            name: x7.name,
            value: fields.value.asArgument(x7.value)
          }))
        }
      };
    return throwTypeError("Expected Object for type Event");
  }, (v11) => v11);
};
var Resource = function(id2) {
  let fields = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  return typedef("Resource", (v11) => {
    if (isObj(v11))
      return {
        type: "Resource",
        value: {
          id: id2,
          fields: isArray(fields) ? fields.map((c8, i6) => ({
            name: v11.fields[i6].name,
            value: c8.value.asArgument(v11.fields[i6].value)
          })) : v11.fields.map((x7) => ({
            name: x7.name,
            value: fields.value.asArgument(x7.value)
          }))
        }
      };
    return throwTypeError("Expected Object for type Resource");
  }, (v11) => v11);
};
var Struct = function(id2) {
  let fields = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  return typedef("Struct", (v11) => {
    if (isObj(v11))
      return {
        type: "Struct",
        value: {
          id: id2,
          fields: isArray(fields) ? fields.map((c8, i6) => ({
            name: v11.fields[i6].name,
            value: c8.value.asArgument(v11.fields[i6].value)
          })) : v11.fields.map((x7) => ({
            name: x7.name,
            value: fields.value.asArgument(x7.value)
          }))
        }
      };
    return throwTypeError("Expected Object for type Struct");
  }, (v11) => v11);
};
var Enum = function(id2) {
  let fields = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  return typedef("Enum", (v11) => {
    if (isObj(v11))
      return {
        type: "Enum",
        value: {
          id: id2,
          fields: isArray(fields) ? fields.map((c8, i6) => ({
            name: v11.fields[i6].name,
            value: c8.value.asArgument(v11.fields[i6].value)
          })) : v11.fields.map((x7) => ({
            name: x7.name,
            value: fields.value.asArgument(x7.value)
          }))
        }
      };
    return throwTypeError("Expected Object for type Enum");
  }, (v11) => v11);
};
var Path = typedef("Path", (v11) => {
  if (isObj(v11)) {
    if (!isString(v11.domain)) {
      return throwTypeError(`Expected a string for the Path domain but found ${v11.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);
    }
    if (!(v11.domain === "storage" || v11.domain === "private" || v11.domain === "public")) {
      return throwTypeError(`Expected either "storage", "private" or "public" as the Path domain but found ${v11.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);
    }
    if (!isString(v11.identifier)) {
      return throwTypeError(`Expected a string for the Path identifier but found ${v11.identifier}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);
    }
    return {
      type: "Path",
      value: {
        domain: v11.domain,
        identifier: v11.identifier
      }
    };
  }
  return throwTypeError("Expected Object for type Path");
}, (v11) => v11);
var InclusiveRange = (t2) => typedef("InclusiveRange", (v11) => {
  if (isObj(v11)) {
    const {
      start,
      end,
      step
    } = v11;
    return {
      type: "InclusiveRange",
      value: {
        start: t2.asArgument(start),
        end: t2.asArgument(end),
        step: t2.asArgument(step)
      }
    };
  }
  return throwTypeError("Expected Object for type InclusiveRange");
}, (v11) => v11);

// node_modules/@onflow/sdk/dist/sdk.module.js
var ACCT = `{
  "kind":"${InteractionResolverKind.ACCOUNT}",
  "tempId":null,
  "addr":null,
  "keyId":null,
  "sequenceNum":null,
  "signature":null,
  "signingFunction":null,
  "resolve":null,
  "role": {
    "proposer":false,
    "authorizer":false,
    "payer":false,
    "param":false
  }
}`;
var ARG = `{
  "kind":"${InteractionResolverKind.ARGUMENT}",
  "tempId":null,
  "value":null,
  "asArgument":null,
  "xform":null,
  "resolve": null,
  "resolveArgument": null
}`;
var IX = `{
  "tag":"${InteractionTag.UNKNOWN}",
  "assigns":{},
  "status":"${InteractionStatus.OK}",
  "reason":null,
  "accounts":{},
  "params":{},
  "arguments":{},
  "message": {
    "cadence":null,
    "refBlock":null,
    "computeLimit":null,
    "proposer":null,
    "payer":null,
    "authorizations":[],
    "params":[],
    "arguments":[]
  },
  "proposer":null,
  "authorizations":[],
  "payer":[],
  "events": {
    "eventType":null,
    "start":null,
    "end":null,
    "blockIds":[]
  },
  "subscribeEvents": {
    "startBlockId":null,
    "startHeight":null,
    "eventTypes":null,
    "addresses":null,
    "contracts":null,
    "heartbeatInterval":null
  },
  "transaction": {
    "id":null
  },
  "block": {
    "id":null,
    "height":null,
    "isSealed":null
  },
  "account": {
    "addr":null
  },
  "collection": {
    "id":null
  }
}`;
var KEYS = new Set(Object.keys(JSON.parse(IX)));
var initInteraction = () => JSON.parse(IX);
var interaction = () => {
  log.deprecate({
    pkg: "FCL/SDK",
    message: `The interaction been deprecated from the Flow JS-SDK/FCL. use initInteraction instead`,
    transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0010-deprecate-interaction",
    level: LEVELS.warn
  });
  return initInteraction();
};
var isNumber$1 = (d8) => typeof d8 === "number";
var isArray$1 = (d8) => Array.isArray(d8);
var isObj2 = (d8) => d8 !== null && typeof d8 === "object";
var isNull2 = (d8) => d8 == null;
var isFn$3 = (d8) => typeof d8 === "function";
var isInteraction = (ix) => {
  if (!isObj2(ix) || isNull2(ix) || isNumber$1(ix))
    return false;
  for (let key of KEYS)
    if (!ix.hasOwnProperty(key))
      return false;
  return true;
};
var Ok = (ix) => {
  ix.status = InteractionStatus.OK;
  return ix;
};
var Bad = (ix, reason) => {
  ix.status = InteractionStatus.BAD;
  ix.reason = reason;
  return ix;
};
var makeIx = (wat) => (ix) => {
  ix.tag = wat;
  return Ok(ix);
};
var prepAccountKeyId = (acct) => {
  if (acct.keyId == null)
    return acct;
  invariant(!isNaN(parseInt(acct.keyId.toString())), "account.keyId must be an integer");
  return {
    ...acct,
    keyId: parseInt(acct.keyId.toString())
  };
};
var initAccount = () => JSON.parse(ACCT);
var prepAccount = function(acct) {
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return (ix) => {
    invariant(typeof acct === "function" || typeof acct === "object", "prepAccount must be passed an authorization function or an account object");
    invariant(opts.role != null, "Account must have a role");
    const ACCOUNT = initAccount();
    const role = opts.role;
    const tempId = v4_default();
    let account2 = {
      ...acct
    };
    if (acct.authorization && isFn$3(acct.authorization))
      account2 = {
        resolve: acct.authorization
      };
    if (!acct.authorization && isFn$3(acct))
      account2 = {
        resolve: acct
      };
    const resolve2 = account2.resolve;
    if (resolve2) {
      account2.resolve = function(acct2) {
        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }
        return [resolve2, prepAccountKeyId].reduce(async (d8, fn3) => fn3(await d8, ...rest), acct2);
      };
    }
    account2 = prepAccountKeyId(account2);
    ix.accounts[tempId] = {
      ...ACCOUNT,
      tempId,
      ...account2,
      role: {
        ...ACCOUNT.role,
        ...typeof acct.role === "object" ? acct.role : {},
        ...role ? {
          [role]: true
        } : {}
      }
    };
    if (role === TransactionRole.AUTHORIZER) {
      ix.authorizations.push(tempId);
    } else if (role === TransactionRole.PAYER) {
      ix.payer.push(tempId);
    } else if (role) {
      ix[role] = tempId;
    }
    return ix;
  };
};
var makeArgument = (arg2) => (ix) => {
  let tempId = v4_default();
  ix.message.arguments.push(tempId);
  ix.arguments[tempId] = JSON.parse(ARG);
  ix.arguments[tempId].tempId = tempId;
  ix.arguments[tempId].value = arg2.value;
  ix.arguments[tempId].asArgument = arg2.asArgument;
  ix.arguments[tempId].xform = arg2.xform;
  ix.arguments[tempId].resolve = arg2.resolve;
  ix.arguments[tempId].resolveArgument = isFn$3(arg2.resolveArgument) ? arg2.resolveArgument.bind(arg2) : arg2.resolveArgument;
  return Ok(ix);
};
var makeUnknown = makeIx(InteractionTag.UNKNOWN);
var makeScript = makeIx(InteractionTag.SCRIPT);
var makeTransaction = makeIx(InteractionTag.TRANSACTION);
var makeGetTransactionStatus = makeIx(InteractionTag.GET_TRANSACTION_STATUS);
var makeGetTransaction = makeIx(InteractionTag.GET_TRANSACTION);
var makeGetAccount = makeIx(InteractionTag.GET_ACCOUNT);
var makeGetEvents = makeIx(InteractionTag.GET_EVENTS);
var makePing = makeIx(InteractionTag.PING);
var makeGetBlock = makeIx(InteractionTag.GET_BLOCK);
var makeGetBlockHeader = makeIx(InteractionTag.GET_BLOCK_HEADER);
var makeGetCollection = makeIx(InteractionTag.GET_COLLECTION);
var makeGetNetworkParameters = makeIx(InteractionTag.GET_NETWORK_PARAMETERS);
var makeSubscribeEvents = makeIx(InteractionTag.SUBSCRIBE_EVENTS);
var makeGetNodeVerionInfo = makeIx(InteractionTag.GET_NODE_VERSION_INFO);
var is = (wat) => (ix) => ix.tag === wat;
var isUnknown = is(InteractionTag.UNKNOWN);
var isScript = is(InteractionTag.SCRIPT);
var isTransaction = is(InteractionTag.TRANSACTION);
var isGetTransactionStatus = is(InteractionTag.GET_TRANSACTION_STATUS);
var isGetTransaction = is(InteractionTag.GET_TRANSACTION);
var isGetAccount = is(InteractionTag.GET_ACCOUNT);
var isGetEvents = is(InteractionTag.GET_EVENTS);
var isPing = is(InteractionTag.PING);
var isGetBlock = is(InteractionTag.GET_BLOCK);
var isGetBlockHeader = is(InteractionTag.GET_BLOCK_HEADER);
var isGetCollection = is(InteractionTag.GET_COLLECTION);
var isGetNetworkParameters = is(InteractionTag.GET_NETWORK_PARAMETERS);
var isGetNodeVersionInfo = is(InteractionTag.GET_NODE_VERSION_INFO);
var isSubscribeEvents = is(InteractionTag.SUBSCRIBE_EVENTS);
var isOk = (ix) => ix.status === InteractionStatus.OK;
var isBad = (ix) => ix.status === InteractionStatus.BAD;
var why = (ix) => ix.reason;
var isAccount = (account2) => account2.kind === InteractionResolverKind.ACCOUNT;
var isArgument = (argument) => argument.kind === InteractionResolverKind.ARGUMENT;
var hardMode = (ix) => {
  for (let key of Object.keys(ix)) {
    if (!KEYS.has(key))
      throw new Error(`"${key}" is an invalid root level Interaction property.`);
  }
  return ix;
};
var recPipe = async function(ix) {
  let fns = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  try {
    ix = hardMode(await ix);
    if (isBad(ix))
      throw new Error(`Interaction Error: ${ix.reason}`);
    if (!fns.length)
      return ix;
    const [hd, ...rest] = fns;
    const cur = await hd;
    if (isFn$3(cur))
      return recPipe(cur(ix), rest);
    if (isNull2(cur) || !cur)
      return recPipe(ix, rest);
    if (isInteraction(cur))
      return recPipe(cur, rest);
    throw new Error("Invalid Interaction Composition");
  } catch (e3) {
    throw e3;
  }
};
function pipe2() {
  for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args2[_key2] = arguments[_key2];
  }
  const [arg1, arg2] = args2;
  if (isArray$1(arg1))
    return (d8) => pipe2(d8, arg1);
  const ix = arg1;
  const fns = arg2;
  return recPipe(ix, fns);
}
var identity$1 = function(v11) {
  return v11;
};
var get2 = function(ix, key) {
  let fallback2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
  return ix.assigns[key] == null ? fallback2 : ix.assigns[key];
};
var put2 = (key, value) => (ix) => {
  ix.assigns[key] = value;
  return Ok(ix);
};
var update2 = function(key) {
  let fn3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : identity$1;
  return (ix) => {
    ix.assigns[key] = fn3(ix.assigns[key], ix);
    return Ok(ix);
  };
};
var destroy = (key) => (ix) => {
  delete ix.assigns[key];
  return Ok(ix);
};
var ixModule = Object.freeze({
  __proto__: null,
  Bad,
  Ok,
  destroy,
  get: get2,
  initAccount,
  initInteraction,
  interaction,
  isAccount,
  isArgument,
  isArray: isArray$1,
  isBad,
  isFn: isFn$3,
  isGetAccount,
  isGetBlock,
  isGetBlockHeader,
  isGetCollection,
  isGetEvents,
  isGetNetworkParameters,
  isGetNodeVersionInfo,
  isGetTransaction,
  isGetTransactionStatus,
  isInteraction,
  isNull: isNull2,
  isNumber: isNumber$1,
  isObj: isObj2,
  isOk,
  isPing,
  isScript,
  isSubscribeEvents,
  isTransaction,
  isUnknown,
  makeArgument,
  makeGetAccount,
  makeGetBlock,
  makeGetBlockHeader,
  makeGetCollection,
  makeGetEvents,
  makeGetNetworkParameters,
  makeGetNodeVerionInfo,
  makeGetTransaction,
  makeGetTransactionStatus,
  makePing,
  makeScript,
  makeSubscribeEvents,
  makeTransaction,
  makeUnknown,
  pipe: pipe2,
  prepAccount,
  put: put2,
  update: update2,
  why
});
function build() {
  let fns = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return pipe2(initInteraction(), fns);
}
var DEFAULT_RESPONSE = {
  tag: null,
  transaction: null,
  transactionStatus: null,
  transactionId: null,
  encodedData: null,
  events: null,
  event: null,
  accountStatusEvent: null,
  account: null,
  block: null,
  blockHeader: null,
  blockDigest: null,
  latestBlock: null,
  collection: null,
  networkParameters: null,
  streamConnection: null,
  heartbeat: null,
  nodeVersionInfo: null
};
var response = () => ({
  ...DEFAULT_RESPONSE
});
function getBlock() {
  let isSealed2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
  return pipe2([makeGetBlock, (ix) => {
    ix.block.isSealed = isSealed2;
    return Ok(ix);
  }]);
}
function getAccount(addr) {
  return pipe2([makeGetAccount, (ix) => {
    ix.account.addr = sansPrefix(addr);
    return Ok(ix);
  }]);
}
var decodeStream = (stream, decodeResponse2, customDecoders) => {
  const newStream = new import_events2.default();
  let queue = taskQueue();
  stream.on("data", async (data) => {
    const topics = Object.keys(data).filter((key) => data[key] != null && key !== "tag");
    let newDataPromise = Promise.all(topics.map(async (channel) => {
      const partialResponse = {
        [channel]: data[channel]
      };
      const message = await decodeResponse2(partialResponse, customDecoders);
      return {
        channel,
        message
      };
    }));
    queue.push(async () => {
      const newData = await newDataPromise;
      newData.forEach((_ref) => {
        let {
          channel,
          message
        } = _ref;
        newStream.emit(channel, message);
      });
    });
  });
  function relayEvent(event) {
    stream.on(event, (message) => {
      queue.push(async () => {
        newStream.emit(event, message);
      });
    });
  }
  relayEvent("close");
  relayEvent("error");
  return {
    on(channel, callback) {
      newStream.on(channel, callback);
      return this;
    },
    off(channel, callback) {
      newStream.off(channel, callback);
      return this;
    },
    close: () => {
      stream.close();
    }
  };
};
function taskQueue() {
  let queue = [];
  let running = false;
  async function run2() {
    if (running)
      return;
    running = true;
    while (queue.length > 0) {
      const task = queue.shift();
      await (task == null ? void 0 : task());
    }
    running = false;
  }
  return {
    push: (task) => {
      queue.push(task);
      run2();
    }
  };
}
var latestBlockDeprecationNotice = () => {
  log.deprecate({
    pkg: "@onflow/decode",
    subject: "Operating upon data of the latestBlock field of the response object",
    transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/decode/WARNINGS.md#0001-Deprecating-latestBlock-field"
  });
};
var decodeImplicit = async (i6) => i6;
var decodeVoid = async () => null;
var decodeType = async (type) => {
  return type.staticType;
};
var decodeOptional = async (optional, decoders, stack) => optional ? await recurseDecode(optional, decoders, stack) : null;
var decodeArray = async (array, decoders, stack) => await Promise.all(array.map((v11) => new Promise(async (res) => res(await recurseDecode(v11, decoders, [...stack, v11.type])))));
var decodeDictionary = async (dictionary, decoders, stack) => await dictionary.reduce(async (acc, v11) => {
  acc = await acc;
  acc[await recurseDecode(v11.key, decoders, [...stack, v11.key])] = await recurseDecode(v11.value, decoders, [...stack, v11.key]);
  return acc;
}, Promise.resolve({}));
var decodeComposite = async (composite, decoders, stack) => {
  const decoded = await composite.fields.reduce(async (acc, v11) => {
    acc = await acc;
    acc[v11.name] = await recurseDecode(v11.value, decoders, [...stack, v11.name]);
    return acc;
  }, Promise.resolve({}));
  const decoder = composite.id && decoderLookup(decoders, composite.id);
  return decoder ? await decoder(decoded) : decoded;
};
var decodeInclusiveRange = async (range, decoders, stack) => {
  const keys2 = ["start", "end", "step"];
  const decoded = await Object.keys(range).reduce(async (acc, key) => {
    acc = await acc;
    if (keys2.includes(key)) {
      acc[key] = await recurseDecode(range[key], decoders, [...stack, key]);
    }
    return acc;
  }, Promise.resolve({}));
  return decoded;
};
var defaultDecoders = {
  UInt: decodeImplicit,
  Int: decodeImplicit,
  UInt8: decodeImplicit,
  Int8: decodeImplicit,
  UInt16: decodeImplicit,
  Int16: decodeImplicit,
  UInt32: decodeImplicit,
  Int32: decodeImplicit,
  UInt64: decodeImplicit,
  Int64: decodeImplicit,
  UInt128: decodeImplicit,
  Int128: decodeImplicit,
  UInt256: decodeImplicit,
  Int256: decodeImplicit,
  Word8: decodeImplicit,
  Word16: decodeImplicit,
  Word32: decodeImplicit,
  Word64: decodeImplicit,
  Word128: decodeImplicit,
  Word256: decodeImplicit,
  UFix64: decodeImplicit,
  Fix64: decodeImplicit,
  String: decodeImplicit,
  Character: decodeImplicit,
  Bool: decodeImplicit,
  Address: decodeImplicit,
  Void: decodeVoid,
  Optional: decodeOptional,
  Reference: decodeImplicit,
  Array: decodeArray,
  Dictionary: decodeDictionary,
  Event: decodeComposite,
  Resource: decodeComposite,
  Struct: decodeComposite,
  Enum: decodeComposite,
  Type: decodeType,
  Path: decodeImplicit,
  Capability: decodeImplicit,
  InclusiveRange: decodeInclusiveRange
};
var decoderLookup = (decoders, lookup) => {
  const found = Object.keys(decoders).find((decoder) => {
    if (/^\/.*\/$/.test(decoder)) {
      const reg = new RegExp(decoder.substring(1, decoder.length - 1));
      return reg.test(lookup);
    }
    return decoder === lookup;
  });
  return lookup && found && decoders[found];
};
var recurseDecode = async (decodeInstructions, decoders, stack) => {
  let decoder = decoderLookup(decoders, decodeInstructions.type);
  if (!decoder)
    throw new Error(`Undefined Decoder Error: ${decodeInstructions.type}@${stack.join(".")}`);
  return await decoder(decodeInstructions.value, decoders, stack);
};
var decode$1 = async function(decodeInstructions) {
  let customDecoders = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let stack = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
  const filteredDecoders = Object.keys(defaultDecoders).filter((decoder) => !Object.keys(customDecoders).find((customDecoder) => new RegExp(customDecoder).test(decoder))).reduce((decoders2, decoderKey) => {
    decoders2[decoderKey] = defaultDecoders[decoderKey];
    return decoders2;
  }, customDecoders);
  const decoders = {
    ...filteredDecoders,
    ...customDecoders
  };
  return recurseDecode(decodeInstructions, decoders, stack);
};
var decodeResponse = async function(response2) {
  let customDecoders = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (response2.encodedData) {
    return decode$1(response2.encodedData, customDecoders);
  } else if (response2.transactionStatus) {
    return {
      ...response2.transactionStatus,
      events: await Promise.all(response2.transactionStatus.events.map(async function decodeEvents(e3) {
        return {
          type: e3.type,
          transactionId: e3.transactionId,
          transactionIndex: e3.transactionIndex,
          eventIndex: e3.eventIndex,
          data: await decode$1(e3.payload, customDecoders)
        };
      }))
    };
  } else if (response2.transaction) {
    return response2.transaction;
  } else if (response2.events) {
    return await Promise.all(response2.events.map(async function decodeEvents(e3) {
      return {
        blockId: e3.blockId,
        blockHeight: e3.blockHeight,
        blockTimestamp: e3.blockTimestamp,
        type: e3.type,
        transactionId: e3.transactionId,
        transactionIndex: e3.transactionIndex,
        eventIndex: e3.eventIndex,
        data: await decode$1(e3.payload, customDecoders)
      };
    }));
  } else if (response2.event) {
    const {
      payload,
      ...rest
    } = response2.event;
    return {
      ...rest,
      data: await decode$1(payload, customDecoders)
    };
  } else if (response2.accountStatusEvent) {
    const {
      payload,
      ...rest
    } = response2.accountStatusEvent;
    return {
      ...rest,
      data: await decode$1(payload, customDecoders)
    };
  } else if (response2.account) {
    return response2.account;
  } else if (response2.block) {
    return response2.block;
  } else if (response2.blockHeader) {
    return response2.blockHeader;
  } else if (response2.blockDigest) {
    return response2.blockDigest;
  } else if (response2.latestBlock) {
    latestBlockDeprecationNotice();
    return response2.latestBlock;
  } else if (response2.transactionId) {
    return response2.transactionId;
  } else if (response2.collection) {
    return response2.collection;
  } else if (response2.networkParameters) {
    const prefixRegex = /^flow-/;
    const rawChainId = response2.networkParameters.chainId;
    let formattedChainId;
    if (rawChainId === "flow-emulator") {
      formattedChainId = "local";
    } else if (prefixRegex.test(rawChainId)) {
      formattedChainId = rawChainId.replace(prefixRegex, "");
    } else {
      formattedChainId = rawChainId;
    }
    return {
      chainId: formattedChainId
    };
  } else if (response2.streamConnection) {
    return decodeStream(response2.streamConnection, decodeResponse, customDecoders);
  } else if (response2.heartbeat) {
    return response2.heartbeat;
  } else if (response2.nodeVersionInfo) {
    return response2.nodeVersionInfo;
  }
  return null;
};
var SubscriptionsNotSupportedError = class extends Error {
  constructor() {
    super(`The current transport does not support subscriptions.  If you have provided a custom transport (e.g. via \`sdk.transport\` configuration), ensure that it implements the subscribe method.`);
    this.name = "SubscriptionsNotSupportedError";
  }
};
function getGlobalTransport(cfg) {
  const transportOrSend = cfg["sdk.transport"] || cfg["sdk.send"] || httpTransport;
  if (!isTransportObject(transportOrSend)) {
    return {
      send: transportOrSend,
      subscribe: () => {
        throw new SubscriptionsNotSupportedError();
      }
    };
  }
  return transportOrSend;
}
function isTransportObject(transport) {
  return transport.send !== void 0 && transport.subscribe !== void 0 && typeof transport.send === "function" && typeof transport.subscribe === "function";
}
var DEFAULT_COMPUTE_LIMIT = 10;
var cachedContext;
async function createGlobalContext() {
  const globalConfig = await config2().all();
  return {
    get transport() {
      return getGlobalTransport(globalConfig);
    },
    get accessNodeUrl() {
      const accessNodeUrl = globalConfig["accessNode.api"];
      invariant(!!accessNodeUrl, `Either opts.node or "accessNode.api" in config must be defined.`);
      return accessNodeUrl;
    },
    get computeLimit() {
      const computeLimit = globalConfig["fcl.limit"];
      if (!computeLimit) {
        log.deprecate({
          pkg: "FCL/SDK",
          subject: "The built-in default compute limit (DEFAULT_COMPUTE_LIMIT=10)",
          transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0009-deprecate-default-compute-limit"
        });
        return DEFAULT_COMPUTE_LIMIT;
      }
      return computeLimit;
    },
    get customResolver() {
      const customResolver = globalConfig["sdk.resolve"];
      return customResolver;
    },
    get customDecoders() {
      return Object.fromEntries(Object.entries(globalConfig).filter((_ref) => {
        let [key] = _ref;
        return key.startsWith("decoder.");
      }));
    },
    get contracts() {
      return Object.fromEntries(Object.entries(globalConfig).filter((_ref2) => {
        let [key] = _ref2;
        return key.startsWith("system.contracts.");
      }).map((_ref3) => {
        let [key, value] = _ref3;
        return [key.replace("system.contracts.", ""), value];
      }));
    },
    get debug() {
      return Object.fromEntries(Object.entries(globalConfig).filter((_ref4) => {
        let [key] = _ref4;
        return key.startsWith("debug.");
      }));
    },
    get legacyContractIdentifiers() {
      return Object.fromEntries(Object.entries(globalConfig).filter((_ref5) => {
        let [key] = _ref5;
        return key.startsWith("0x");
      }));
    }
  };
}
async function getGlobalContext() {
  if (!cachedContext) {
    config2().subscribe(() => {
      cachedContext = createGlobalContext();
    });
    cachedContext = createGlobalContext();
  }
  return cachedContext instanceof Promise ? cachedContext : cachedContext;
}
function withGlobalContext(fn3) {
  return async function() {
    const context = await getGlobalContext();
    return fn3(context)(...arguments);
  };
}
var isFn$2 = (v11) => typeof v11 === "function";
var isString$1 = (v11) => typeof v11 === "string";
var oldIdentifierPatternFn = () => /\b(0x\w+)\b/g;
function isOldIdentifierSyntax(cadence) {
  return oldIdentifierPatternFn().test(cadence);
}
var newIdentifierPatternFn = () => /import\s+"(\w+)"/g;
function isNewIdentifierSyntax(cadence) {
  return newIdentifierPatternFn().test(cadence);
}
function getContractIdentifierSyntaxMatches(cadence) {
  return cadence.matchAll(newIdentifierPatternFn());
}
function createResolveCadence(context) {
  return async function resolveCadence2(ix) {
    if (!isTransaction(ix) && !isScript(ix))
      return ix;
    var cadence = get2(ix, "ix.cadence");
    invariant(isFn$2(cadence) || isString$1(cadence), "Cadence needs to be a function or a string.");
    if (isFn$2(cadence))
      cadence = await cadence({});
    invariant(isString$1(cadence), "Cadence needs to be a string at this point.");
    invariant(!isOldIdentifierSyntax(cadence) || !isNewIdentifierSyntax(cadence), "Both account identifier and contract identifier syntax not simultaneously supported.");
    if (isOldIdentifierSyntax(cadence)) {
      cadence = Object.entries(context.legacyContractIdentifiers || {}).reduce((cadence2, _ref) => {
        let [key, value] = _ref;
        const regex = new RegExp("(\\b" + key + "\\b)", "g");
        return cadence2.replace(regex, value);
      }, cadence);
    }
    if (isNewIdentifierSyntax(cadence)) {
      for (const [fullMatch, contractName] of getContractIdentifierSyntaxMatches(cadence)) {
        const address = context.contracts[contractName] || null;
        if (address) {
          cadence = cadence.replace(fullMatch, `import ${contractName} from ${withPrefix2(address)}`);
        } else {
          log({
            title: "Contract Placeholder not found",
            message: `Cannot find a value for contract placeholder ${contractName}. Please add to your flow.json or explicitly add it to the config 'contracts.*' namespace.`,
            level: LEVELS.warn
          });
        }
      }
    }
    ix.message.cadence = cadence;
    return ix;
  };
}
var resolveCadence = withGlobalContext(createResolveCadence);
var isFn$1 = (v11) => typeof v11 === "function";
function cast(arg2) {
  invariant(typeof arg2.xform != null, `No type specified for argument: ${arg2.value}`);
  if (isFn$1(arg2.xform))
    return arg2.xform(arg2.value);
  if (isFn$1(arg2.xform.asArgument))
    return arg2.xform.asArgument(arg2.value);
  invariant(false, `Invalid Argument`, arg2);
}
async function handleArgResolution(arg2) {
  let depth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;
  invariant(depth > 0, `Argument Resolve Recursion Limit Exceeded for Arg: ${arg2.tempId}`);
  if (isFn$1(arg2.resolveArgument)) {
    const resolvedArg = await arg2.resolveArgument();
    return handleArgResolution(resolvedArg, depth - 1);
  } else {
    return arg2;
  }
}
async function resolveArguments(ix) {
  if (isTransaction(ix) || isScript(ix)) {
    for (let [id2, arg2] of Object.entries(ix.arguments)) {
      const res = await handleArgResolution(arg2);
      ix.arguments[id2].asArgument = cast(res);
    }
  }
  return ix;
}
var encodeTransactionPayload = (tx) => prependTransactionDomainTag(rlpEncode(preparePayload(tx)));
var encodeTransactionEnvelope = (tx) => prependTransactionDomainTag(rlpEncode(prepareEnvelope(tx)));
var encodeTxIdFromVoucher = (voucher) => sha3_256(rlpEncode(prepareVoucher(voucher)));
var rightPaddedHexBuffer = (value, pad2) => import_buffer2.Buffer.from(value.padEnd(pad2 * 2, "0"), "hex");
var leftPaddedHexBuffer = (value, pad2) => import_buffer2.Buffer.from(value.padStart(pad2 * 2, "0"), "hex");
var TRANSACTION_DOMAIN_TAG = rightPaddedHexBuffer(import_buffer2.Buffer.from("FLOW-V0.0-transaction").toString("hex"), 32).toString("hex");
var prependTransactionDomainTag = (tx) => TRANSACTION_DOMAIN_TAG + tx;
var addressBuffer = (addr) => leftPaddedHexBuffer(addr, 8);
var blockBuffer = (block2) => leftPaddedHexBuffer(block2, 32);
var argumentToString = (arg2) => import_buffer2.Buffer.from(JSON.stringify(arg2), "utf8");
var scriptBuffer = (script2) => import_buffer2.Buffer.from(script2, "utf8");
var signatureBuffer = (signature) => import_buffer2.Buffer.from(signature, "hex");
var rlpEncode = (v11) => {
  return encode(v11).toString("hex");
};
var sha3_256 = (msg) => {
  const sha2 = new import_sha3.SHA3(256);
  sha2.update(import_buffer2.Buffer.from(msg, "hex"));
  return sha2.digest().toString("hex");
};
var preparePayload = (tx) => {
  validatePayload(tx);
  return [scriptBuffer(tx.cadence || ""), tx.arguments.map(argumentToString), blockBuffer(tx.refBlock || ""), tx.computeLimit, addressBuffer(sansPrefix(tx.proposalKey.address || "")), tx.proposalKey.keyId, tx.proposalKey.sequenceNum, addressBuffer(sansPrefix(tx.payer)), tx.authorizers.map((authorizer) => addressBuffer(sansPrefix(authorizer)))];
};
var prepareEnvelope = (tx) => {
  validateEnvelope(tx);
  return [preparePayload(tx), preparePayloadSignatures(tx)];
};
var preparePayloadSignatures = (tx) => {
  var _a2;
  const signers = collectSigners(tx);
  return (_a2 = tx.payloadSigs) == null ? void 0 : _a2.map((sig2) => {
    return {
      signerIndex: signers.get(sansPrefix(sig2.address)) || "",
      keyId: sig2.keyId,
      sig: sig2.sig
    };
  }).sort((a4, b5) => {
    if (a4.signerIndex > b5.signerIndex)
      return 1;
    if (a4.signerIndex < b5.signerIndex)
      return -1;
    if (a4.keyId > b5.keyId)
      return 1;
    if (a4.keyId < b5.keyId)
      return -1;
    return 0;
  }).map((sig2) => {
    return [sig2.signerIndex, sig2.keyId, signatureBuffer(sig2.sig)];
  });
};
var collectSigners = (tx) => {
  const signers = /* @__PURE__ */ new Map();
  let i6 = 0;
  const addSigner = (addr) => {
    if (!signers.has(addr)) {
      signers.set(addr, i6);
      i6++;
    }
  };
  if (tx.proposalKey.address) {
    addSigner(tx.proposalKey.address);
  }
  addSigner(tx.payer);
  tx.authorizers.forEach(addSigner);
  return signers;
};
var prepareVoucher = (voucher) => {
  validateVoucher(voucher);
  const signers = collectSigners(voucher);
  const prepareSigs = (sigs) => {
    return sigs.map((_ref) => {
      let {
        address,
        keyId,
        sig: sig2
      } = _ref;
      return {
        signerIndex: signers.get(sansPrefix(address)) || "",
        keyId,
        sig: sig2
      };
    }).sort((a4, b5) => {
      if (a4.signerIndex > b5.signerIndex)
        return 1;
      if (a4.signerIndex < b5.signerIndex)
        return -1;
      if (a4.keyId > b5.keyId)
        return 1;
      if (a4.keyId < b5.keyId)
        return -1;
      return 0;
    }).map((sig2) => {
      return [sig2.signerIndex, sig2.keyId, signatureBuffer(sig2.sig)];
    });
  };
  return [[scriptBuffer(voucher.cadence), voucher.arguments.map(argumentToString), blockBuffer(voucher.refBlock), voucher.computeLimit, addressBuffer(sansPrefix(voucher.proposalKey.address)), voucher.proposalKey.keyId, voucher.proposalKey.sequenceNum, addressBuffer(sansPrefix(voucher.payer)), voucher.authorizers.map((authorizer) => addressBuffer(sansPrefix(authorizer)))], prepareSigs(voucher.payloadSigs), prepareSigs(voucher.envelopeSigs)];
};
var validatePayload = (tx) => {
  payloadFields.forEach((field) => checkField(tx, field));
  proposalKeyFields.forEach((field) => checkField(tx.proposalKey, field, "proposalKey"));
};
var validateEnvelope = (tx) => {
  var _a2;
  payloadSigsFields.forEach((field) => checkField(tx, field));
  (_a2 = tx.payloadSigs) == null ? void 0 : _a2.forEach((sig2, index3) => {
    payloadSigFields.forEach((field) => checkField(sig2, field, "payloadSigs", index3));
  });
};
var validateVoucher = (voucher) => {
  payloadFields.forEach((field) => checkField(voucher, field));
  proposalKeyFields.forEach((field) => checkField(voucher.proposalKey, field, "proposalKey"));
  payloadSigsFields.forEach((field) => checkField(voucher, field));
  voucher.payloadSigs.forEach((sig2, index3) => {
    payloadSigFields.forEach((field) => checkField(sig2, field, "payloadSigs", index3));
  });
  envelopeSigsFields.forEach((field) => checkField(voucher, field));
  voucher.envelopeSigs.forEach((sig2, index3) => {
    envelopeSigFields.forEach((field) => checkField(sig2, field, "envelopeSigs", index3));
  });
};
var isNumber2 = (v11) => typeof v11 === "number";
var isString2 = (v11) => typeof v11 === "string";
var isObject2 = (v11) => v11 !== null && typeof v11 === "object";
var isArray2 = (v11) => isObject2(v11) && v11 instanceof Array;
var payloadFields = [{
  name: "cadence",
  check: isString2
}, {
  name: "arguments",
  check: isArray2
}, {
  name: "refBlock",
  check: isString2,
  defaultVal: "0"
}, {
  name: "computeLimit",
  check: isNumber2
}, {
  name: "proposalKey",
  check: isObject2
}, {
  name: "payer",
  check: isString2
}, {
  name: "authorizers",
  check: isArray2
}];
var proposalKeyFields = [{
  name: "address",
  check: isString2
}, {
  name: "keyId",
  check: isNumber2
}, {
  name: "sequenceNum",
  check: isNumber2
}];
var payloadSigsFields = [{
  name: "payloadSigs",
  check: isArray2
}];
var payloadSigFields = [{
  name: "address",
  check: isString2
}, {
  name: "keyId",
  check: isNumber2
}, {
  name: "sig",
  check: isString2
}];
var envelopeSigsFields = [{
  name: "envelopeSigs",
  check: isArray2
}];
var envelopeSigFields = [{
  name: "address",
  check: isString2
}, {
  name: "keyId",
  check: isNumber2
}, {
  name: "sig",
  check: isString2
}];
var checkField = (obj, field, base3, index3) => {
  const {
    name: name2,
    check,
    defaultVal
  } = field;
  if (obj[name2] == null && defaultVal != null)
    obj[name2] = defaultVal;
  if (obj[name2] == null)
    throw missingFieldError(name2, base3, index3);
  if (!check(obj[name2]))
    throw invalidFieldError(name2, base3, index3);
};
var printFieldName = (field, base3, index3) => {
  if (!!base3)
    return index3 == null ? `${base3}.${field}` : `${base3}.${index3}.${field}`;
  return field;
};
var missingFieldError = (field, base3, index3) => new Error(`Missing field ${printFieldName(field, base3, index3)}`);
var invalidFieldError = (field, base3, index3) => new Error(`Invalid field ${printFieldName(field, base3, index3)}`);
function findInsideSigners(ix) {
  let inside = new Set(ix.authorizations);
  if (ix.proposer) {
    inside.add(ix.proposer);
  }
  if (Array.isArray(ix.payer)) {
    ix.payer.forEach((p5) => inside.delete(p5));
  } else {
    inside.delete(ix.payer);
  }
  return Array.from(inside);
}
function findOutsideSigners(ix) {
  let outside = new Set(Array.isArray(ix.payer) ? ix.payer : [ix.payer]);
  return Array.from(outside);
}
var createSignableVoucher = (ix) => {
  const buildAuthorizers = () => {
    const authorizations2 = ix.authorizations.map((cid) => withPrefix2(ix.accounts[cid].addr)).reduce((prev, current) => {
      return prev.find((item) => item === current) ? prev : [...prev, current];
    }, []);
    return authorizations2;
  };
  const buildInsideSigners = () => findInsideSigners(ix).map((id2) => ({
    address: withPrefix2(ix.accounts[id2].addr),
    keyId: ix.accounts[id2].keyId,
    sig: ix.accounts[id2].signature
  }));
  const buildOutsideSigners = () => findOutsideSigners(ix).map((id2) => ({
    address: withPrefix2(ix.accounts[id2].addr),
    keyId: ix.accounts[id2].keyId,
    sig: ix.accounts[id2].signature
  }));
  const proposalKey = ix.proposer ? {
    address: withPrefix2(ix.accounts[ix.proposer].addr),
    keyId: ix.accounts[ix.proposer].keyId,
    sequenceNum: ix.accounts[ix.proposer].sequenceNum
  } : {};
  return {
    cadence: ix.message.cadence,
    refBlock: ix.message.refBlock || null,
    computeLimit: ix.message.computeLimit,
    arguments: ix.message.arguments.map((id2) => ix.arguments[id2].asArgument),
    proposalKey,
    payer: withPrefix2(ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr),
    authorizers: buildAuthorizers(),
    payloadSigs: buildInsideSigners(),
    envelopeSigs: buildOutsideSigners()
  };
};
var voucherToTxId = (voucher) => {
  return encodeTxIdFromVoucher(voucher);
};
var MAX_DEPTH_LIMIT = 5;
var idof$1 = (acct) => `${withPrefix2(acct.addr)}-${acct.keyId}`;
var isFn = (v11) => v11 && (Object.prototype.toString.call(v11) === "[object Function]" || "function" === typeof v11 || v11 instanceof Function);
var genAccountId = function() {
  for (var _len = arguments.length, ids = new Array(_len), _key = 0; _key < _len; _key++) {
    ids[_key] = arguments[_key];
  }
  return ids.join("-");
};
var ROLES = function(ROLES2) {
  ROLES2["PAYER"] = "payer";
  ROLES2["PROPOSER"] = "proposer";
  ROLES2["AUTHORIZATIONS"] = "authorizations";
  return ROLES2;
}(ROLES || {});
function debug$1() {
  const SPACE = " ";
  const SPACE_COUNT_PER_INDENT = 4;
  const DEBUG_MESSAGE = [];
  return [function() {
    let msg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    let indent = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    DEBUG_MESSAGE.push(Array(indent * SPACE_COUNT_PER_INDENT).fill(SPACE).join("-") + msg);
  }, function() {
    return DEBUG_MESSAGE.reduce((prev, curr) => prev + "\n" + curr);
  }];
}
function recurseFlatMap(el) {
  let depthLimit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;
  if (depthLimit <= 0)
    return el;
  if (!Array.isArray(el))
    return el;
  return recurseFlatMap(el.flatMap((e3) => e3), depthLimit - 1);
}
function buildPreSignable(acct, ix) {
  try {
    return {
      f_type: "PreSignable",
      f_vsn: "1.0.1",
      roles: acct.role,
      cadence: ix.message.cadence,
      args: ix.message.arguments.map((d8) => ix.arguments[d8].asArgument),
      data: {},
      interaction: ix,
      voucher: createSignableVoucher(ix)
    };
  } catch (error) {
    console.error("buildPreSignable", error);
    throw error;
  }
}
async function removeUnusedIxAccounts(ix, opts) {
  const payerTempIds = Array.isArray(ix.payer) ? ix.payer : [ix.payer];
  const authorizersTempIds = Array.isArray(ix.authorizations) ? ix.authorizations : [ix.authorizations];
  const proposerTempIds = ix.proposer === null ? [] : Array.isArray(ix.proposer) ? ix.proposer : [ix.proposer];
  const ixAccountKeys = Object.keys(ix.accounts);
  const uniqueTempIds = [...new Set(payerTempIds.concat(authorizersTempIds, proposerTempIds))];
  for (const ixAccountKey of ixAccountKeys) {
    if (!uniqueTempIds.find((id2) => id2 === ixAccountKey)) {
      delete ix.accounts[ixAccountKey];
    }
  }
}
function addAccountToIx(ix, newAccount) {
  if (typeof newAccount.addr === "string" && (typeof newAccount.keyId === "number" || typeof newAccount.keyId === "string")) {
    newAccount.tempId = idof$1(newAccount);
  } else {
    newAccount.tempId = newAccount.tempId || v4_default();
  }
  const existingAccount = ix.accounts[newAccount.tempId] || newAccount;
  if (!ix.accounts[newAccount.tempId]) {
    ix.accounts[newAccount.tempId] = newAccount;
  }
  ix.accounts[newAccount.tempId].role.proposer = existingAccount.role.proposer || newAccount.role.proposer;
  ix.accounts[newAccount.tempId].role.payer = existingAccount.role.payer || newAccount.role.payer;
  ix.accounts[newAccount.tempId].role.authorizer = existingAccount.role.authorizer || newAccount.role.authorizer;
  return ix.accounts[newAccount.tempId];
}
function uniqueAccountsFlatMap(accounts) {
  const flatMapped = recurseFlatMap(accounts);
  const seen = /* @__PURE__ */ new Set();
  const uniqueAccountsFlatMapped = flatMapped.map((account2) => {
    const accountId = genAccountId(account2.tempId, account2.role.payer, account2.role.proposer, account2.role.authorizer, account2.role.param);
    if (seen.has(accountId))
      return null;
    seen.add(accountId);
    return account2;
  }).filter((e3) => e3 !== null);
  return uniqueAccountsFlatMapped;
}
async function resolveSingleAccount(ix, currentAccountTempId) {
  let depthLimit = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : MAX_DEPTH_LIMIT;
  let {
    debugLogger
  } = arguments.length > 3 ? arguments[3] : void 0;
  if (depthLimit <= 0) {
    throw new Error(`recurseResolveAccount Error: Depth limit (${MAX_DEPTH_LIMIT}) reached. Ensure your authorization functions resolve to an account after ${MAX_DEPTH_LIMIT} resolves.`);
  }
  let account2 = ix.accounts[currentAccountTempId];
  if (!account2)
    return [[], false];
  debugLogger(`account: ${account2.tempId}`, Math.max(MAX_DEPTH_LIMIT - depthLimit, 0));
  if (account2 == null ? void 0 : account2.resolve) {
    if (isFn(account2 == null ? void 0 : account2.resolve)) {
      debugLogger(`account: ${account2.tempId} -- cache MISS`, Math.max(MAX_DEPTH_LIMIT - depthLimit, 0));
      const {
        resolve: resolve2,
        ...accountWithoutResolve
      } = account2;
      let resolvedAccounts = await resolve2(accountWithoutResolve, buildPreSignable(accountWithoutResolve, ix));
      resolvedAccounts = Array.isArray(resolvedAccounts) ? resolvedAccounts : [resolvedAccounts];
      let flatResolvedAccounts = recurseFlatMap(resolvedAccounts);
      flatResolvedAccounts = flatResolvedAccounts.map((flatResolvedAccount) => addAccountToIx(ix, flatResolvedAccount));
      account2.resolve = flatResolvedAccounts.map((flatResolvedAccount) => flatResolvedAccount.tempId);
      account2 = addAccountToIx(ix, account2);
      return [flatResolvedAccounts.map((flatResolvedAccount) => flatResolvedAccount.tempId), true];
    } else {
      debugLogger(`account: ${account2.tempId} -- cache HIT`, Math.max(MAX_DEPTH_LIMIT - depthLimit, 0));
      return [account2.resolve, false];
    }
  }
  return [account2.tempId ? [account2.tempId] : [], false];
}
var getAccountTempIDs = (rawTempIds) => {
  if (rawTempIds === null) {
    return [];
  }
  return Array.isArray(rawTempIds) ? rawTempIds : [rawTempIds];
};
async function replaceRoles(ix, oldAccountTempId, newAccounts) {
  var _a2;
  for (let role of Object.values(ROLES)) {
    if (role === ROLES.AUTHORIZATIONS || role === ROLES.PAYER) {
      ix[role] = getAccountTempIDs(ix[role]).reduce((acc, acctTempId) => {
        if (acctTempId === oldAccountTempId) {
          return acc.concat(...newAccounts.filter((x7) => {
            return role === ROLES.PAYER && x7.role.payer || role === ROLES.AUTHORIZATIONS && x7.role.authorizer;
          }).map((acct) => acct.tempId));
        }
        return acc.concat(acctTempId);
      }, []);
    } else if (role === ROLES.PROPOSER) {
      const proposerAccts = newAccounts.filter((x7) => x7.role.proposer);
      if (proposerAccts.length > 1) {
        throw new Error(`replaceRoles Error: Multiple proposer keys were resolved, but only one is allowed`);
      }
      ix[role] = ((_a2 = proposerAccts[0]) == null ? void 0 : _a2.tempId) ?? ix[role];
    }
  }
}
async function resolveAccountsByIds(ix, accountTempIds) {
  let depthLimit = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : MAX_DEPTH_LIMIT;
  let {
    debugLogger
  } = arguments.length > 3 ? arguments[3] : void 0;
  invariant(ix && typeof ix === "object", "resolveAccountType Error: ix not defined");
  let newTempIds = /* @__PURE__ */ new Set();
  for (let accountId of accountTempIds) {
    let account2 = ix.accounts[accountId];
    invariant(Boolean(account2), `resolveAccountType Error: account not found`);
    const [resolvedAccountTempIds, foundNewAccounts] = await resolveSingleAccount(ix, accountId, depthLimit, {
      debugLogger
    });
    if (foundNewAccounts) {
      const resolvedAccounts = resolvedAccountTempIds.map((resolvedAccountTempId) => ix.accounts[resolvedAccountTempId]);
      const flatResolvedAccounts = uniqueAccountsFlatMap(resolvedAccounts);
      flatResolvedAccounts.forEach((x7) => newTempIds.add(x7.tempId));
      replaceRoles(ix, accountId, flatResolvedAccounts);
    }
  }
  let payerAddress;
  for (const payerTempID of ix[ROLES.PAYER]) {
    let pAcct = ix.accounts[payerTempID];
    if (!payerAddress)
      payerAddress = pAcct.addr;
    else if (payerAddress !== pAcct.addr) {
      throw new Error("resolveAccountType Error: payers from different accounts detected");
    }
  }
  return newTempIds;
}
async function resolveAccounts(ix) {
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (isTransaction(ix)) {
    if (!Array.isArray(ix.payer)) {
      log.deprecate({
        pkg: "FCL",
        subject: '"ix.payer" must be an array. Support for ix.payer as a singular',
        message: "See changelog for more info."
      });
    }
    let [debugLogger, getDebugMessage] = debug$1();
    try {
      let depthLimit = MAX_DEPTH_LIMIT;
      let frontier = /* @__PURE__ */ new Set([...getAccountTempIDs(ix[ROLES.PAYER]), ...getAccountTempIDs(ix[ROLES.PROPOSER]), ...getAccountTempIDs(ix[ROLES.AUTHORIZATIONS])]);
      while (frontier.size > 0) {
        if (depthLimit <= 0) {
          throw new Error(`resolveAccounts Error: Depth limit (${MAX_DEPTH_LIMIT}) reached. Ensure your authorization functions resolve to an account after ${MAX_DEPTH_LIMIT} resolves.`);
        }
        frontier = await resolveAccountsByIds(ix, frontier, depthLimit, {
          debugLogger
        });
        depthLimit--;
      }
      await removeUnusedIxAccounts(ix, {
        debugLogger
      });
      for (const role of Object.values(ROLES)) {
        invariant(getAccountTempIDs(ix[role]).length > 0 || role === ROLES.AUTHORIZATIONS, `resolveAccountType Error: no accounts for role "${role}" found`);
      }
      if (opts.enableDebug) {
        console.debug(getDebugMessage());
      }
    } catch (error) {
      console.error("=== SAD PANDA ===\n\n", error, "\n\n=== SAD PANDA ===");
      throw error;
    }
  }
  return ix;
}
async function resolveSignatures(ix) {
  if (isTransaction(ix)) {
    try {
      let insideSigners = findInsideSigners(ix);
      const insidePayload = encodeTransactionPayload(prepForEncoding(ix));
      await Promise.all(insideSigners.map(fetchSignature(ix, insidePayload)));
      let outsideSigners = findOutsideSigners(ix);
      const outsidePayload = encodeTransactionEnvelope({
        ...prepForEncoding(ix),
        payloadSigs: insideSigners.map((id2) => ({
          address: ix.accounts[id2].addr || "",
          keyId: ix.accounts[id2].keyId || 0,
          sig: ix.accounts[id2].signature || ""
        }))
      });
      await Promise.all(outsideSigners.map(fetchSignature(ix, outsidePayload)));
    } catch (error) {
      console.error("Signatures", error, {
        ix
      });
      throw error;
    }
  }
  return ix;
}
function fetchSignature(ix, payload) {
  return async function innerFetchSignature(id2) {
    const acct = ix.accounts[id2];
    if (acct.signature != null && acct.signature !== void 0)
      return;
    const {
      signature
    } = await acct.signingFunction(buildSignable(acct, payload, ix));
    ix.accounts[id2].signature = signature;
  };
}
function buildSignable(acct, message, ix) {
  try {
    return {
      f_type: "Signable",
      f_vsn: "1.0.1",
      message,
      addr: sansPrefix(acct.addr),
      keyId: acct.keyId,
      roles: acct.role,
      cadence: ix.message.cadence,
      args: ix.message.arguments.map((d8) => ix.arguments[d8].asArgument),
      data: {},
      interaction: ix,
      voucher: createSignableVoucher(ix)
    };
  } catch (error) {
    console.error("buildSignable", error);
    throw error;
  }
}
function prepForEncoding(ix) {
  const payerAddress = sansPrefix((Array.isArray(ix.payer) ? ix.accounts[ix.payer[0]] : ix.accounts[ix.payer]).addr || "");
  const proposalKey = ix.proposer ? {
    address: sansPrefix(ix.accounts[ix.proposer].addr) || "",
    keyId: ix.accounts[ix.proposer].keyId || 0,
    sequenceNum: ix.accounts[ix.proposer].sequenceNum || 0
  } : {};
  return {
    cadence: ix.message.cadence,
    refBlock: ix.message.refBlock,
    computeLimit: ix.message.computeLimit,
    arguments: ix.message.arguments.map((id2) => ix.arguments[id2].asArgument),
    proposalKey,
    payer: payerAddress,
    authorizers: ix.authorizations.map((cid) => sansPrefix(ix.accounts[cid].addr) || "").reduce((prev, current) => {
      return prev.find((item) => item === current) ? prev : [...prev, current];
    }, [])
  };
}
async function resolveValidators(ix) {
  const validators = get2(ix, "ix.validators", []);
  return pipe2(ix, validators.map((cb) => (ix2) => cb(ix2, {
    Ok,
    Bad
  })));
}
async function resolveFinalNormalization(ix) {
  for (let key of Object.keys(ix.accounts)) {
    ix.accounts[key].addr = sansPrefix(ix.accounts[key].addr);
  }
  return ix;
}
async function resolveVoucherIntercept(ix) {
  const fn3 = get2(ix, "ix.voucher-intercept");
  if (isFn$3(fn3)) {
    await fn3(createSignableVoucher(ix));
  }
  return ix;
}
function createResolveComputeLimit(context) {
  return async function resolveComputeLimit(ix) {
    if (isTransaction(ix)) {
      ix.message.computeLimit = ix.message.computeLimit || context.computeLimit;
    }
    return ix;
  };
}
var noop = (v11) => v11;
var debug = function(key) {
  let fn3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  return async (ix) => {
    const accts = (ix2) => ["\nAccounts:", {
      proposer: ix2.proposer,
      authorizations: ix2.authorizations,
      payer: ix2.payer
    }, "\n\nDetails:", ix2.accounts].filter(Boolean);
    const log2 = function() {
      for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {
        msg[_key] = arguments[_key];
      }
      console.log(`debug[${key}] ---
`, ...msg, "\n\n\n---");
    };
    if (await config2.get(`debug.${key}`))
      await fn3(ix, log2, accts);
    return ix;
  };
};
function createResolve(context) {
  const resolve2 = async (ix) => pipe2([
    createResolveCadence(context),
    debug("cadence", (ix2, log2) => log2(ix2.message.cadence)),
    createResolveComputeLimit(context),
    debug("compute limit", (ix2, log2) => log2(ix2.message.computeLimit)),
    resolveArguments,
    debug("arguments", (ix2, log2) => log2(ix2.message.arguments, ix2.message)),
    resolveAccounts,
    debug("accounts", (ix2, log2, accts) => log2(...accts(ix2))),
    /* special */
    createExecFetchRef(context),
    /* special */
    createExecFetchSequenceNumber(context),
    resolveSignatures,
    debug("signatures", (ix2, log2, accts) => log2(...accts(ix2))),
    resolveFinalNormalization,
    resolveValidators,
    resolveVoucherIntercept,
    debug("resolved", (ix2, log2) => log2(ix2))
  ])(ix);
  return resolve2;
}
var resolve = withGlobalContext(createResolve);
function createExecFetchRef(context) {
  return async function execFetchRef(ix) {
    if (isTransaction(ix) && ix.message.refBlock == null) {
      const sendFn = context.transport.send;
      ix.message.refBlock = (await sendFn(build([getBlock()]), {
        response,
        Buffer: import_buffer2.Buffer,
        ix: ixModule
      }, {
        get node() {
          return context.accessNodeUrl;
        }
      }).then(decodeResponse)).id;
    }
    return ix;
  };
}
function createExecFetchSequenceNumber(context) {
  return async function execFetchSequenceNumber(ix) {
    if (isTransaction(ix)) {
      var acct = Object.values(ix.accounts).find((a4) => a4.role.proposer);
      invariant(acct !== void 0, `Transactions require a proposer`);
      if (acct && acct.sequenceNum == null) {
        const sendFn = context.transport.send;
        ix.accounts[acct.tempId].sequenceNum = await sendFn(await build([getAccount(acct.addr)]), {
          response,
          Buffer: import_buffer2.Buffer,
          ix: ixModule
        }, {
          get node() {
            return context.accessNodeUrl;
          }
        }).then(decodeResponse).then((acctResponse) => acctResponse.keys).then((keys2) => keys2.find((key) => key.index === acct.keyId)).then((key) => key.sequenceNumber);
      }
    }
    return ix;
  };
}
function createSend(context) {
  async function send4() {
    var _a2, _b;
    let args2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const transport = opts.transport || context.transport;
    const sendFn = (_b = (_a2 = transport.send) == null ? void 0 : _a2.bind) == null ? void 0 : _b.call(_a2, transport);
    invariant(!!sendFn, `Required value for sdk.transport is not defined in config. See: ${"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21"}`);
    const resolveFn = opts.resolve || context.customResolver || createResolve(context);
    opts.node = opts.node || context.accessNodeUrl;
    if (Array.isArray(args2))
      args2 = pipe2(initInteraction(), args2);
    return sendFn(await resolveFn(args2), {
      response,
      ix: ixModule,
      Buffer: import_buffer2.Buffer
    }, opts);
  }
  return send4;
}
var send3 = withGlobalContext(createSend);
function createSubscribeRawAsync(contextPromise) {
  function subscribeRaw2(_ref) {
    let {
      topic,
      args: args2,
      onData,
      onError
    } = _ref;
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    async function subscribe4() {
      try {
        const context = await contextPromise;
        const transport = opts.transport || context.transport;
        const node = opts.node || context.accessNodeUrl;
        invariant(!!node, `SDK Send Error: Either opts.node or "accessNode.api" in config must be defined.`);
        return transport.subscribe({
          topic,
          args: args2,
          onData,
          onError
        }, {
          node,
          ...opts
        });
      } catch (e3) {
        onError(e3 instanceof Error ? e3 : new Error(String(e3)));
        return;
      }
    }
    let subscriptionPromise = subscribe4();
    return {
      unsubscribe: () => {
        subscriptionPromise.then((sub) => {
          var _a2;
          return (_a2 = sub == null ? void 0 : sub.unsubscribe) == null ? void 0 : _a2.call(sub);
        });
      }
    };
  }
  return subscribeRaw2;
}
function createSubscribeRaw(context) {
  return createSubscribeRawAsync(context);
}
function subscribeRaw(_ref2) {
  let {
    topic,
    args: args2,
    onData,
    onError
  } = _ref2;
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const contextPromise = getGlobalContext();
  return createSubscribeRawAsync(contextPromise)({
    topic,
    args: args2,
    onData,
    onError
  }, opts);
}
function createSubscribeAsync(contextPromise) {
  function subscribe4(_ref) {
    let {
      topic,
      args: args2,
      onData,
      onError
    } = _ref;
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const sub = createSubscribeRawAsync(contextPromise)({
      topic,
      args: args2,
      onData: (data) => {
        decodeResponse(data).then(onData).catch((e3) => {
          var _a2;
          onError(new Error(`Failed to decode response: ${e3.message}`));
          (_a2 = sub == null ? void 0 : sub.unsubscribe) == null ? void 0 : _a2.call(sub);
        });
      },
      onError
    }, opts);
    return sub;
  }
  return subscribe4;
}
function createSubscribe(context) {
  return createSubscribeAsync(context);
}
function subscribe3(_ref2) {
  let {
    topic,
    args: args2,
    onData,
    onError
  } = _ref2;
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const contextPromise = getGlobalContext();
  const sub = createSubscribeRawAsync(contextPromise)({
    topic,
    args: args2,
    onData: (data) => {
      decodeResponse(data).then(onData).catch((e3) => {
        var _a2;
        onError(new Error(`Failed to decode response: ${e3.message}`));
        (_a2 = sub == null ? void 0 : sub.unsubscribe) == null ? void 0 : _a2.call(sub);
      });
    },
    onError
  }, opts);
  return sub;
}
function createDecode(context) {
  async function decode9(response2) {
    return decodeResponse(response2, context.customDecoders);
  }
  return decode9;
}
var decode = withGlobalContext(createDecode);
var findPayloadSigners = (voucher) => {
  const payload = new Set(voucher.authorizers);
  payload.add(voucher.proposalKey.address);
  payload.delete(voucher.payer);
  return Array.from(payload).map((addr) => withPrefix2(addr));
};
var findEnvelopeSigners = (voucher) => {
  const envelope = /* @__PURE__ */ new Set([voucher.payer]);
  return Array.from(envelope).map((addr) => withPrefix2(addr));
};
var UnableToDetermineMessageEncodingTypeForSignerAddress = class extends Error {
  constructor(signerAddress) {
    const msg = `
        Encode Message From Signable Error: Unable to determine message encoding for signer addresss: ${signerAddress}. 
        Please ensure the address: ${signerAddress} is intended to sign the given transaction as specified by the transaction signable.
      `.trim();
    super(msg);
    this.name = "Unable To Determine Message Encoding For Signer Addresss";
  }
};
var encodeMessageFromSignable = (signable, signerAddress) => {
  let payloadSigners = findPayloadSigners(signable.voucher);
  let envelopeSigners = findEnvelopeSigners(signable.voucher);
  const isPayloadSigner = payloadSigners.includes(withPrefix2(signerAddress));
  const isEnvelopeSigner = envelopeSigners.includes(withPrefix2(signerAddress));
  if (!isPayloadSigner && !isEnvelopeSigner) {
    throw new UnableToDetermineMessageEncodingTypeForSignerAddress(signerAddress);
  }
  const message = {
    cadence: signable.voucher.cadence,
    refBlock: signable.voucher.refBlock,
    computeLimit: signable.voucher.computeLimit,
    arguments: signable.voucher.arguments,
    proposalKey: {
      ...signable.voucher.proposalKey,
      address: sansPrefix(signable.voucher.proposalKey.address)
    },
    payer: sansPrefix(signable.voucher.payer),
    authorizers: signable.voucher.authorizers.map(sansPrefix),
    payloadSigs: signable.voucher.payloadSigs.map((ps2) => ({
      ...ps2,
      address: sansPrefix(ps2.address)
    }))
  };
  return isPayloadSigner ? encodeTransactionPayload(message) : encodeTransactionEnvelope(message);
};
function validator(cb) {
  return update2("ix.validators", (validators) => Array.isArray(validators) ? [...validators, cb] : [cb]);
}
function atBlockHeight(height) {
  return pipe2([(ix) => {
    ix.block.height = height;
    return ix;
  }, validator((ix) => {
    if (typeof ix.block.isSealed === "boolean")
      throw new Error("Unable to specify both block height and isSealed.");
    if (ix.block.id)
      throw new Error("Unable to specify both block height and block id.");
    return ix;
  })]);
}
function atBlockId(id2) {
  return pipe2([(ix) => {
    ix.block.id = id2;
    return Ok(ix);
  }, validator((ix, _ref) => {
    let {
      Ok: Ok2,
      Bad: Bad2
    } = _ref;
    if (isGetAccount(ix))
      return Bad2(ix, "Unable to specify a block id with a Get Account interaction.");
    if (typeof ix.block.isSealed === "boolean")
      return Bad2(ix, "Unable to specify both block id and isSealed.");
    if (ix.block.height)
      return Bad2(ix, "Unable to specify both block id and block height.");
    return Ok2(ix);
  })]);
}
function atLatestBlock() {
  let isSealed2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
  return pipe2([(ix) => {
    ix.block.isSealed = isSealed2;
    return ix;
  }, validator((ix) => {
    if (ix.block.id)
      throw new Error("Unable to specify both block finality and block id.");
    if (ix.block.height)
      throw new Error("Unable to specify both block finality and block height.");
    return ix;
  })]);
}
function createAccount(context) {
  async function account2(address) {
    let {
      height,
      id: id2,
      isSealed: isSealed2
    } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let opts = arguments.length > 2 ? arguments[2] : void 0;
    invariant(!(id2 && height || id2 && isSealed2 || height && isSealed2), `Method: account -- Only one of the following parameters can be provided: id, height, isSealed`);
    if (id2)
      return await createSend(context)([getAccount(address), atBlockId(id2)], opts).then(decodeResponse);
    if (height)
      return await createSend(context)([getAccount(address), atBlockHeight(height)], opts).then(decodeResponse);
    return await createSend(context)([getAccount(address), atLatestBlock(isSealed2 ?? false)], opts).then(decodeResponse);
  }
  return account2;
}
var account = withGlobalContext(createAccount);
function createBlock(context) {
  async function block2() {
    let {
      sealed = false,
      id: id2,
      height
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    invariant(!(sealed && id2 || sealed && height), `Method: block -- Cannot pass "sealed" with "id" or "height"`);
    invariant(!(id2 && height), `Method: block -- Cannot pass "id" and "height" simultaneously`);
    if (id2)
      return await createSend(context)([getBlock(), atBlockId(id2)], opts).then(decodeResponse);
    if (height)
      return await createSend(context)([getBlock(), atBlockHeight(height)], opts).then(decodeResponse);
    return await createSend(context)([getBlock(sealed)], opts).then(decodeResponse);
  }
  return block2;
}
var block = withGlobalContext(createBlock);
function getNodeVersionInfo() {
  return pipe2([makeGetNodeVerionInfo, (ix) => {
    return Ok(ix);
  }]);
}
async function nodeVersionInfo() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return await send3([getNodeVersionInfo()], opts).then(decodeResponse);
}
function authorizations() {
  let ax = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return pipe2(ax.map((authz2) => {
    return prepAccount(authz2, {
      role: TransactionRole.AUTHORIZER
    });
  }));
}
function authorization(addr, signingFunction, keyId, sequenceNum) {
  return {
    addr,
    signingFunction,
    keyId,
    sequenceNum
  };
}
function getEvents(eventType, start, end) {
  return pipe2([makeGetEvents, (ix) => {
    ix.events.eventType = eventType;
    ix.events.start = start;
    ix.events.end = end;
    return Ok(ix);
  }]);
}
function getEventsAtBlockHeightRange(eventType, startHeight, endHeight) {
  return pipe2([makeGetEvents, (ix) => {
    ix.events.eventType = eventType;
    ix.events.start = startHeight;
    ix.events.end = endHeight;
    return Ok(ix);
  }]);
}
function getEventsAtBlockIds(eventType, blockIds) {
  return pipe2([makeGetEvents, (ix) => {
    ix.events.eventType = eventType;
    ix.events.blockIds = blockIds;
    return Ok(ix);
  }]);
}
function getBlockHeader() {
  let isSealed2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
  return pipe2([makeGetBlockHeader, (ix) => {
    ix.block.isSealed = isSealed2;
    return Ok(ix);
  }]);
}
function getCollection() {
  let id2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
  return pipe2([makeGetCollection, (ix) => {
    ix.collection.id = id2;
    return ix;
  }]);
}
function getTransactionStatus(transactionId) {
  return pipe2([makeGetTransactionStatus, (ix) => {
    ix.transaction.id = transactionId;
    return Ok(ix);
  }]);
}
function getTransaction(id2) {
  return pipe2([makeGetTransaction, (ix) => {
    ix.transaction.id = id2;
    return Ok(ix);
  }]);
}
function getNetworkParameters() {
  return pipe2([makeGetNetworkParameters, (ix) => {
    return Ok(ix);
  }]);
}
function limit(limit2) {
  return (ix) => {
    ix.message.computeLimit = limit2;
    return ix;
  };
}
function args(ax) {
  return pipe2(ax.map(makeArgument));
}
function arg(value, xform) {
  return {
    value,
    xform
  };
}
function proposer(authz2) {
  return prepAccount(authz2, {
    role: TransactionRole.PROPOSER
  });
}
function payer() {
  let ax = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  if (!Array.isArray(ax))
    ax = [ax];
  return pipe2(ax.map((authz2) => {
    return prepAccount(authz2, {
      role: TransactionRole.PAYER
    });
  }));
}
function ping() {
  return makePing;
}
function ref(refBlock) {
  return pipe2([(ix) => {
    ix.message.refBlock = refBlock;
    return Ok(ix);
  }]);
}
function script() {
  return pipe2([makeScript, put2("ix.cadence", template(...arguments))]);
}
var DEFAULT_SCRIPT_ACCOUNTS = [];
var DEFAULT_REF = null;
function transaction() {
  return pipe2([makeTransaction, put2("ix.cadence", template(...arguments)), (ix) => {
    ix.message.refBlock = ix.message.refBlock || DEFAULT_REF;
    ix.authorizations = ix.authorizations || DEFAULT_SCRIPT_ACCOUNTS;
    return Ok(ix);
  }]);
}
function invariant2() {
  for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++) {
    args2[_key] = arguments[_key];
  }
  if (args2.length > 1) {
    const [predicate, message] = args2;
    return invariant2((ix, _ref) => {
      let {
        Ok: Ok2,
        Bad: Bad2
      } = _ref;
      return predicate ? Ok2(ix) : Bad2(ix, message);
    });
  }
  const [fn3] = args2;
  return (ix) => fn3(ix, {
    Ok,
    Bad
  });
}
function voucherIntercept(fn3) {
  return put2("ix.voucher-intercept", fn3);
}
function subscribeEvents(_ref) {
  let {
    startBlockId,
    startHeight,
    eventTypes,
    addresses,
    contracts,
    heartbeatInterval
  } = _ref;
  invariant(!(startBlockId && startHeight), `SDK Subscribe Events Error: Cannot set both startBlockId and startHeight.`);
  return pipe2([makeSubscribeEvents, (ix) => {
    ix.subscribeEvents.startBlockId = startBlockId ?? null;
    ix.subscribeEvents.startHeight = startHeight ?? null;
    ix.subscribeEvents.eventTypes = eventTypes ?? null;
    ix.subscribeEvents.addresses = addresses ?? null;
    ix.subscribeEvents.contracts = contracts ?? null;
    ix.subscribeEvents.heartbeatInterval = heartbeatInterval ?? null;
    return Ok(ix);
  }]);
}
function mockAccountResponse(ix) {
  let numberOfKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
  invariant(ix.account, "mockAccountResponse(ix) -- ix.account is missing", ix);
  invariant(ix.account.addr, "mockAccountResponse(ix) -- ix.account.addr is missing", ix);
  const address = ix.account.addr;
  return {
    account: {
      addr: address,
      keys: Array.from({
        length: numberOfKeys
      }, (_6, i6) => ({
        index: i6,
        sequenceNumber: 42
      }))
    }
  };
}
function mockGetBlockResponse(ix) {
  return {
    tag: "GET_BLOCK",
    block: {
      id: "32"
    }
  };
}
var identity2 = (v11) => v11;
function mockSend() {
  let fallback2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : identity2;
  return async function execSend(ix) {
    ix = await ix;
    switch (true) {
      case isGetAccount(ix):
        return mockAccountResponse(ix);
      case isGetBlock(ix):
        return mockGetBlockResponse();
      default:
        return fallback2(ix);
    }
  };
}
var idof2 = (acct) => `${withPrefix2(acct.addr)}-${acct.keyId}`;
function sig(opts) {
  return ["SIGNATURE", opts.addr, opts.keyId].join(".");
}
function authzFn() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return function(account2) {
    const acct = {
      ...account2,
      ...opts,
      resolve: null,
      signingFunction: opts.signingFunction || account2.signingFunction || fallbackSigningFunction
    };
    return acct;
    function fallbackSigningFunction(_signable) {
      return {
        addr: acct.addr,
        keyId: acct.keyId,
        signature: sig(acct)
      };
    }
  };
}
function authzResolve() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return function(account2) {
    const {
      tempId,
      ...rest
    } = opts;
    return {
      ...account2,
      tempId: tempId || "WITH_RESOLVE",
      resolve: authzFn(rest)
    };
  };
}
var ROLE = {
  proposer: false,
  authorizer: false,
  payer: false
};
function authzResolveMany() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
    authorizations: []
  };
  return function(account2) {
    const tempId = opts.tempId || "AUTHZ_RESOLVE_MANY";
    return {
      ...account2,
      tempId,
      resolve: () => [opts.proposer && authzFn(opts.proposer)({
        role: {
          ...ROLE,
          proposer: true
        }
      }), ...opts.authorizations.map(authzFn).map((d8) => d8({
        role: {
          ...ROLE,
          authorizer: true
        }
      })), opts.payer && authzFn(opts.payer)({
        role: {
          ...ROLE,
          payer: true
        }
      })].filter(Boolean)
    };
  };
}
function authzDeepResolveMany() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
    authorizations: []
  };
  let depth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  return function(account2) {
    const tempId = opts.tempId || "AUTHZ_DEEP_RESOLVE_MANY";
    return {
      ...account2,
      tempId,
      resolve: depth > 0 ? authzDeepResolveMany(opts, depth - 1)(account2).resolve : authzResolveMany(opts)(account2).resolve
    };
  };
}
var run = function() {
  let fns = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return build([ref("123"), ...fns]).then(resolve);
};
var index = Object.freeze({
  __proto__: null,
  authzDeepResolveMany,
  authzFn,
  authzResolve,
  authzResolveMany,
  idof: idof2,
  mockSend,
  run,
  sig
});
var flowMainnet = {
  "flow.network": "mainnet",
  "accessNode.api": "https://rest-mainnet.onflow.org",
  "discovery.wallet": "https://fcl-discovery.onflow.org/authn"
};
var flowTestnet = {
  "flow.network": "testnet",
  "accessNode.api": "https://rest-testnet.onflow.org",
  "discovery.wallet": "https://fcl-discovery.onflow.org/testnet/authn"
};
var flowEmulator = {
  "flow.network": "local",
  "accessNode.api": "http://127.0.0.1:8888",
  "discovery.wallet": "http://localhost:8701/fcl/authn"
};
function createContext(_ref) {
  let {
    accessNodeUrl,
    transport,
    computeLimit,
    customResolver,
    customDecoders = {},
    contracts = {}
  } = _ref;
  if (!transport) {
    throw new Error("Transport must be provided to create SDK context");
  }
  if (typeof transport.send !== "function") {
    throw new Error("Invalid transport provided, must implement send method");
  }
  if (typeof transport.subscribe !== "function") {
    throw new Error("Invalid transport provided, must implement subscribe method");
  }
  if (!accessNodeUrl) {
    throw new Error("Access node must be provided to create SDK context");
  }
  if (typeof accessNodeUrl !== "string") {
    throw new Error("Access node must be a string URL");
  }
  if (typeof computeLimit !== "number" || computeLimit <= 0) {
    throw new Error("Compute limit must be a positive number");
  }
  return {
    transport,
    accessNodeUrl,
    computeLimit,
    customResolver,
    customDecoders,
    debug: {},
    contracts,
    legacyContractIdentifiers: {}
  };
}
function createSdkClient(options) {
  const context = createContext(options);
  return {
    send: createSend(context),
    subscribe: createSubscribe(context),
    subscribeRaw: createSubscribeRaw(context),
    account: createAccount(context),
    block: createBlock(context),
    resolve: createResolve(context),
    decode: createDecode(context)
  };
}
var params = (params2) => log.deprecate({
  pkg: "FCL/SDK",
  message: `The params builder has been removed from the Flow JS-SDK/FCL.`,
  transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params",
  level: LEVELS.error
});
var param = (params2) => log.deprecate({
  pkg: "FCL/SDK",
  message: `The param builder has been removed from the Flow JS-SDK/FCL.`,
  transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params",
  level: LEVELS.error
});

// node_modules/@onflow/fcl-core/dist/fcl-core.module.js
var import_cross_fetch2 = __toESM(require_browser_ponyfill());
var import_grpc_web = __toESM(require_grpc_web_client_umd());
var import_sha32 = __toESM(require_sha3());

// node_modules/@onflow/util-semver/dist/index.module.js
var numeric = /^[0-9]+$/;
var compareIdentifiers = function compareIdentifiers2(a4, b5) {
  var anum = numeric.test(a4);
  var bnum = numeric.test(b5);
  if (anum && bnum) {
    a4 = +a4;
    b5 = +b5;
  }
  return a4 === b5 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a4 < b5 ? -1 : 1;
};
var VERSION_REGEX = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
var compare = function compare2(a4, b5) {
  if (typeof a4 !== "string" || typeof b5 !== "string")
    throw new Error("Invalid input");
  var vsnA = a4.match(VERSION_REGEX);
  var vsnB = b5.match(VERSION_REGEX);
  if (!vsnA || !vsnB)
    throw new Error("Invalid input");
  for (var i6 = 1; i6 <= 3; i6++) {
    if (parseInt(vsnA[i6]) > parseInt(vsnB[i6]))
      return 1;
    if (parseInt(vsnA[i6]) < parseInt(vsnB[i6]))
      return -1;
  }
  if (vsnA[4] && vsnB[4]) {
    var prereleaseA = (vsnA[4] || "").split(".");
    var prereleaseB = (vsnB[4] || "").split(".");
    for (var _i3 = 0; _i3 < Math.max(prereleaseA.length, prereleaseB.length); _i3++) {
      if (prereleaseA[_i3] === void 0)
        return -1;
      if (prereleaseB[_i3] === void 0)
        return 1;
      var cmp = compareIdentifiers(prereleaseA[_i3], prereleaseB[_i3]);
      if (cmp !== 0)
        return cmp;
    }
  }
  return 0;
};

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default2 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate2(uuid) {
  return typeof uuid === "string" && regex_default2.test(uuid);
}
var validate_default2 = validate2;

// node_modules/uuid/dist/esm-browser/parse.js
function parse2(uuid) {
  if (!validate_default2(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v11;
  return Uint8Array.of((v11 = parseInt(uuid.slice(0, 8), 16)) >>> 24, v11 >>> 16 & 255, v11 >>> 8 & 255, v11 & 255, (v11 = parseInt(uuid.slice(9, 13), 16)) >>> 8, v11 & 255, (v11 = parseInt(uuid.slice(14, 18), 16)) >>> 8, v11 & 255, (v11 = parseInt(uuid.slice(19, 23), 16)) >>> 8, v11 & 255, (v11 = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255, v11 / 4294967296 & 255, v11 >>> 24 & 255, v11 >>> 16 & 255, v11 >>> 8 & 255, v11 & 255);
}
var parse_default2 = parse2;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex2 = [];
for (let i6 = 0; i6 < 256; ++i6) {
  byteToHex2.push((i6 + 256).toString(16).slice(1));
}
function unsafeStringify2(arr, offset = 0) {
  return (byteToHex2[arr[offset + 0]] + byteToHex2[arr[offset + 1]] + byteToHex2[arr[offset + 2]] + byteToHex2[arr[offset + 3]] + "-" + byteToHex2[arr[offset + 4]] + byteToHex2[arr[offset + 5]] + "-" + byteToHex2[arr[offset + 6]] + byteToHex2[arr[offset + 7]] + "-" + byteToHex2[arr[offset + 8]] + byteToHex2[arr[offset + 9]] + "-" + byteToHex2[arr[offset + 10]] + byteToHex2[arr[offset + 11]] + byteToHex2[arr[offset + 12]] + byteToHex2[arr[offset + 13]] + byteToHex2[arr[offset + 14]] + byteToHex2[arr[offset + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues2;
var rnds82 = new Uint8Array(16);
function rng2() {
  if (!getRandomValues2) {
    if (typeof crypto === "undefined" || !crypto.getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    getRandomValues2 = crypto.getRandomValues.bind(crypto);
  }
  return getRandomValues2(rnds82);
}

// node_modules/uuid/dist/esm-browser/md5.js
function md52(bytes) {
  const words = uint8ToUint32(bytes);
  const md5Bytes = wordsToMd52(words, bytes.length * 8);
  return uint32ToUint8(md5Bytes);
}
function uint32ToUint8(input) {
  const bytes = new Uint8Array(input.length * 4);
  for (let i6 = 0; i6 < input.length * 4; i6++) {
    bytes[i6] = input[i6 >> 2] >>> i6 % 4 * 8 & 255;
  }
  return bytes;
}
function getOutputLength2(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd52(x7, len) {
  const xpad = new Uint32Array(getOutputLength2(len)).fill(0);
  xpad.set(x7);
  xpad[len >> 5] |= 128 << len % 32;
  xpad[xpad.length - 1] = len;
  x7 = xpad;
  let a4 = 1732584193;
  let b5 = -271733879;
  let c8 = -1732584194;
  let d8 = 271733878;
  for (let i6 = 0; i6 < x7.length; i6 += 16) {
    const olda = a4;
    const oldb = b5;
    const oldc = c8;
    const oldd = d8;
    a4 = md5ff2(a4, b5, c8, d8, x7[i6], 7, -680876936);
    d8 = md5ff2(d8, a4, b5, c8, x7[i6 + 1], 12, -389564586);
    c8 = md5ff2(c8, d8, a4, b5, x7[i6 + 2], 17, 606105819);
    b5 = md5ff2(b5, c8, d8, a4, x7[i6 + 3], 22, -1044525330);
    a4 = md5ff2(a4, b5, c8, d8, x7[i6 + 4], 7, -176418897);
    d8 = md5ff2(d8, a4, b5, c8, x7[i6 + 5], 12, 1200080426);
    c8 = md5ff2(c8, d8, a4, b5, x7[i6 + 6], 17, -1473231341);
    b5 = md5ff2(b5, c8, d8, a4, x7[i6 + 7], 22, -45705983);
    a4 = md5ff2(a4, b5, c8, d8, x7[i6 + 8], 7, 1770035416);
    d8 = md5ff2(d8, a4, b5, c8, x7[i6 + 9], 12, -1958414417);
    c8 = md5ff2(c8, d8, a4, b5, x7[i6 + 10], 17, -42063);
    b5 = md5ff2(b5, c8, d8, a4, x7[i6 + 11], 22, -1990404162);
    a4 = md5ff2(a4, b5, c8, d8, x7[i6 + 12], 7, 1804603682);
    d8 = md5ff2(d8, a4, b5, c8, x7[i6 + 13], 12, -40341101);
    c8 = md5ff2(c8, d8, a4, b5, x7[i6 + 14], 17, -1502002290);
    b5 = md5ff2(b5, c8, d8, a4, x7[i6 + 15], 22, 1236535329);
    a4 = md5gg2(a4, b5, c8, d8, x7[i6 + 1], 5, -165796510);
    d8 = md5gg2(d8, a4, b5, c8, x7[i6 + 6], 9, -1069501632);
    c8 = md5gg2(c8, d8, a4, b5, x7[i6 + 11], 14, 643717713);
    b5 = md5gg2(b5, c8, d8, a4, x7[i6], 20, -373897302);
    a4 = md5gg2(a4, b5, c8, d8, x7[i6 + 5], 5, -701558691);
    d8 = md5gg2(d8, a4, b5, c8, x7[i6 + 10], 9, 38016083);
    c8 = md5gg2(c8, d8, a4, b5, x7[i6 + 15], 14, -660478335);
    b5 = md5gg2(b5, c8, d8, a4, x7[i6 + 4], 20, -405537848);
    a4 = md5gg2(a4, b5, c8, d8, x7[i6 + 9], 5, 568446438);
    d8 = md5gg2(d8, a4, b5, c8, x7[i6 + 14], 9, -1019803690);
    c8 = md5gg2(c8, d8, a4, b5, x7[i6 + 3], 14, -187363961);
    b5 = md5gg2(b5, c8, d8, a4, x7[i6 + 8], 20, 1163531501);
    a4 = md5gg2(a4, b5, c8, d8, x7[i6 + 13], 5, -1444681467);
    d8 = md5gg2(d8, a4, b5, c8, x7[i6 + 2], 9, -51403784);
    c8 = md5gg2(c8, d8, a4, b5, x7[i6 + 7], 14, 1735328473);
    b5 = md5gg2(b5, c8, d8, a4, x7[i6 + 12], 20, -1926607734);
    a4 = md5hh2(a4, b5, c8, d8, x7[i6 + 5], 4, -378558);
    d8 = md5hh2(d8, a4, b5, c8, x7[i6 + 8], 11, -2022574463);
    c8 = md5hh2(c8, d8, a4, b5, x7[i6 + 11], 16, 1839030562);
    b5 = md5hh2(b5, c8, d8, a4, x7[i6 + 14], 23, -35309556);
    a4 = md5hh2(a4, b5, c8, d8, x7[i6 + 1], 4, -1530992060);
    d8 = md5hh2(d8, a4, b5, c8, x7[i6 + 4], 11, 1272893353);
    c8 = md5hh2(c8, d8, a4, b5, x7[i6 + 7], 16, -155497632);
    b5 = md5hh2(b5, c8, d8, a4, x7[i6 + 10], 23, -1094730640);
    a4 = md5hh2(a4, b5, c8, d8, x7[i6 + 13], 4, 681279174);
    d8 = md5hh2(d8, a4, b5, c8, x7[i6], 11, -358537222);
    c8 = md5hh2(c8, d8, a4, b5, x7[i6 + 3], 16, -722521979);
    b5 = md5hh2(b5, c8, d8, a4, x7[i6 + 6], 23, 76029189);
    a4 = md5hh2(a4, b5, c8, d8, x7[i6 + 9], 4, -640364487);
    d8 = md5hh2(d8, a4, b5, c8, x7[i6 + 12], 11, -421815835);
    c8 = md5hh2(c8, d8, a4, b5, x7[i6 + 15], 16, 530742520);
    b5 = md5hh2(b5, c8, d8, a4, x7[i6 + 2], 23, -995338651);
    a4 = md5ii2(a4, b5, c8, d8, x7[i6], 6, -198630844);
    d8 = md5ii2(d8, a4, b5, c8, x7[i6 + 7], 10, 1126891415);
    c8 = md5ii2(c8, d8, a4, b5, x7[i6 + 14], 15, -1416354905);
    b5 = md5ii2(b5, c8, d8, a4, x7[i6 + 5], 21, -57434055);
    a4 = md5ii2(a4, b5, c8, d8, x7[i6 + 12], 6, 1700485571);
    d8 = md5ii2(d8, a4, b5, c8, x7[i6 + 3], 10, -1894986606);
    c8 = md5ii2(c8, d8, a4, b5, x7[i6 + 10], 15, -1051523);
    b5 = md5ii2(b5, c8, d8, a4, x7[i6 + 1], 21, -2054922799);
    a4 = md5ii2(a4, b5, c8, d8, x7[i6 + 8], 6, 1873313359);
    d8 = md5ii2(d8, a4, b5, c8, x7[i6 + 15], 10, -30611744);
    c8 = md5ii2(c8, d8, a4, b5, x7[i6 + 6], 15, -1560198380);
    b5 = md5ii2(b5, c8, d8, a4, x7[i6 + 13], 21, 1309151649);
    a4 = md5ii2(a4, b5, c8, d8, x7[i6 + 4], 6, -145523070);
    d8 = md5ii2(d8, a4, b5, c8, x7[i6 + 11], 10, -1120210379);
    c8 = md5ii2(c8, d8, a4, b5, x7[i6 + 2], 15, 718787259);
    b5 = md5ii2(b5, c8, d8, a4, x7[i6 + 9], 21, -343485551);
    a4 = safeAdd2(a4, olda);
    b5 = safeAdd2(b5, oldb);
    c8 = safeAdd2(c8, oldc);
    d8 = safeAdd2(d8, oldd);
  }
  return Uint32Array.of(a4, b5, c8, d8);
}
function uint8ToUint32(input) {
  if (input.length === 0) {
    return new Uint32Array();
  }
  const output = new Uint32Array(getOutputLength2(input.length * 8)).fill(0);
  for (let i6 = 0; i6 < input.length; i6++) {
    output[i6 >> 2] |= (input[i6] & 255) << i6 % 4 * 8;
  }
  return output;
}
function safeAdd2(x7, y6) {
  const lsw = (x7 & 65535) + (y6 & 65535);
  const msw = (x7 >> 16) + (y6 >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft2(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn2(q3, a4, b5, x7, s4, t2) {
  return safeAdd2(bitRotateLeft2(safeAdd2(safeAdd2(a4, q3), safeAdd2(x7, t2)), s4), b5);
}
function md5ff2(a4, b5, c8, d8, x7, s4, t2) {
  return md5cmn2(b5 & c8 | ~b5 & d8, a4, b5, x7, s4, t2);
}
function md5gg2(a4, b5, c8, d8, x7, s4, t2) {
  return md5cmn2(b5 & d8 | c8 & ~d8, a4, b5, x7, s4, t2);
}
function md5hh2(a4, b5, c8, d8, x7, s4, t2) {
  return md5cmn2(b5 ^ c8 ^ d8, a4, b5, x7, s4, t2);
}
function md5ii2(a4, b5, c8, d8, x7, s4, t2) {
  return md5cmn2(c8 ^ (b5 | ~d8), a4, b5, x7, s4, t2);
}
var md5_default2 = md52;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes2(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = new Uint8Array(str.length);
  for (let i6 = 0; i6 < str.length; ++i6) {
    bytes[i6] = str.charCodeAt(i6);
  }
  return bytes;
}
var DNS2 = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL3 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v352(version2, hash, value, namespace, buf, offset) {
  const valueBytes = typeof value === "string" ? stringToBytes2(value) : value;
  const namespaceBytes = typeof namespace === "string" ? parse_default2(namespace) : namespace;
  if (typeof namespace === "string") {
    namespace = parse_default2(namespace);
  }
  if ((namespace == null ? void 0 : namespace.length) !== 16) {
    throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
  }
  let bytes = new Uint8Array(16 + valueBytes.length);
  bytes.set(namespaceBytes);
  bytes.set(valueBytes, namespaceBytes.length);
  bytes = hash(bytes);
  bytes[6] = bytes[6] & 15 | version2;
  bytes[8] = bytes[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i6 = 0; i6 < 16; ++i6) {
      buf[offset + i6] = bytes[i6];
    }
    return buf;
  }
  return unsafeStringify2(bytes);
}

// node_modules/uuid/dist/esm-browser/v3.js
function v32(value, namespace, buf, offset) {
  return v352(48, md5_default2, value, namespace, buf, offset);
}
v32.DNS = DNS2;
v32.URL = URL3;

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID2 = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default2 = { randomUUID: randomUUID2 };

// node_modules/uuid/dist/esm-browser/v4.js
function v42(options, buf, offset) {
  var _a2;
  if (native_default2.randomUUID && !buf && !options) {
    return native_default2.randomUUID();
  }
  options = options || {};
  const rnds = options.random ?? ((_a2 = options.rng) == null ? void 0 : _a2.call(options)) ?? rng2();
  if (rnds.length < 16) {
    throw new Error("Random bytes length must be >= 16");
  }
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    if (offset < 0 || offset + 16 > buf.length) {
      throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
    }
    for (let i6 = 0; i6 < 16; ++i6) {
      buf[offset + i6] = rnds[i6];
    }
    return buf;
  }
  return unsafeStringify2(rnds);
}
var v4_default2 = v42;

// node_modules/uuid/dist/esm-browser/sha1.js
function f2(s4, x7, y6, z7) {
  switch (s4) {
    case 0:
      return x7 & y6 ^ ~x7 & z7;
    case 1:
      return x7 ^ y6 ^ z7;
    case 2:
      return x7 & y6 ^ x7 & z7 ^ y6 & z7;
    case 3:
      return x7 ^ y6 ^ z7;
  }
}
function ROTL2(x7, n6) {
  return x7 << n6 | x7 >>> 32 - n6;
}
function sha12(bytes) {
  const K7 = [1518500249, 1859775393, 2400959708, 3395469782];
  const H3 = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  const newBytes = new Uint8Array(bytes.length + 1);
  newBytes.set(bytes);
  newBytes[bytes.length] = 128;
  bytes = newBytes;
  const l8 = bytes.length / 4 + 2;
  const N14 = Math.ceil(l8 / 16);
  const M7 = new Array(N14);
  for (let i6 = 0; i6 < N14; ++i6) {
    const arr = new Uint32Array(16);
    for (let j6 = 0; j6 < 16; ++j6) {
      arr[j6] = bytes[i6 * 64 + j6 * 4] << 24 | bytes[i6 * 64 + j6 * 4 + 1] << 16 | bytes[i6 * 64 + j6 * 4 + 2] << 8 | bytes[i6 * 64 + j6 * 4 + 3];
    }
    M7[i6] = arr;
  }
  M7[N14 - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M7[N14 - 1][14] = Math.floor(M7[N14 - 1][14]);
  M7[N14 - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i6 = 0; i6 < N14; ++i6) {
    const W5 = new Uint32Array(80);
    for (let t2 = 0; t2 < 16; ++t2) {
      W5[t2] = M7[i6][t2];
    }
    for (let t2 = 16; t2 < 80; ++t2) {
      W5[t2] = ROTL2(W5[t2 - 3] ^ W5[t2 - 8] ^ W5[t2 - 14] ^ W5[t2 - 16], 1);
    }
    let a4 = H3[0];
    let b5 = H3[1];
    let c8 = H3[2];
    let d8 = H3[3];
    let e3 = H3[4];
    for (let t2 = 0; t2 < 80; ++t2) {
      const s4 = Math.floor(t2 / 20);
      const T7 = ROTL2(a4, 5) + f2(s4, b5, c8, d8) + e3 + K7[s4] + W5[t2] >>> 0;
      e3 = d8;
      d8 = c8;
      c8 = ROTL2(b5, 30) >>> 0;
      b5 = a4;
      a4 = T7;
    }
    H3[0] = H3[0] + a4 >>> 0;
    H3[1] = H3[1] + b5 >>> 0;
    H3[2] = H3[2] + c8 >>> 0;
    H3[3] = H3[3] + d8 >>> 0;
    H3[4] = H3[4] + e3 >>> 0;
  }
  return Uint8Array.of(H3[0] >> 24, H3[0] >> 16, H3[0] >> 8, H3[0], H3[1] >> 24, H3[1] >> 16, H3[1] >> 8, H3[1], H3[2] >> 24, H3[2] >> 16, H3[2] >> 8, H3[2], H3[3] >> 24, H3[3] >> 16, H3[3] >> 8, H3[3], H3[4] >> 24, H3[4] >> 16, H3[4] >> 8, H3[4]);
}
var sha1_default2 = sha12;

// node_modules/uuid/dist/esm-browser/v5.js
function v52(value, namespace, buf, offset) {
  return v352(80, sha1_default2, value, namespace, buf, offset);
}
v52.DNS = DNS2;
v52.URL = URL3;

// node_modules/@onflow/fcl-core/dist/fcl-core.module.js
var VERSION = "1.21.1";
var is2 = (type) => (d8) => typeof d8 === type;
var isRequired = (d8) => d8 != null;
var isObject3 = is2("object");
var isString3 = is2("string");
var isFunc = is2("function");
var isNumber3 = is2("number");
function normalizeArgs(ax) {
  if (isFunc(ax))
    return ax(arg, types_module_exports);
  return [];
}
async function pre(context, type, opts) {
  invariant(isRequired(opts), `${type}(opts) -- opts is required`);
  invariant(isObject3(opts), `${type}(opts) -- opts must be an object`);
  invariant(!(opts.cadence && opts.template), `${type}({ template, cadence }) -- cannot pass both cadence and template`);
  invariant(isRequired(opts.cadence || (opts == null ? void 0 : opts.template)), `${type}({ cadence }) -- cadence is required`);
  invariant(isString3(opts.cadence) || (opts == null ? void 0 : opts.template), `${type}({ cadence }) -- cadence must be a string`);
  invariant(await context.config.get("accessNode.api"), `${type}(opts) -- Required value for "accessNode.api" not defined in config. See: ${"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/src/exec/query.md#configuration"}`);
}
async function preMutate(context, opts) {
  return pre(context, "mutate", opts);
}
async function preQuery(context, opts) {
  return pre(context, "query", opts);
}
async function httpDocumentResolver(_ref) {
  let {
    url
  } = _ref;
  invariant(typeof url !== "undefined", "retrieve({ url }) -- url must be defined");
  let res;
  try {
    res = await (0, import_cross_fetch2.default)(url);
  } catch (e3) {
    throw new Error("httpDocumentResolver Error: Failed to retrieve document.");
  }
  let document2 = res.ok ? await res.json() : null;
  return document2;
}
var DOCUMENT_RESOLVERS = /* @__PURE__ */ new Map([["http", httpDocumentResolver], ["https", httpDocumentResolver]]);
async function retrieve(context, _ref2) {
  let {
    url
  } = _ref2;
  invariant(typeof url !== "undefined", "retrieve({ url }) -- url must be defined");
  invariant(typeof url === "string", "retrieve({ url }) -- url must be a string");
  const documentResolversFromConfig = await context.config.where(/^document\.resolver\./);
  Object.keys(documentResolversFromConfig).map((key) => {
    const resolverFromConfig = documentResolversFromConfig[key];
    const resolverProtocol = key.replace(/^document\.resolver\./, "");
    DOCUMENT_RESOLVERS.set(resolverProtocol, resolverFromConfig);
  });
  const urlParts = /^(.*):\/\/([A-Za-z0-9\-\.]+)(:[0-9]+)?(.*)$/.exec(url);
  invariant(urlParts, "Failed to parse URL");
  const protocol = urlParts[1];
  invariant(urlParts, "Failed to parse URL protocol");
  const resolver = DOCUMENT_RESOLVERS.get(protocol);
  invariant(resolver, `No resolver found for protcol=${protocol}`);
  let document2 = await resolver({
    url
  });
  return document2;
}
async function deriveCadenceByNetwork100(_ref) {
  var _a2;
  let {
    network,
    template: template2
  } = _ref;
  invariant(template2.f_version === "1.0.0", "deriveCadenceByNetwork100({ template }) -- template must be version 1.0.0");
  const networkDependencies = Object.keys((_a2 = template2 == null ? void 0 : template2.data) == null ? void 0 : _a2.dependencies).map((dependencyPlaceholder) => {
    var _a3, _b;
    const dependencyNetworkContracts = Object.values((_b = (_a3 = template2 == null ? void 0 : template2.data) == null ? void 0 : _a3.dependencies) == null ? void 0 : _b[dependencyPlaceholder]);
    invariant(dependencyNetworkContracts !== void 0, `deriveCadenceByNetwork100 -- Could not find contracts for dependency placeholder: ${dependencyPlaceholder}`);
    invariant(dependencyNetworkContracts.length > 0, `deriveCadenceByNetwork100 -- Could not find contracts for dependency placeholder: ${dependencyPlaceholder}`);
    const dependencyContract = dependencyNetworkContracts[0];
    const dependencyContractForNetwork = dependencyContract == null ? void 0 : dependencyContract[network];
    invariant(dependencyContractForNetwork, `deriveCadenceByNetwork100 -- Could not find ${network} network information for dependency: ${dependencyPlaceholder}`);
    return [dependencyPlaceholder, dependencyContractForNetwork == null ? void 0 : dependencyContractForNetwork.address];
  });
  return networkDependencies.reduce((cadence, _ref2) => {
    let [placeholder, address] = _ref2;
    const regex = new RegExp("(\\b" + placeholder + "\\b)", "g");
    return cadence.replace(regex, address);
  }, template2.data.cadence);
}
function replaceStringImports(_ref) {
  let {
    cadence,
    networkDependencies
  } = _ref;
  return Object.keys(networkDependencies).reduce((c8, contractName) => {
    const address = networkDependencies[contractName];
    const regex = new RegExp(`import "\\b${contractName}\\b"`, "g");
    return c8.replace(regex, `import ${contractName} from ${address}`);
  }, cadence);
}
async function deriveCadenceByNetwork110(_ref) {
  var _a2, _b, _c2, _d, _e4, _f2;
  let {
    network,
    template: template2
  } = _ref;
  invariant(template2.f_version === "1.1.0", "deriveCadenceByNetwork110({ template }) -- template must be version 1.1.0");
  const networkDependencies = {};
  (_a2 = template2 == null ? void 0 : template2.data) == null ? void 0 : _a2.dependencies.forEach((dependency) => {
    dependency.contracts.forEach((contract) => {
      const contractName = contract.contract;
      contract.networks.forEach((net) => {
        if (net.network === network) {
          networkDependencies[contractName] = net.address;
        }
      });
      invariant(networkDependencies[contractName] !== void 0, `deriveCadenceByNetwork110 -- Could not find contracts Network Address: ${network} ${contractName}`);
    });
  });
  invariant(Object.keys(networkDependencies).length === ((_b = template2 == null ? void 0 : template2.data) == null ? void 0 : _b.dependencies.length), `deriveCadenceByNetwork110 -- Could not find contracts for import dependencies: ${networkDependencies}`);
  invariant(Object.keys(networkDependencies).length === Object.values(networkDependencies).length, `deriveCadenceByNetwork110 -- Could not find all addresses for network ${network} dependencies:  ${networkDependencies}`);
  invariant(!!((_d = (_c2 = template2 == null ? void 0 : template2.data) == null ? void 0 : _c2.cadence) == null ? void 0 : _d.body), `no cadence found -- Could not replace import dependencies: ${networkDependencies}`);
  return replaceStringImports({
    cadence: (_f2 = (_e4 = template2 == null ? void 0 : template2.data) == null ? void 0 : _e4.cadence) == null ? void 0 : _f2.body,
    networkDependencies
  });
}
async function deriveCadenceByNetwork(_ref) {
  let {
    network,
    template: template2
  } = _ref;
  invariant(network != void 0, "deriveCadenceByNetwork({ network }) -- network must be defined");
  invariant(typeof network === "string", "deriveCadenceByNetwork({ network }) -- network must be a string");
  invariant(template2 != void 0, "deriveCadenceByNetwork({ template }) -- template must be defined");
  invariant(typeof template2 === "object", "deriveCadenceByNetwork({ template }) -- template must be an object");
  invariant(template2.f_type === "InteractionTemplate", "deriveCadenceByNetwork({ template }) -- template must be an InteractionTemplate");
  switch (template2.f_version) {
    case "1.1.0":
      return await deriveCadenceByNetwork110({
        network,
        template: template2
      });
    case "1.0.0":
      return await deriveCadenceByNetwork100({
        network,
        template: template2
      });
    default:
      throw new Error("deriveCadenceByNetwork Error: Unsupported template version");
  }
}
async function fetchChainId(context) {
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const response2 = await context.sdk.send([getNetworkParameters()], opts).then(context.sdk.decode);
  return response2.chainId;
}
function createPartialGlobalFCLContext() {
  return {
    config: config2(),
    sdk: {
      send: send3,
      decode,
      subscribe: subscribe3,
      subscribeRaw,
      account,
      block,
      resolve
    }
  };
}
var chainIdCache = {};
var hasWarnedEnv = false;
function createGetChainId(context) {
  async function getChainId3() {
    let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let flowNetworkCfg = await context.config.get("flow.network");
    let envCfg = await context.config.get("env");
    if (envCfg && !hasWarnedEnv) {
      log.deprecate({
        pkg: "FCL",
        subject: 'Using the "env" configuration key for specifying the flow network',
        message: "Configuring to specify flow network is no longer required",
        transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/TRANSITIONS.md#0001-deprecate-env-config-key"
      });
      hasWarnedEnv = true;
    }
    const accessNode = opts.node || await context.config.get("accessNode.api");
    if (!accessNode) {
      if (flowNetworkCfg) {
        return flowNetworkCfg;
      } else if (envCfg) {
        return envCfg;
      }
      throw new Error(`Either the "accessNode.api" config key or opts.node must be set`);
    }
    if (chainIdCache[accessNode]) {
      try {
        return await chainIdCache[accessNode];
      } catch {
      }
    }
    if (!chainIdCache[accessNode]) {
      chainIdCache[accessNode] = fetchChainId(context, opts).catch((error) => {
        chainIdCache[accessNode] = null;
        throw error;
      });
    }
    try {
      return await chainIdCache[accessNode];
    } catch (e3) {
      if (flowNetworkCfg) {
        return flowNetworkCfg;
      } else if (envCfg) {
        return envCfg;
      }
      throw new Error(`Error getting chainId from access node - are you using the correct access node endpoint.  If running locally, is your emulator up-to-date? ${e3.message}`);
    }
  }
  return getChainId3;
}
var getChainId = createGetChainId(createPartialGlobalFCLContext());
function watchForChainIdChanges(context) {
  if (!context) {
    context = createPartialGlobalFCLContext();
  }
  return context.config.subscribe(() => {
    createGetChainId(context)({
      enableRequestLogging: false
    }).catch(() => {
    });
  });
}
async function prepTemplateOpts(context, opts) {
  if (isString3(opts == null ? void 0 : opts.template)) {
    opts.template = await retrieve(context, {
      url: opts == null ? void 0 : opts.template
    });
  }
  const cadence = opts.cadence || await deriveCadenceByNetwork({
    template: opts.template,
    network: await createGetChainId(context)(opts)
  });
  opts.cadence = cadence;
  return opts;
}
function createQueryRaw(context) {
  async function queryRaw2() {
    let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    await preQuery(context, opts);
    opts = await prepTemplateOpts(context, opts);
    return context.sdk.send([script(opts.cadence), args(normalizeArgs(opts.args || [])), atLatestBlock(opts.isSealed ?? false), opts.limit && typeof opts.limit === "number" && limit(opts.limit)]);
  }
  return queryRaw2;
}
var queryRaw = createQueryRaw(createPartialGlobalFCLContext());
function createQuery(context) {
  async function query2() {
    let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return createQueryRaw(context)(opts).then(context.sdk.decode);
  }
  return query2;
}
var query = createQuery(createPartialGlobalFCLContext());
var FCL_REDIRECT_URL_PARAM_NAME = "fcl_redirect_url";
var FCL_RESPONSE_PARAM_NAME = "fclResponseJson";
var CORE_STRATEGIES = {
  "HTTP/RPC": "HTTP/RPC",
  "HTTP/POST": "HTTP/POST",
  "IFRAME/RPC": "IFRAME/RPC",
  "POP/RPC": "POP/RPC",
  "TAB/RPC": "TAB/RPC",
  "EXT/RPC": "EXT/RPC",
  "DEEPLINK/RPC": "DEEPLINK/RPC"
};
var onMessageFromFCL = function(messageType) {
  let cb = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : () => {
  };
  const buildData = (data) => {
    var _a2;
    if (data.deprecated)
      console.warn("DEPRECATION NOTICE", data.deprecated.message);
    (_a2 = data == null ? void 0 : data.body) == null ? true : delete _a2.interaction;
    return data;
  };
  const internal = (e3) => {
    const {
      data,
      origin
    } = e3;
    if (typeof data !== "object")
      return;
    if (typeof data == null)
      return;
    if (data.type !== messageType)
      return;
    cb(buildData(data), {
      origin
    });
  };
  window.addEventListener("message", internal);
  return () => window.removeEventListener("message", internal);
};
var sendMsgToFCL = (type, msg) => {
  const data = {
    ...msg,
    type
  };
  const urlParams = new URLSearchParams(window.location.search);
  const redirectUrl = urlParams.get(FCL_REDIRECT_URL_PARAM_NAME);
  if (redirectUrl) {
    const url = new URL(redirectUrl);
    url.searchParams.append(FCL_RESPONSE_PARAM_NAME, JSON.stringify(data));
    window.location.href = url.href;
  } else if (window.location !== window.parent.location) {
    window.parent.postMessage({
      ...msg,
      type
    }, "*");
  } else if (window.opener) {
    window.opener.postMessage({
      ...msg,
      type
    }, "*");
  } else {
    throw new Error("Unable to communicate with parent FCL instance");
  }
};
var ready = function(cb) {
  onMessageFromFCL("FCL:VIEW:READY:RESPONSE", cb);
  sendMsgToFCL("FCL:VIEW:READY");
};
var close = () => {
  sendMsgToFCL("FCL:VIEW:CLOSE");
};
var approve = (data) => {
  sendMsgToFCL("FCL:VIEW:RESPONSE", {
    f_type: "PollingResponse",
    f_vsn: "1.0.0",
    status: "APPROVED",
    reason: null,
    data
  });
};
var decline = (reason) => {
  sendMsgToFCL("FCL:VIEW:RESPONSE", {
    f_type: "PollingResponse",
    f_vsn: "1.0.0",
    status: "DECLINED",
    reason,
    data: null
  });
};
var redirect = (data) => {
  sendMsgToFCL("FCL:VIEW:RESPONSE", {
    f_type: "PollingResponse",
    f_vsn: "1.0.0",
    status: "REDIRECT",
    reason: null,
    data
  });
};
var SERVICE_PRAGMA = {
  f_type: "Service",
  f_vsn: "1.0.0"
};
var IDENTITY_PRAGMA = {
  f_type: "Identity",
  f_vsn: "1.0.0"
};
var USER_PRAGMA = {
  f_type: "USER",
  f_vsn: "1.0.0"
};
var POLLING_RESPONSE_PRAGMA = {
  f_type: "PollingResponse",
  f_vsn: "1.0.0"
};
var COMPOSITE_SIGNATURE_PRAGMA = {
  f_type: "CompositeSignature",
  f_vsn: "1.0.0"
};
var CompositeSignature = class {
  constructor(addr, keyId, signature) {
    this.f_type = COMPOSITE_SIGNATURE_PRAGMA.f_type;
    this.f_vsn = COMPOSITE_SIGNATURE_PRAGMA.f_vsn;
    this.addr = withPrefix2(addr);
    this.keyId = Number(keyId);
    this.signature = signature;
  }
};
var rightPaddedHexBuffer2 = (value, pad2) => import_buffer2.Buffer.from(value.padEnd(pad2 * 2, "0"), "hex");
var leftPaddedHexBuffer2 = (value, pad2) => import_buffer2.Buffer.from(value.padStart(pad2 * 2, "0"), "hex");
var addressBuffer2 = (addr) => leftPaddedHexBuffer2(addr, 8);
var nonceBuffer = (nonce) => import_buffer2.Buffer.from(nonce, "hex");
var encodeAccountProof = function(_ref) {
  let {
    address,
    nonce,
    appIdentifier
  } = _ref;
  let includeDomainTag = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  invariant(!!address, "Encode Message For Provable Authn Error: address must be defined");
  invariant(!!nonce, "Encode Message For Provable Authn Error: nonce must be defined");
  invariant(!!appIdentifier, "Encode Message For Provable Authn Error: appIdentifier must be defined");
  invariant(nonce.length >= 64, "Encode Message For Provable Authn Error: nonce must be minimum of 32 bytes");
  const ACCOUNT_PROOF_DOMAIN_TAG = rightPaddedHexBuffer2(import_buffer2.Buffer.from("FCL-ACCOUNT-PROOF-V0.0").toString("hex"), 32);
  if (includeDomainTag) {
    return import_buffer2.Buffer.concat([ACCOUNT_PROOF_DOMAIN_TAG, encode([appIdentifier, addressBuffer2(sansPrefix(address)), nonceBuffer(nonce)])]).toString("hex");
  }
  return encode([appIdentifier, addressBuffer2(sansPrefix(address)), nonceBuffer(nonce)]).toString("hex");
};
function injectExtService(service) {
  if (service.type === "authn" && service.endpoint != null) {
    if (!Array.isArray(window.fcl_extensions)) {
      window.fcl_extensions = [];
    }
    window.fcl_extensions.push(service);
  } else {
    console.warn("Authn service is required");
  }
}
var index$2 = Object.freeze({
  __proto__: null,
  CompositeSignature,
  approve,
  close,
  decline,
  encodeAccountProof,
  encodeMessageFromSignable,
  injectExtService,
  onMessageFromFCL,
  ready,
  redirect,
  sendMsgToFCL
});
var ACCOUNT_PROOF = "ACCOUNT_PROOF";
var USER_SIGNATURE = "USER_SIGNATURE";
var validateArgs = (args2) => {
  if (args2.appIdentifier) {
    const {
      appIdentifier,
      address,
      nonce,
      signatures
    } = args2;
    invariant(isString3(appIdentifier), "verifyAccountProof({ appIdentifier }) -- appIdentifier must be a string");
    invariant(isString3(address) && sansPrefix(address).length === 16, "verifyAccountProof({ address }) -- address must be a valid address");
    invariant(/^[0-9a-f]+$/i.test(nonce), "nonce must be a hex string");
    invariant(Array.isArray(signatures) && signatures.every((sig2, i6, arr) => sig2.f_type === "CompositeSignature"), "Must include an Array of CompositeSignatures to verify");
    invariant(signatures.map((cs2) => cs2.addr).every((addr, i6, arr) => addr === arr[0]), "User signatures to be verified must be from a single account address");
    return true;
  } else {
    const {
      message,
      address,
      compSigs
    } = args2;
    invariant(/^[0-9a-f]+$/i.test(message), "Signed message must be a hex string");
    invariant(isString3(address) && sansPrefix(address).length === 16, "verifyUserSignatures({ address }) -- address must be a valid address");
    invariant(Array.isArray(compSigs) && compSigs.every((sig2, i6, arr) => sig2.f_type === "CompositeSignature"), "Must include an Array of CompositeSignatures to verify");
    invariant(compSigs.map((cs2) => cs2.addr).every((addr, i6, arr) => addr === arr[0]), "User signatures to be verified must be from a single account address");
    return true;
  }
};
var getVerifySignaturesScript = async (context, sig2, opts) => {
  const verifyFunction = sig2 === "ACCOUNT_PROOF" ? "verifyAccountProofSignatures" : "verifyUserSignatures";
  const network = await createGetChainId(context)(opts);
  const contractAddresses = {
    testnet: "0x74daa6f9c7ef24b1",
    mainnet: "0xb4b82a1c9d21d284",
    previewnet: "0x40b5b8b2ce81ea4a"
  };
  const fclCryptoContract = opts.fclCryptoContract || contractAddresses[network];
  invariant(fclCryptoContract, `${verifyFunction}({ fclCryptoContract }) -- FCLCrypto contract address is unknown for network: ${network}. Please manually specify the FCLCrypto contract address.`);
  return `
      import FCLCrypto from ${fclCryptoContract}

      access(all) fun main(
          address: Address, 
          message: String, 
          keyIndices: [Int], 
          signatures: [String]
      ): Bool {
        return FCLCrypto.${verifyFunction}(address: address, message: message, keyIndices: keyIndices, signatures: signatures)
      }
    `;
};
function createVerifyAccountProof(context) {
  async function verifyAccountProof2(appIdentifier, _ref) {
    let {
      address,
      nonce,
      signatures
    } = _ref;
    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    validateArgs({
      appIdentifier,
      address,
      nonce,
      signatures
    });
    const message = encodeAccountProof({
      address,
      nonce,
      appIdentifier
    }, false);
    const signaturesArr = [];
    const keyIndices = [];
    for (const el of signatures) {
      signaturesArr.push(el.signature);
      keyIndices.push(el.keyId.toString());
    }
    return createQuery(context)({
      cadence: await getVerifySignaturesScript(context, ACCOUNT_PROOF, opts),
      args: (arg2, t2) => [arg2(withPrefix2(address), t2.Address), arg2(message, t2.String), arg2(keyIndices, t2.Array(t2.Int)), arg2(signaturesArr, t2.Array(t2.String))]
    });
  }
  return verifyAccountProof2;
}
function createVerifyUserSignatures(context) {
  async function verifyUserSignatures3(message, compSigs) {
    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const address = withPrefix2(compSigs[0].addr);
    validateArgs({
      message,
      address,
      compSigs
    });
    const signaturesArr = [];
    const keyIndices = [];
    for (const el of compSigs) {
      signaturesArr.push(el.signature);
      keyIndices.push(el.keyId.toString());
    }
    return createQuery(context)({
      cadence: await getVerifySignaturesScript(context, USER_SIGNATURE, opts),
      args: (arg2, t2) => [arg2(address, t2.Address), arg2(message, t2.String), arg2(keyIndices, t2.Array(t2.Int)), arg2(signaturesArr, t2.Array(t2.String))]
    });
  }
  return verifyUserSignatures3;
}
var verifyAccountProof = createVerifyAccountProof(createPartialGlobalFCLContext());
var verifyUserSignatures$1 = createVerifyUserSignatures(createPartialGlobalFCLContext());
var index$1 = Object.freeze({
  __proto__: null,
  verifyAccountProof,
  verifyUserSignatures: verifyUserSignatures$1
});
var verifyUserSignatures = log.deprecate({
  pkg: "FCL",
  subject: "fcl.verifyUserSignatures()",
  message: "Please use fcl.AppUtils.verifyUserSignatures()",
  callback: function verifyUserSignatures2(message, compSigs) {
    return verifyUserSignatures$1(message, compSigs);
  }
});
function createSerialize(context) {
  const serialize2 = async function(args2) {
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const resolveFunction = opts.resolve || context.sdk.resolve;
    if (Array.isArray(args2))
      args2 = await pipe2(interaction(), args2);
    return JSON.stringify(createSignableVoucher(await resolveFunction(args2)), null, 2);
  };
  return serialize2;
}
var serialize = createSerialize(createPartialGlobalFCLContext());
var ERROR_CODE_REGEX = /\[Error Code: (\d+)\]/;
var TransactionError = class _TransactionError extends Error {
  constructor(message, code2) {
    super(message);
    this.code = code2;
    this.type = FvmErrorCode[code2];
  }
  static fromErrorMessage(errorMessage) {
    const match = errorMessage.match(ERROR_CODE_REGEX);
    const code2 = match ? parseInt(match[1], 10) : void 0;
    return new _TransactionError(errorMessage, code2 || FvmErrorCode.UNKNOWN_ERROR);
  }
};
async function configLens(context, regex) {
  return Object.fromEntries(Object.entries(await context.config.where(regex)).map((_ref) => {
    let [key, value] = _ref;
    return [key.replace(regex, ""), value];
  }));
}
var isExpired = (tx) => tx.status === 5;
var isSealed = (tx) => tx.status >= 4;
var isExecuted = (tx) => tx.status >= 3;
var isFinalized = (tx) => tx.status >= 2;
var isPending = (tx) => tx.status >= 1;
var isUnknown2 = (tx) => tx.status >= 0;
var deepEqual = (a4, b5) => {
  if (a4 === b5)
    return true;
  if (typeof a4 !== "object" || typeof b5 !== "object")
    return false;
  if (Object.keys(a4).length !== Object.keys(b5).length)
    return false;
  for (const key in a4)
    if (!deepEqual(a4[key], b5[key]))
      return false;
  return true;
};
var isDiff = (a4, b5) => {
  return !deepEqual(a4, b5);
};
var scoped = (transactionId) => {
  if (typeof transactionId === "object")
    transactionId = transactionId.transactionId;
  if (transactionId == null)
    throw new Error("transactionId required");
  return transactionId;
};
var TXID_REGEXP = /^[0-9a-fA-F]{64}$/;
var POLL = "POLL";
var TIMEOUT = "TIMEOUT";
var fetchTxStatus = async (transactionId) => {
  return send3([getTransactionStatus(transactionId)]).then(decode);
};
var makeHandlers$1 = function() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return {
    [INIT]: async (ctx) => {
      setTimeout(() => ctx.sendSelf(TIMEOUT), opts.txNotFoundTimeout);
      ctx.sendSelf(POLL);
    },
    [SUBSCRIBE]: (ctx, letter) => {
      ctx.subscribe(letter.from);
      ctx.send(letter.from, UPDATED, ctx.all());
    },
    [UNSUBSCRIBE]: (ctx, letter) => {
      ctx.unsubscribe(letter.from);
    },
    [SNAPSHOT]: async (ctx, letter) => {
      letter.reply(ctx.all());
    },
    [TIMEOUT]: async (ctx) => {
      if (Object.keys(ctx.all()).length === 0) {
        ctx.fatalError(new Error(`TX status polling failed: no transaction was found within timeout interval (${opts.txNotFoundTimeout}ms)`));
      }
    },
    [POLL]: async (ctx) => {
      const poll3 = () => setTimeout(() => ctx.sendSelf(POLL), opts.pollRate);
      let tx;
      const prevTx = ctx.all();
      try {
        tx = await fetchTxStatus(ctx.self());
      } catch (e3) {
        const isHttpNotFound = e3 instanceof HTTPRequestError && e3.statusCode === 404;
        const isGrpcNotFound = e3.code === import_grpc_web.grpc.Code.NotFound;
        if (isHttpNotFound || isGrpcNotFound) {
          return poll3();
        }
        return ctx.fatalError(e3);
      }
      if (!isSealed(tx))
        poll3();
      if (isDiff(prevTx, tx))
        ctx.broadcast(UPDATED, tx);
      ctx.merge(tx);
    }
  };
};
var spawnTransaction = function() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return (transactionId) => {
    return spawn(makeHandlers$1(opts), scoped(transactionId));
  };
};
function transaction$1(transactionId) {
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
    txNotFoundTimeout: 12500,
    pollRate: 1e3
  };
  if (!TXID_REGEXP.test(scoped(transactionId)))
    throw new Error("Invalid transactionId");
  function snapshot2() {
    return snapshoter(transactionId, spawnTransaction(opts));
  }
  function subscribe4(callback) {
    return subscriber(scoped(transactionId), spawnTransaction(opts), callback);
  }
  function once(predicate) {
    return function innerOnce() {
      let opts2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      const suppress = opts2.suppress || false;
      return new Promise((resolve2, reject) => {
        const unsub = subscribe4((txStatus, error) => {
          if ((error || txStatus.statusCode) && !suppress) {
            if (error != null) {
              reject(error);
              unsub();
            } else if (txStatus.statusCode === 1) {
              const transactionError = TransactionError.fromErrorMessage(txStatus.errorMessage);
              reject(transactionError);
              unsub();
            }
            return;
          }
          if (predicate(txStatus)) {
            resolve2(txStatus);
            unsub();
          }
        });
      });
    };
  }
  return {
    snapshot: snapshot2,
    subscribe: subscribe4,
    onceFinalized: once(isFinalized),
    onceExecuted: once(isExecuted),
    onceSealed: once(isSealed)
  };
}
transaction$1.isUnknown = isUnknown2;
transaction$1.isPending = isPending;
transaction$1.isFinalized = isFinalized;
transaction$1.isExecuted = isExecuted;
transaction$1.isSealed = isSealed;
transaction$1.isExpired = isExpired;
var FLOW_EMULATOR$1 = "local";
var registry = /* @__PURE__ */ new Map();
function createTransaction(context) {
  function transaction3(transactionId) {
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      txNotFoundTimeout: 12500,
      pollRate: 1e3
    };
    if (!TXID_REGEXP.test(scoped(transactionId)))
      throw new Error("Invalid transactionId");
    function getObservable() {
      let observable = registry.get(transactionId);
      if (!observable) {
        observable = createObservable(context, transactionId, opts);
        registry.set(transactionId, observable);
      }
      return observable;
    }
    function snapshot2() {
      return Promise.resolve(getObservable().value);
    }
    function subscribe4(onData, onError) {
      const observable = getObservable();
      const {
        unsubscribe
      } = observable.subscribe(onData, onError);
      return () => unsubscribe();
    }
    function once(predicate) {
      return function innerOnce() {
        let opts2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
          suppress: false
        };
        const suppress = opts2.suppress || false;
        return new Promise((resolve2, reject) => {
          const unsub = subscribe4((txStatus) => {
            if (txStatus.statusCode === 1) {
              const transactionError = TransactionError.fromErrorMessage(txStatus.errorMessage);
              reject(transactionError);
              unsub();
            } else if (predicate(txStatus)) {
              resolve2(txStatus);
              unsub();
            }
          }, (err) => {
            if (!suppress) {
              reject(err);
              unsub();
            }
          });
        });
      };
    }
    return {
      snapshot: snapshot2,
      subscribe: subscribe4,
      onceFinalized: once(isFinalized),
      onceExecuted: once(isExecuted),
      onceSealed: once(isSealed)
    };
  }
  transaction3.isUnknown = isUnknown;
  transaction3.isPending = isPending;
  transaction3.isFinalized = isFinalized;
  transaction3.isExecuted = isExecuted;
  transaction3.isSealed = isSealed;
  transaction3.isExpired = isExpired;
  return transaction3;
}
var transaction2 = createTransaction(createPartialGlobalFCLContext());
function createObservable(context, txId, opts) {
  const observers = /* @__PURE__ */ new Set();
  let value = {
    blockId: "",
    status: TransactionExecutionStatus.UNKNOWN,
    statusCode: 0,
    errorMessage: "",
    events: [],
    statusString: ""
  };
  init().catch(error);
  async function init() {
    const flowNetwork = await createGetChainId(context)();
    if (flowNetwork === FLOW_EMULATOR$1) {
      console.warn("Events are not supported on the Flow emulator, falling back to legacy polling.");
      fallbackLegacyPolling();
    } else {
      subscribeTransactionStatuses();
    }
  }
  function subscribeTransactionStatuses() {
    const subscription = context.sdk.subscribe({
      topic: SubscriptionTopic.TRANSACTION_STATUSES,
      args: {
        transactionId: txId
      },
      onData: (txStatus) => {
        if (isDiff(value, txStatus)) {
          value = txStatus;
          next(txStatus);
        }
        if (isSealed(txStatus)) {
          new Promise((resolve2) => setTimeout(resolve2, 0)).then(() => {
            if (isSealed(txStatus)) {
              subscription.unsubscribe();
            }
          });
        }
      },
      onError: (err) => {
        if (err instanceof SubscriptionsNotSupportedError) {
          console.warn("Failed to subscribe to transaction status updates using real-time streaming (are you using the deprecated GRPC transport?), falling back to polling.");
          fallbackLegacyPolling();
        } else {
          error(err);
        }
      }
    });
  }
  function fallbackLegacyPolling() {
    const unsubscribe = transaction$1(txId, opts).subscribe((txStatus, err) => {
      if (err) {
        error(err);
      } else if (txStatus && isDiff(value, txStatus)) {
        value = txStatus;
        next(txStatus);
        if (isSealed(txStatus)) {
          new Promise((resolve2) => setTimeout(resolve2, 0)).then(() => {
            unsubscribe();
          });
        }
      }
    });
  }
  function next(txStatus) {
    for (const observer of observers) {
      try {
        observer.onData(txStatus);
      } catch (error2) {
        console.error("Error in transaction observer", error2);
      }
    }
  }
  function error(err) {
    for (const observer of observers) {
      try {
        observer.onError(err);
      } catch (error2) {
        console.error("Error in transaction observer", error2);
      }
    }
  }
  return {
    subscribe(onData, onError) {
      const observer = {
        onData,
        onError: onError || (() => {
        })
      };
      observers.add(observer);
      onData(value);
      return {
        unsubscribe: () => observers.delete(observer)
      };
    },
    get value() {
      return value;
    }
  };
}
var RATE = 1e4;
var UPDATED$1 = "UPDATED";
var TICK = "TICK";
var HIGH_WATER_MARK = "hwm";
var scheduleTick = async (fclContext, ctx) => {
  return setTimeout(() => ctx.sendSelf(TICK), await fclContext.config.get("fcl.eventPollRate", RATE));
};
function createHandlers$1(fclContext) {
  const HANDLERS2 = {
    [TICK]: async (ctx) => {
      if (!ctx.hasSubs())
        return;
      let hwm = ctx.get(HIGH_WATER_MARK);
      if (hwm == null) {
        ctx.put(HIGH_WATER_MARK, await fclContext.sdk.block());
        ctx.put(TICK, await scheduleTick(fclContext, ctx));
      } else {
        let next = await fclContext.sdk.block();
        ctx.put(HIGH_WATER_MARK, next);
        if (hwm.height < next.height) {
          const data = await fclContext.sdk.send([getEventsAtBlockHeightRange(ctx.self(), hwm.height + 1, next.height)]).then(fclContext.sdk.decode);
          for (let d8 of data)
            ctx.broadcast(UPDATED$1, d8);
        }
        ctx.put(TICK, await scheduleTick(fclContext, ctx));
      }
    },
    [SUBSCRIBE]: async (ctx, letter) => {
      if (!ctx.hasSubs()) {
        ctx.put(TICK, await scheduleTick(fclContext, ctx));
      }
      ctx.subscribe(letter.from);
    },
    [UNSUBSCRIBE]: (ctx, letter) => {
      ctx.unsubscribe(letter.from);
      if (!ctx.hasSubs()) {
        clearTimeout(ctx.get(TICK));
        ctx.delete(TICK);
        ctx.delete(HIGH_WATER_MARK);
      }
    }
  };
  return HANDLERS2;
}
var spawnEvents = (fclContext, key) => spawn(createHandlers$1(fclContext), key);
function createLegacyEvents(context) {
  function legacyEvents(key) {
    return {
      /**
       * @description Subscribe to events
       * @param {Function} callback The callback function
       * @returns {SubscriptionCallback}
       */
      subscribe: (callback) => subscriber(key, (address) => spawnEvents(context, address), callback)
    };
  }
  return legacyEvents;
}
var FLOW_EMULATOR = "local";
function createEvents(context) {
  function events2(filterOrType) {
    let filter;
    if (typeof filterOrType === "string") {
      filter = {
        eventTypes: [filterOrType]
      };
    } else {
      filter = filterOrType || {};
    }
    return {
      subscribe: function(onData) {
        let onError = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (error) => {
          console.error("Unhandled error in event subscription:", error);
        };
        let unsubscribeFn = () => {
        };
        let unsubscribeFnLegacy = () => {
        };
        function subscribeEventStream() {
          const {
            unsubscribe
          } = context.sdk.subscribe({
            topic: SubscriptionTopic.EVENTS,
            args: filter,
            onData: (event) => {
              onData(event);
            },
            onError: (error) => {
              if (error instanceof SubscriptionsNotSupportedError) {
                console.warn("Failed to subscribe to events using real-time streaming (are you using the deprecated GRPC transport?), falling back to legacy polling.");
                fallbackLegacyPolling();
              } else {
                onError(error);
              }
            }
          });
          unsubscribeFn = unsubscribe;
        }
        function fallbackLegacyPolling() {
          if (typeof filterOrType !== "string") {
            throw new Error("Legacy fcl.events fallback only supports string filters (single event type)");
          }
          unsubscribeFnLegacy = createLegacyEvents(context)(filterOrType).subscribe((event, error) => {
            if (error) {
              onError(error);
            } else {
              if (event) {
                onData(event);
              }
            }
          });
        }
        async function subscribeToEvents() {
          const network = await createGetChainId(context)();
          if (network === FLOW_EMULATOR) {
            console.warn("Events are not supported on the Flow emulator, falling back to legacy polling.");
            fallbackLegacyPolling();
          } else {
            subscribeEventStream();
          }
        }
        const initPromise = subscribeToEvents().catch((error) => {
          onError(error);
        });
        return () => {
          initPromise.finally(() => {
            unsubscribeFn();
            unsubscribeFnLegacy();
          });
        };
      }
    };
  }
  return events2;
}
var events = createEvents(createPartialGlobalFCLContext());
var stub = () => {
  throw new Error(`Platform specific Core Strategies are not initialized`);
};
var stubCoreStrategies = {
  [CORE_STRATEGIES["EXT/RPC"]]: stub,
  [CORE_STRATEGIES["HTTP/POST"]]: stub,
  [CORE_STRATEGIES["IFRAME/RPC"]]: stub,
  [CORE_STRATEGIES["POP/RPC"]]: stub,
  [CORE_STRATEGIES["TAB/RPC"]]: stub,
  [CORE_STRATEGIES["EXT/RPC"]]: stub
};
var supportedPlugins = ["ServicePlugin"];
var supportedServicePlugins = ["discovery-service"];
var validateDiscoveryPlugin = (servicePlugin) => {
  const {
    services = [],
    serviceStrategy
  } = servicePlugin;
  invariant(Array.isArray(services), "Services must be an array");
  for (const ds3 of services) {
    invariant(isRequired(ds3.f_type) && ds3.f_type === "Service", "Service is required");
    invariant(isRequired(ds3.type) && ds3.type === "authn", `Service must be type authn. Received ${ds3.type}`);
    invariant(ds3.method in CORE_STRATEGIES || serviceStrategy.method === ds3.method, `Service method ${ds3.method} is not supported`);
  }
  invariant(isRequired(serviceStrategy), "Service strategy is required");
  invariant(isRequired(serviceStrategy.method) && isString3(serviceStrategy.method), "Service strategy method is required");
  invariant(isRequired(serviceStrategy.exec) && isFunc(serviceStrategy.exec), "Service strategy exec function is required");
  return {
    discoveryServices: services,
    serviceStrategy
  };
};
var ServiceRegistry = (_ref) => {
  let {
    coreStrategies: coreStrategies2
  } = _ref;
  let services = /* @__PURE__ */ new Set();
  let strategies = new Map(Object.entries(coreStrategies2));
  const add2 = (servicePlugin) => {
    invariant(supportedServicePlugins.includes(servicePlugin.type), `Service Plugin type ${servicePlugin.type} is not supported`);
    if (servicePlugin.type === "discovery-service") {
      const {
        discoveryServices,
        serviceStrategy
      } = validateDiscoveryPlugin(servicePlugin);
      setServices(discoveryServices);
      if (!strategies.has(serviceStrategy.method)) {
        strategies.set(serviceStrategy.method, serviceStrategy.exec);
      } else {
        log({
          title: `Add Service Plugin`,
          message: `Service strategy for ${serviceStrategy.method} already exists`,
          level: LEVELS.warn
        });
      }
    }
  };
  const setServices = (discoveryServices) => services = /* @__PURE__ */ new Set([...discoveryServices]);
  const getServices2 = () => [...services];
  const getStrategy = (method) => strategies.get(method);
  const getStrategies = () => [...strategies.keys()];
  return Object.freeze({
    add: add2,
    getServices: getServices2,
    getStrategy,
    getStrategies
  });
};
var validatePlugins = (plugins) => {
  let pluginsArray;
  invariant(!!plugins, "No plugins supplied");
  if (!Array.isArray(plugins)) {
    pluginsArray = [plugins];
  } else {
    pluginsArray = [...plugins];
  }
  for (const p5 of pluginsArray) {
    invariant(isRequired(p5.name), "Plugin name is required");
    invariant(isRequired(p5.f_type), "Plugin f_type is required");
    invariant(supportedPlugins.includes(p5.f_type), `Plugin type ${p5.f_type} is not supported`);
  }
  return pluginsArray;
};
var PluginRegistry = () => {
  const pluginsMap = /* @__PURE__ */ new Map();
  const getPlugins = () => pluginsMap;
  const add2 = (plugins) => {
    const pluginsArray = validatePlugins(plugins);
    for (const p5 of pluginsArray) {
      pluginsMap.set(p5.name, p5);
      if (p5.f_type === "ServicePlugin") {
        serviceRegistry.add(p5);
      }
    }
  };
  return Object.freeze({
    add: add2,
    getPlugins
  });
};
var serviceRegistry;
var getIsServiceRegistryInitialized = () => typeof serviceRegistry !== "undefined";
var initServiceRegistry = (_ref2) => {
  let {
    coreStrategies: coreStrategies2
  } = _ref2;
  if (getIsServiceRegistryInitialized()) {
    return serviceRegistry;
  }
  const _serviceRegistry = ServiceRegistry({
    coreStrategies: coreStrategies2
  });
  serviceRegistry = _serviceRegistry;
  return _serviceRegistry;
};
var getServiceRegistry = () => {
  if (!getIsServiceRegistryInitialized()) {
    console.warn("Registry is not initalized, it will be initialized with stub core strategies");
    return initServiceRegistry({
      coreStrategies: stubCoreStrategies
    });
  }
  return serviceRegistry;
};
var pluginRegistry = PluginRegistry();
var makeDiscoveryServices = async () => {
  const extensionServices = (window == null ? void 0 : window.fcl_extensions) || [];
  return [...extensionServices, ...getServiceRegistry().getServices()];
};
async function getDiscoveryService(context, service) {
  const discoveryAuthnInclude = await context.config.get("discovery.authn.include", []);
  const discoveryAuthnExclude = await context.config.get("discovery.authn.exclude", []);
  const discoveryFeaturesSuggested = await context.config.get("discovery.features.suggested", []);
  const discoveryWalletMethod = await context.config.first(["discovery.wallet.method", "discovery.wallet.method.default"], void 0);
  const method = (service == null ? void 0 : service.method) ? service.method : discoveryWalletMethod;
  const endpoint = (service == null ? void 0 : service.endpoint) ?? await context.config.first(["discovery.wallet", "challenge.handshake"], void 0);
  invariant(endpoint, `
    If no service is passed to "authenticate," then "discovery.wallet" must be defined in fcl config.
    See: "https://docs.onflow.org/fcl/reference/api/#setting-configuration-values"
    `);
  return {
    ...service,
    type: "authn",
    endpoint,
    method,
    discoveryAuthnInclude,
    discoveryAuthnExclude,
    discoveryFeaturesSuggested
  };
}
var _isReactNative = false;
function isReactNative() {
  return _isReactNative;
}
var _URL = globalThis.URL;
var URL$1 = class URL4 extends _URL {
  constructor(url, base3) {
    for (var _len = arguments.length, args2 = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args2[_key - 2] = arguments[_key];
    }
    super(url, base3, ...args2);
    if (!isReactNative()) {
      return;
    }
    if (this._url && !url.toString().endsWith("/") && this._url.endsWith("/")) {
      this._url = this._url.slice(0, -1);
    }
  }
};
async function getServices(_ref) {
  var _a2;
  let {
    context,
    types
  } = _ref;
  const endpoint = await context.config.get("discovery.authn.endpoint");
  invariant(Boolean(endpoint), `"discovery.authn.endpoint" in config must be defined.`);
  const include = await context.config.get("discovery.authn.include", []);
  const exclude = await context.config.get("discovery.authn.exclude", []);
  const url = new URL$1(endpoint);
  return fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      type: types,
      fclVersion: VERSION,
      include,
      exclude,
      features: {
        suggested: await context.config.get("discovery.features.suggested", [])
      },
      clientServices: await makeDiscoveryServices(),
      supportedStrategies: getServiceRegistry().getStrategies(),
      userAgent: (_a2 = window == null ? void 0 : window.navigator) == null ? void 0 : _a2.userAgent,
      network: await getChainId()
    })
  }).then((d8) => d8.json());
}
var SERVICE_ACTOR_KEYS = {
  AUTHN: "authn",
  RESULTS: "results",
  SNAPSHOT: "SNAPSHOT",
  UPDATED: "UPDATED",
  UPDATE_RESULTS: "UPDATE_RESULTS"
};
var warn = (fact, msg) => {
  if (fact) {
    console.warn(`
      %cFCL Warning
      ============================
      ${msg}
      For more info, please see the docs: https://docs.onflow.org/fcl/
      ============================
      `, "font-weight:bold;font-family:monospace;");
  }
};
var fetchServicesFromDiscovery = async (context) => {
  try {
    const services = await getServices({
      context,
      types: [SERVICE_ACTOR_KEYS.AUTHN]
    });
    send(SERVICE_ACTOR_KEYS.AUTHN, SERVICE_ACTOR_KEYS.UPDATE_RESULTS, {
      results: services
    });
  } catch (error) {
    log({
      title: `${error.name} Error fetching Discovery API services.`,
      message: error.message,
      level: LEVELS.error
    });
  }
};
function createHandlers(context) {
  return {
    [INIT]: async (ctx) => {
      warn(typeof window === "undefined", '"fcl.discovery" is only available in the browser.');
      if (document.readyState === "complete") {
        fetchServicesFromDiscovery(context);
      } else {
        window.addEventListener("load", () => {
          fetchServicesFromDiscovery(context);
        });
      }
    },
    [SERVICE_ACTOR_KEYS.UPDATE_RESULTS]: (ctx, _letter, data) => {
      ctx.merge(data);
      ctx.broadcast(SERVICE_ACTOR_KEYS.UPDATED, {
        ...ctx.all()
      });
    },
    [SUBSCRIBE]: (ctx, letter) => {
      ctx.subscribe(letter.from);
      ctx.send(letter.from, SERVICE_ACTOR_KEYS.UPDATED, {
        ...ctx.all()
      });
    },
    [UNSUBSCRIBE]: (ctx, letter) => ctx.unsubscribe(letter.from),
    [SERVICE_ACTOR_KEYS.SNAPSHOT]: async (ctx, letter) => letter.reply({
      ...ctx.all()
    })
  };
}
var spawnProviders = (context) => spawn(createHandlers(context), SERVICE_ACTOR_KEYS.AUTHN);
function createAuthn(context) {
  const authn2 = {
    /**
     * Subscribe to Discovery authn services and receive real-time updates.
     *
     * This method allows you to subscribe to changes in the available authentication services.
     * When new services are discovered or existing ones are updated, the callback function will be invoked.
     *
     * @param cb Callback function that receives the list of available services and any error
     * @returns A function to unsubscribe from the service updates
     *
     * @example
     * import * as fcl from '@onflow/fcl';
     *
     * const unsubscribe = fcl.discovery.authn.subscribe((services, error) => {
     *   if (error) {
     *     console.error('Discovery error:', error);
     *     return;
     *   }
     *   console.log('Available services:', services);
     * });
     *
     * // Later, to stop receiving updates
     * unsubscribe();
     */
    subscribe: (cb) => subscriber(SERVICE_ACTOR_KEYS.AUTHN, () => spawnProviders(context), cb),
    /**
     * Get the current snapshot of Discovery authn services.
     *
     * This method returns a promise that resolves to the current state of available authentication services
     * without setting up a subscription. Useful for one-time checks or initial state loading.
     *
     * @returns A promise that resolves to the current service data
     *
     * @example
     * import * as fcl from '@onflow/fcl';
     *
     * async function getServices() {
     *   try {
     *     const serviceData = await fcl.discovery.authn.snapshot();
     *     console.log('Current services:', serviceData.results);
     *   } catch (error) {
     *     console.error('Failed to get services:', error);
     *   }
     * }
     */
    snapshot: () => snapshoter(SERVICE_ACTOR_KEYS.AUTHN, () => spawnProviders(context)),
    /**
     * Trigger an update of authn services from the discovery endpoint.
     *
     * This method manually triggers a refresh of the available authentication services
     * from the configured discovery endpoint. Useful when you want to force a refresh
     * of the service list.
     *
     * @example
     * import * as fcl from '@onflow/fcl';
     *
     * // Force refresh of available services
     * fcl.discovery.authn.update();
     */
    update: () => {
      if (document.readyState === "complete") {
        fetchServicesFromDiscovery(context);
      }
    }
  };
  return authn2;
}
var authn = createAuthn(createPartialGlobalFCLContext());
var discovery = {
  authn
};
function genHash(utf8String) {
  const sha2 = new import_sha32.SHA3(256);
  sha2.update(import_buffer2.Buffer.from(utf8String, "utf8"));
  return sha2.digest("hex");
}
async function generateTemplateId$2(_ref) {
  let {
    template: template2
  } = _ref;
  invariant(!!template2, "generateTemplateId({ template }) -- template must be defined");
  invariant(typeof template2 === "object", "generateTemplateId({ template }) -- template must be an object");
  invariant(template2.f_type === "InteractionTemplate", "generateTemplateId({ template }) -- template object must be an InteractionTemplate");
  invariant(template2.f_version === "1.0.0", "generateTemplateId({ template }) -- template object must be an version 1.0.0");
  const templateData = template2.data;
  const messages = await Promise.all(Object.keys(templateData.messages).map(async (messageKey) => {
    var _a2, _b;
    return [genHash(messageKey), await Promise.all(Object.keys((_b = (_a2 = templateData.messages) == null ? void 0 : _a2[messageKey]) == null ? void 0 : _b.i18n).map(async (i18nkeylanguage) => {
      var _a3, _b2, _c2;
      return [genHash(i18nkeylanguage), genHash((_c2 = (_b2 = (_a3 = templateData.messages) == null ? void 0 : _a3[messageKey]) == null ? void 0 : _b2.i18n) == null ? void 0 : _c2[i18nkeylanguage])];
    }))];
  }));
  const dependencies = await Promise.all(Object.keys(templateData == null ? void 0 : templateData.dependencies).map(async (dependencyAddressPlaceholder) => {
    var _a2;
    return [genHash(dependencyAddressPlaceholder), await Promise.all(Object.keys((_a2 = templateData == null ? void 0 : templateData.dependencies) == null ? void 0 : _a2[dependencyAddressPlaceholder]).map(async (dependencyContract) => {
      var _a3, _b;
      return [genHash(dependencyContract), await Promise.all(Object.keys((_b = (_a3 = templateData == null ? void 0 : templateData.dependencies) == null ? void 0 : _a3[dependencyAddressPlaceholder]) == null ? void 0 : _b[dependencyContract]).map(async (dependencyContractNetwork) => {
        var _a4, _b2, _c2, _d, _e4, _f2, _g, _h, _i3, _j, _k, _l, _m, _n4, _o4;
        return [genHash(dependencyContractNetwork), [genHash((_c2 = (_b2 = (_a4 = templateData == null ? void 0 : templateData.dependencies) == null ? void 0 : _a4[dependencyAddressPlaceholder]) == null ? void 0 : _b2[dependencyContract]) == null ? void 0 : _c2[dependencyContractNetwork].address), genHash((_f2 = (_e4 = (_d = templateData == null ? void 0 : templateData.dependencies) == null ? void 0 : _d[dependencyAddressPlaceholder]) == null ? void 0 : _e4[dependencyContract]) == null ? void 0 : _f2[dependencyContractNetwork].contract), genHash((_i3 = (_h = (_g = templateData == null ? void 0 : templateData.dependencies) == null ? void 0 : _g[dependencyAddressPlaceholder]) == null ? void 0 : _h[dependencyContract]) == null ? void 0 : _i3[dependencyContractNetwork].fq_address), genHash((_l = (_k = (_j = templateData == null ? void 0 : templateData.dependencies) == null ? void 0 : _j[dependencyAddressPlaceholder]) == null ? void 0 : _k[dependencyContract]) == null ? void 0 : _l[dependencyContractNetwork].pin), genHash(String((_o4 = (_n4 = (_m = templateData == null ? void 0 : templateData.dependencies) == null ? void 0 : _m[dependencyAddressPlaceholder]) == null ? void 0 : _n4[dependencyContract]) == null ? void 0 : _o4[dependencyContractNetwork].pin_block_height))]];
      }))];
    }))];
  }));
  const _arguments = await Promise.all(Object.keys(templateData == null ? void 0 : templateData["arguments"]).map(async (argumentLabel) => {
    var _a2, _b, _c2, _d;
    return [genHash(argumentLabel), [genHash(String((_a2 = templateData == null ? void 0 : templateData["arguments"]) == null ? void 0 : _a2[argumentLabel].index)), genHash((_b = templateData == null ? void 0 : templateData["arguments"]) == null ? void 0 : _b[argumentLabel].type), genHash(((_c2 = templateData == null ? void 0 : templateData["arguments"]) == null ? void 0 : _c2[argumentLabel].balance) || ""), await Promise.all(Object.keys((_d = templateData == null ? void 0 : templateData["arguments"]) == null ? void 0 : _d[argumentLabel].messages).map(async (argumentMessageKey) => {
      var _a3, _b2;
      return [genHash(argumentMessageKey), await Promise.all(Object.keys((_b2 = (_a3 = templateData == null ? void 0 : templateData["arguments"]) == null ? void 0 : _a3[argumentLabel].messages) == null ? void 0 : _b2[argumentMessageKey].i18n).map(async (i18nkeylanguage) => {
        var _a4, _b3, _c3;
        return [genHash(i18nkeylanguage), genHash((_c3 = (_b3 = (_a4 = templateData == null ? void 0 : templateData["arguments"]) == null ? void 0 : _a4[argumentLabel].messages) == null ? void 0 : _b3[argumentMessageKey].i18n) == null ? void 0 : _c3[i18nkeylanguage])];
      }))];
    }))]];
  }));
  const encodedHex = encode([genHash("InteractionTemplate"), genHash("1.0.0"), genHash(templateData == null ? void 0 : templateData.type), genHash(templateData == null ? void 0 : templateData.interface), messages, genHash(templateData == null ? void 0 : templateData.cadence), dependencies, _arguments]).toString("hex");
  return genHash(encodedHex);
}
function generateImport(_ref) {
  let {
    contractName,
    address
  } = _ref;
  return {
    contractName,
    address,
    contract: ""
  };
}
function findImports(cadence) {
  const imports = [];
  const importsReg = /import ((\w|,| )+)* from 0x\w+/g;
  const fileImports = cadence.match(importsReg) || [];
  for (const fileImport of fileImports) {
    const importLineReg = /import ((\w+|, |)*) from (0x\w+)/g;
    const importLine = importLineReg.exec(fileImport);
    const contractsReg = /((?:\w+)+),?/g;
    const contracts = (importLine == null ? void 0 : importLine[1].match(contractsReg)) || [];
    for (const contract of contracts) {
      imports.push(generateImport({
        address: importLine == null ? void 0 : importLine[3],
        contractName: contract.replace(/,/g, "")
      }));
    }
  }
  return imports;
}
function createGenerateDependencyPin110(context) {
  async function generateDependencyPin1102(_ref) {
    var _a2;
    let {
      address,
      contractName
    } = _ref;
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    invariant2(address != void 0, "generateDependencyPin({ address }) -- address must be defined");
    invariant2(contractName != void 0, "generateDependencyPin({ contractName }) -- contractName must be defined");
    invariant2(typeof address === "string", "generateDependencyPin({ address }) -- address must be a string");
    invariant2(typeof contractName === "string", "generateDependencyPin({ contractName }) -- contractName must be a string");
    const horizon = [generateImport({
      contractName,
      address
    })];
    for (const horizonImport of horizon) {
      const account2 = await context.sdk.send([getAccount(await context.config.get(horizonImport.address, horizonImport.address))], opts).then(context.sdk.decode);
      horizonImport.contract = (_a2 = account2.contracts) == null ? void 0 : _a2[horizonImport.contractName];
      if (!horizonImport.contract) {
        console.error("Did not find expected contract", horizonImport, account2);
        throw new Error("Did not find expected contract");
      }
      const contractImports = findImports(horizonImport.contract);
      horizon.push(...contractImports);
    }
    const contractPinSelfHashesPromises = horizon.map((iport) => genHash(iport.contract));
    const contractPinSelfHashes = await Promise.all(contractPinSelfHashesPromises);
    const contractPinHashes = contractPinSelfHashes.join("");
    return genHash(contractPinHashes);
  }
  return generateDependencyPin1102;
}
var generateDependencyPin110 = createGenerateDependencyPin110(createPartialGlobalFCLContext());
async function generateContractNetworks(context, contractName, networks) {
  const values = [];
  for (const net of networks) {
    const networkHashes = [genHash(net.network)];
    const {
      address,
      dependency_pin_block_height
    } = net;
    if (net.dependency_pin) {
      const hash = await createGenerateDependencyPin110(context)({
        address,
        contractName,
        blockHeight: dependency_pin_block_height
      });
      networkHashes.push(genHash(hash));
    }
    values.push(networkHashes);
  }
  return values;
}
async function generateContractDependencies(context, dependencies) {
  const values = [];
  for (let i6 = 0; i6 < dependencies.length; i6++) {
    const dependency = dependencies[i6];
    const contracts = [];
    for (let j6 = 0; j6 < (dependency == null ? void 0 : dependency.contracts.length); j6++) {
      const c8 = dependency == null ? void 0 : dependency.contracts[j6];
      const contractName = c8 == null ? void 0 : c8.contract;
      contracts.push(genHash(contractName));
      const contractHashes = await generateContractNetworks(context, contractName, c8 == null ? void 0 : c8.networks);
      contracts.push(contractHashes);
    }
    values.push(contracts);
  }
  return values;
}
function createGenerateTemplateId(context) {
  async function generateTemplateId2(_ref) {
    var _a2;
    let {
      template: template2
    } = _ref;
    invariant(!!template2, "generateTemplateId({ template }) -- template must be defined");
    invariant(typeof template2 === "object", "generateTemplateId({ template }) -- template must be an object");
    invariant(template2.f_type === "InteractionTemplate", "generateTemplateId({ template }) -- template object must be an InteractionTemplate");
    invariant(template2.f_version === "1.1.0", "generateTemplateId({ template }) -- template object must be an version 1.1.0");
    const templateData = template2.data;
    const messages = await Promise.all(templateData.messages.map(async (templateMessage) => [genHash(templateMessage.key), await Promise.all(templateMessage.i18n.map(async (templateMessagei18n) => [genHash(templateMessagei18n.tag), genHash(templateMessagei18n.translation)]))]));
    const params2 = await Promise.all(templateData == null ? void 0 : templateData["parameters"].sort((a4, b5) => a4.index - b5.index).map(async (arg2) => [genHash(arg2.label), [genHash(String(arg2.index)), genHash(arg2.type), await Promise.all(arg2.messages.map(async (argumentMessage) => [genHash(argumentMessage.key), await Promise.all(argumentMessage.i18n.map(async (argumentMessagei18n) => [genHash(argumentMessagei18n.tag), genHash(argumentMessagei18n.translation)]))]))]]));
    const dependencies = [await generateContractDependencies(context, templateData == null ? void 0 : templateData.dependencies)];
    const encodedHex = encode([genHash(template2 == null ? void 0 : template2.f_type), genHash(template2 == null ? void 0 : template2.f_version), genHash(templateData == null ? void 0 : templateData.type), genHash(templateData == null ? void 0 : templateData.interface), messages, genHash((_a2 = templateData == null ? void 0 : templateData.cadence) == null ? void 0 : _a2.body), [dependencies], params2]).toString("hex");
    return genHash(encodedHex);
  }
  return generateTemplateId2;
}
var generateTemplateId$1 = createGenerateTemplateId(createPartialGlobalFCLContext());
async function generateTemplateId(_ref) {
  let {
    template: template2
  } = _ref;
  invariant(!!template2, "generateTemplateId({ template }) -- template must be defined");
  invariant(typeof template2 === "object", "generateTemplateId({ template }) -- template must be an object");
  invariant(template2.f_type === "InteractionTemplate", "generateTemplateId({ template }) -- template object must be an InteractionTemplate");
  switch (template2.f_version) {
    case "1.1.0":
      return await generateTemplateId$1({
        template: template2
      });
    case "1.0.0":
      return await generateTemplateId$2({
        template: template2
      });
    default:
      throw new Error("generateTemplateId Error: Unsupported template version");
  }
}
async function verifyGeneratedTemplateId(_ref2) {
  let {
    template: template2
  } = _ref2;
  return template2.id === await generateTemplateId({
    template: template2
  });
}
async function getInteractionTemplateAudits(context, _ref) {
  let {
    template: template2,
    auditors
  } = _ref;
  let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  invariant2(template2 != void 0, "getInteractionTemplateAudits({ template }) -- template must be defined");
  invariant2(template2.f_type === "InteractionTemplate", "getInteractionTemplateAudits({ template }) -- template must be an InteractionTemplate");
  let recomputedTemplateID = await generateTemplateId({
    template: template2
  });
  if (recomputedTemplateID !== template2.id) {
    log({
      title: "getInteractionTemplateAudits Debug Error",
      message: `Could not recompute and match template ID
                computed: ${recomputedTemplateID}
                template: ${template2.id}
            `,
      level: LEVELS.debug
    });
    throw new Error("getInteractionTemplateAudits Error: Could not recompute and match template ID");
  }
  switch (template2.f_version) {
    case "1.1.0":
    case "1.0.0":
      const _auditors = auditors || await context.config.get("flow.auditors");
      invariant2(_auditors, "getInteractionTemplateAudits Error: Required configuration for 'fcl.auditors' is not set");
      invariant2(Array.isArray(_auditors), "getInteractionTemplateAudits Error: Required configuration for 'fcl.auditors' is not an array");
      let FlowInteractionAuditContract = opts.flowInteractionAuditContract;
      if (!FlowInteractionAuditContract) {
        const fclNetwork = await createGetChainId(context)(opts);
        invariant2(fclNetwork === "mainnet" || fclNetwork === "testnet", "getInteractionTemplateAudits Error: Unable to determine address for FlowInteractionTemplateAudit contract. Set configuration for 'fcl.network' to 'mainnet' or 'testnet'");
        if (fclNetwork === "mainnet") {
          FlowInteractionAuditContract = "0xfd100e39d50a13e6";
        } else {
          FlowInteractionAuditContract = "0xf78bfc12d0a786dc";
        }
      }
      const audits = await createQuery(context)({
        cadence: `
        import FlowInteractionTemplateAudit from ${FlowInteractionAuditContract}
        access(all) fun main(templateId: String, auditors: [Address]): {Address:Bool} {
          return FlowInteractionTemplateAudit.getHasTemplateBeenAuditedByAuditors(templateId: templateId, auditors: auditors)
        }
        `,
        args: (arg2, t2) => [arg2(recomputedTemplateID, t2.String), arg2(_auditors, t2.Array(t2.Address))]
      });
      return audits;
    default:
      throw new Error("getInteractionTemplateAudits Error: Unsupported template version");
  }
}
function creategenerateDependencyPin100(context) {
  async function generateDependencyPin1002(_ref) {
    var _a2;
    let {
      address,
      contractName
    } = _ref;
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    invariant2(address != void 0, "generateDependencyPin({ address }) -- address must be defined");
    invariant2(contractName != void 0, "generateDependencyPin({ contractName }) -- contractName must be defined");
    invariant2(typeof address === "string", "generateDependencyPin({ address }) -- address must be a string");
    invariant2(typeof contractName === "string", "generateDependencyPin({ contractName }) -- contractName must be a string");
    const horizon = [generateImport({
      contractName,
      address
    })];
    for (const horizonImport of horizon) {
      const account2 = await context.sdk.send([getAccount(await context.config.get(horizonImport.address, horizonImport.address))], opts).then(context.sdk.decode);
      horizonImport.contract = (_a2 = account2.contracts) == null ? void 0 : _a2[horizonImport.contractName];
      if (!horizonImport.contract) {
        console.error("Did not find expected contract", horizonImport, account2);
        throw new Error("Did not find expected contract");
      }
      const contractImports = findImports(horizonImport.contract);
      horizon.push(...contractImports);
    }
    const contractHashes = horizon.map((iport) => genHash(iport.contract));
    const contractHashesJoined = contractHashes.join("");
    return genHash(contractHashesJoined);
  }
  return generateDependencyPin1002;
}
var generateDependencyPin100 = creategenerateDependencyPin100(createPartialGlobalFCLContext());
async function generateDependencyPin(_ref) {
  let {
    version: version2,
    address,
    contractName
  } = _ref;
  invariant2(address != void 0, "generateDependencyPin({ address }) -- address must be defined");
  invariant2(contractName != void 0, "generateDependencyPin({ contractName }) -- contractName must be defined");
  invariant2(typeof address === "string", "generateDependencyPin({ address }) -- address must be a string");
  invariant2(typeof contractName === "string", "generateDependencyPin({ contractName }) -- contractName must be a string");
  switch (version2) {
    case "1.1.0":
      return await generateDependencyPin110({
        address,
        contractName
      });
    case "1.0.0":
      return await generateDependencyPin100({
        address,
        contractName
      });
    default:
      throw new Error("deriveCadenceByNetwork Error: Unsupported template version");
  }
}
async function generateDependencyPinAtLatestSealedBlock(_ref2) {
  let {
    version: version2,
    address,
    contractName
  } = _ref2;
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const latestSealedBlock = await block({
    sealed: true
  }, opts);
  latestSealedBlock == null ? void 0 : latestSealedBlock.height;
  return generateDependencyPin({
    version: version2,
    address,
    contractName
  });
}
async function verifyDependencyPinsSame(_ref) {
  var _a2, _b;
  let {
    template: template2,
    blockHeight,
    network
  } = _ref;
  invariant2(template2 != void 0, "generateDependencyPin({ template }) -- template must be defined");
  invariant2(typeof template2 === "object", "generateDependencyPin({ template }) -- template must be an object");
  invariant2(template2.f_type === "InteractionTemplate", "generateDependencyPin({ template }) -- template must be an InteractionTemplate");
  invariant2(network != void 0, "generateDependencyPin({ network }) network must be defined");
  invariant2(blockHeight != void 0, "generateDependencyPin({ blockHeight }) blockHeight must be defined");
  invariant2(typeof blockHeight === "number", "generateDependencyPin({ blockHeight }) blockHeight must be a number");
  switch (template2.f_version) {
    case "1.0.0":
      const templateDependenciesPlaceholderKeys = Object.keys(template2.data.dependencies);
      for (let templateDependencyPlaceholderKey of templateDependenciesPlaceholderKeys) {
        const templateDependencyPlaceholder = template2.data.dependencies[templateDependencyPlaceholderKey];
        const templateDependencyPlaceholderContractNames = Object.keys(templateDependencyPlaceholder);
        for (let templateDependencyPlaceholderContractName of templateDependencyPlaceholderContractNames) {
          const templateDependencyPlaceholderContractNetworks = template2.data.dependencies[templateDependencyPlaceholderKey][templateDependencyPlaceholderContractName];
          const templateDependency = templateDependencyPlaceholderContractNetworks[network];
          if (typeof templateDependency === "undefined")
            continue;
          const pin = await generateDependencyPin({
            address: templateDependency.address,
            contractName: templateDependency.contract
          });
          if (pin !== templateDependency.pin) {
            log({
              title: "verifyDependencyPinsSame Debug Error",
              message: `Could not recompute and match dependency pin.
                                address: ${templateDependency.address} | contract: ${templateDependency.contract}
                                computed: ${pin}
                                template: ${templateDependency.pin}
                            `,
              level: LEVELS.debug
            });
            return false;
          }
        }
      }
      return true;
    case "1.1.0":
      let isVerified = false;
      for (let i6 = 0; i6 < ((_a2 = template2.data) == null ? void 0 : _a2.dependencies.length); i6++) {
        const dependency = (_b = template2.data) == null ? void 0 : _b.dependencies[i6];
        for (let j6 = 0; j6 < (dependency == null ? void 0 : dependency.contracts.length); j6++) {
          const contract = dependency == null ? void 0 : dependency.contracts[j6];
          for (let k6 = 0; k6 < (contract == null ? void 0 : contract.networks.length); k6++) {
            const net = contract == null ? void 0 : contract.networks[k6];
            if (net.network === network) {
              const pin = await generateDependencyPin({
                version: template2.f_version,
                address: net.address,
                contractName: contract.contract
              });
              if (pin !== net.dependency_pin.pin) {
                log({
                  title: "verifyDependencyPinsSame Debug Error",
                  message: `Could not recompute and match dependency pin.
                                    address: ${net.address} | contract: ${contract.contract}
                                    computed: ${pin}
                                    template: ${net.pin}
                                `,
                  level: LEVELS.debug
                });
                return false;
              } else {
                isVerified = true;
              }
            }
          }
        }
      }
      return isVerified;
    default:
      throw new Error("verifyDependencyPinsSame Error: Unsupported template version");
  }
}
async function verifyDependencyPinsSameAtLatestSealedBlock(_ref2) {
  let {
    template: template2,
    network
  } = _ref2;
  const latestSealedBlock = await block({
    sealed: true
  });
  const latestSealedBlockHeight = latestSealedBlock == null ? void 0 : latestSealedBlock.height;
  return verifyDependencyPinsSame({
    template: template2,
    network,
    blockHeight: latestSealedBlockHeight
  });
}
function getTemplateMessage(_ref) {
  var _a2, _b, _c2, _d, _e4, _f2, _g;
  let {
    localization = "en-US",
    messageKey,
    template: template2
  } = _ref;
  invariant(messageKey, "getTemplateMessage({ messageKey }) -- messageKey must be defined");
  invariant(typeof messageKey === "string", "getTemplateMessage({ messageKey }) -- messageKey must be a string");
  invariant(localization, "getTemplateMessage({ localization }) -- localization must be defined");
  invariant(typeof localization === "string", "getTemplateMessage({ localization }) -- localization must be a string");
  invariant(template2 != void 0, "getTemplateMessage({ template }) -- template must be defined");
  invariant(typeof template2 === "object", "getTemplateMessage({ template }) -- template must be an object");
  invariant(template2.f_type === "InteractionTemplate", "getTemplateMessage({ template }) -- template object must be an InteractionTemplate");
  switch (template2.f_version) {
    case "1.1.0":
      const msg = (_b = (_a2 = template2 == null ? void 0 : template2.data) == null ? void 0 : _a2.messages) == null ? void 0 : _b.find((a4) => a4.key === messageKey);
      if (!msg)
        return void 0;
      const lzn = (_c2 = msg == null ? void 0 : msg.i18n) == null ? void 0 : _c2.find((a4) => a4.tag === localization);
      if (!lzn)
        return void 0;
      return lzn.translation;
    case "1.0.0":
      return (_g = (_f2 = (_e4 = (_d = template2 == null ? void 0 : template2.data) == null ? void 0 : _d.messages) == null ? void 0 : _e4[messageKey]) == null ? void 0 : _f2.i18n) == null ? void 0 : _g[localization];
    default:
      throw new Error("getTemplateArgumentMessage Error: Unsupported template version");
  }
}
function getTemplateArgumentMessage(_ref) {
  var _a2, _b, _c2, _d, _e4, _f2, _g, _h, _i3, _j;
  let {
    localization = "en-US",
    argumentLabel,
    messageKey,
    template: template2
  } = _ref;
  invariant2(messageKey, "getTemplateArgumentMessage({ messageKey }) -- messageKey must be defined");
  invariant2(typeof messageKey === "string", "getTemplateArgumentMessage({ messageKey }) -- messageKey must be a string");
  invariant2(argumentLabel, "getTemplateArgumentMessage({ argumentLabel }) -- argumentLabel must be defined");
  invariant2(typeof argumentLabel === "string", "getTemplateArgumentMessage({ argumentLabel }) -- argumentLabel must be a string");
  invariant2(localization, "getTemplateArgumentMessage({ localization }) -- localization must be defined");
  invariant2(typeof localization === "string", "getTemplateArgumentMessage({ localization }) -- localization must be a string");
  invariant2(template2 != void 0, "getTemplateArgumentMessage({ template }) -- template must be defined");
  invariant2(typeof template2 === "object", "getTemplateArgumentMessage({ template }) -- template must be an object");
  invariant2(template2.f_type === "InteractionTemplate", "getTemplateArgumentMessage({ template }) -- template object must be an InteractionTemplate");
  switch (template2.f_version) {
    case "1.1.0":
      const param2 = (_b = (_a2 = template2 == null ? void 0 : template2.data) == null ? void 0 : _a2.parameters) == null ? void 0 : _b.find((a4) => a4.label === argumentLabel);
      if (!param2)
        return void 0;
      const message = (_c2 = param2 == null ? void 0 : param2.messages) == null ? void 0 : _c2.find((a4) => a4.key === messageKey);
      if (!message)
        return void 0;
      const lzn = (_d = message == null ? void 0 : message.i18n) == null ? void 0 : _d.find((a4) => a4.tag === localization);
      if (!lzn)
        return void 0;
      return lzn.translation;
    case "1.0.0":
      return (_j = (_i3 = (_h = (_g = (_f2 = (_e4 = template2 == null ? void 0 : template2.data) == null ? void 0 : _e4.arguments) == null ? void 0 : _f2[argumentLabel]) == null ? void 0 : _g.messages) == null ? void 0 : _h[messageKey]) == null ? void 0 : _i3.i18n) == null ? void 0 : _j[localization];
    default:
      throw new Error("getTemplateArgumentMessage Error: Unsupported template version");
  }
}
var index2 = Object.freeze({
  __proto__: null,
  deriveCadenceByNetwork,
  generateDependencyPin,
  generateDependencyPinAtLatestSealedBlock,
  generateTemplateId,
  getInteractionTemplateAudits,
  getTemplateArgumentMessage,
  getTemplateMessage,
  verifyDependencyPinsSame,
  verifyDependencyPinsSameAtLatestSealedBlock,
  verifyGeneratedTemplateId
});
var createMutate = (context) => {
  const mutate2 = async function() {
    let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var txid;
    try {
      await preMutate(context, opts);
      opts = await prepTemplateOpts(context, opts);
      const authz2 = await context.config.get("fcl.authz", context.currentUser.authorization);
      txid = context.sdk.send([
        transaction(opts.cadence),
        args(normalizeArgs(opts.args || [])),
        opts.limit && isNumber3(opts.limit) && limit(opts.limit),
        // opts.proposer > opts.authz > authz
        proposer(opts.proposer || opts.authz || authz2),
        // opts.payer > opts.authz > authz
        payer(opts.payer || opts.authz || authz2),
        // opts.authorizations > [opts.authz > authz]
        authorizations(opts.authorizations || [opts.authz || authz2])
      ]).then(context.sdk.decode);
      return txid;
    } catch (error) {
      throw error;
    }
  };
  return mutate2;
};
var getMutate = (currentUserOrConfig) => {
  const partialContext = createPartialGlobalFCLContext();
  const context = {
    ...partialContext,
    currentUser: currentUserOrConfig
  };
  return createMutate(context);
};
function normalizeCompositeSignature(resp) {
  if (resp == null)
    return null;
  if (!resp["f_vsn"]) {
    return {
      ...COMPOSITE_SIGNATURE_PRAGMA,
      addr: sansPrefix(resp.addr || resp.address),
      signature: resp.signature || resp.sig,
      keyId: resp.keyId
    };
  }
  switch (resp["f_vsn"]) {
    case "1.0.0":
      return resp;
    default:
      return null;
  }
}
function normalizeAuthn(service) {
  if (service == null)
    return null;
  if (!service["f_vsn"]) {
    return {
      ...SERVICE_PRAGMA,
      type: service.type,
      uid: service.id,
      endpoint: service.authn,
      id: service.pid,
      provider: {
        address: withPrefix2(service.addr),
        name: service.name,
        icon: service.icon
      }
    };
  }
  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;
    default:
      return null;
  }
}
function normalizeAuthz(service) {
  if (service == null)
    return null;
  if (!service["f_vsn"]) {
    return {
      ...SERVICE_PRAGMA,
      type: service.type,
      uid: service.id,
      endpoint: service.endpoint,
      method: service.method,
      identity: {
        ...IDENTITY_PRAGMA,
        address: withPrefix2(service.addr),
        keyId: service.keyId
      },
      params: service.params,
      data: service.data
    };
  }
  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;
    default:
      return null;
  }
}
function normalizePreAuthz(service) {
  if (service == null)
    return null;
  if (!service["f_vsn"]) {
    return {
      ...SERVICE_PRAGMA,
      type: service.type,
      uid: service.id,
      endpoint: service.endpoint,
      method: service.method,
      identity: {
        ...IDENTITY_PRAGMA,
        address: withPrefix2(service.addr),
        keyId: service.keyId
      },
      params: service.params,
      data: service.data
    };
  }
  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;
    default:
      return null;
  }
}
function normalizeFrame(service) {
  if (service == null)
    return null;
  if (!service["f_vsn"]) {
    return {
      old: service,
      ...SERVICE_PRAGMA,
      type: "frame",
      endpoint: service.endpoint,
      params: service.params || {},
      data: service.data || {}
    };
  }
  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;
    default:
      return null;
  }
}
function normalizeBackChannelRpc(service) {
  if (service == null)
    return null;
  if (!service["f_vsn"]) {
    return {
      ...SERVICE_PRAGMA,
      type: "back-channel-rpc",
      endpoint: service.endpoint,
      method: service.method,
      params: service.params || {},
      data: service.data || {}
    };
  }
  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;
    default:
      return null;
  }
}
function normalizeOpenId(service) {
  if (service == null)
    return null;
  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;
    default:
      return null;
  }
}
function normalizeUserSignature(service) {
  if (service == null)
    return null;
  if (!service["f_vsn"]) {
    throw new Error("Invalid user-signature service");
  }
  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;
    default:
      return null;
  }
}
function normalizeLocalView(resp) {
  if (resp == null)
    return null;
  if (resp.method == null) {
    resp = {
      ...resp,
      type: "local-view",
      method: "VIEW/IFRAME"
    };
  }
  if (!resp["f_vsn"]) {
    return {
      ...SERVICE_PRAGMA,
      type: resp.type || "local-view",
      method: resp.method,
      endpoint: resp.endpoint,
      data: resp.data || {},
      params: resp.params || {}
    };
  }
  switch (resp["f_vsn"]) {
    case "1.0.0":
      return resp;
    default:
      return null;
  }
}
function normalizeAccountProof(service) {
  if (service == null)
    return null;
  if (!service["f_vsn"]) {
    throw new Error(`FCL Normalizer Error: Invalid account-proof service`);
  }
  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;
    default:
      return null;
  }
}
function normalizeAuthnRefresh(service) {
  if (service == null)
    return null;
  if (!service["f_vsn"]) {
    throw new Error("Invalid authn-refresh service");
  }
  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;
    default:
      return null;
  }
}
function normalizeServices(services, data) {
  return services.map((service) => normalizeService(service, data)).filter(Boolean);
}
var serviceNormalizers = {
  "back-channel-rpc": normalizeBackChannelRpc,
  "pre-authz": normalizePreAuthz,
  authz: normalizeAuthz,
  authn: normalizeAuthn,
  frame: normalizeFrame,
  "open-id": normalizeOpenId,
  "user-signature": normalizeUserSignature,
  "local-view": normalizeLocalView,
  "account-proof": normalizeAccountProof,
  "authn-refresh": normalizeAuthnRefresh
};
function normalizeService(service, data) {
  try {
    const normalized = serviceNormalizers[service.type](service, data);
    return normalized;
  } catch (error) {
    console.error(`Unrecognized FCL Service Type [${service.type}]`, service, error);
    return service;
  }
}
async function fetchServices(servicesURL, code2) {
  if (servicesURL == null || code2 == null)
    return [];
  const url = new URL$1(servicesURL);
  url.searchParams.append("code", code2);
  const resp = await fetch(url, {
    method: "GET",
    headers: {
      "Content-Type": "application/json"
    }
  }).then((d8) => d8.json());
  if (Array.isArray(resp))
    return resp;
  const services = [];
  if (Array.isArray(resp.authorizations)) {
    for (let service of resp.authorizations) {
      services.push({
        type: "authz",
        keyId: resp.keyId,
        ...service
      });
    }
  }
  if (resp.provider != null) {
    services.push({
      type: "authn",
      id: "wallet-provider#authn",
      ...resp.provider
    });
  }
  return services;
}
function mergeServices() {
  let sx1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  let sx2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  return [...sx1, ...sx2];
}
function serviceOfType() {
  let services = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  let type = arguments.length > 1 ? arguments[1] : void 0;
  return services.reduce((mostRecent, service) => service.type === type ? !mostRecent || compare(service.f_vsn, mostRecent.f_vsn) > 0 ? service : mostRecent : mostRecent, null);
}
function deriveCompositeId(authn2) {
  var _a2, _b;
  return encode([((_a2 = authn2.provider) == null ? void 0 : _a2.address) || ((_b = authn2.provider) == null ? void 0 : _b.name) || "UNSPECIFIED", authn2.id]).toString("hex");
}
function normalizeData(data) {
  data.addr = data.addr ? withPrefix2(data.addr) : null;
  data.paddr = data.paddr ? withPrefix2(data.paddr) : null;
  return data;
}
async function buildUser(data) {
  data = normalizeData(data);
  var services = normalizeServices(mergeServices(data.services || [], await fetchServices(data.hks, data.code)));
  const authn2 = serviceOfType(services, "authn");
  return {
    ...USER_PRAGMA,
    addr: withPrefix2(data.addr),
    cid: deriveCompositeId(authn2),
    loggedIn: true,
    services,
    expiresAt: data.expires
  };
}
var FCL_WC_SERVICE_METHOD = "WC/RPC";
var isServerSide = typeof window === "undefined";
function checkWalletConnectEnabled() {
  if (isServerSide)
    return;
  const serviceRegistry2 = getServiceRegistry();
  const strategies = serviceRegistry2.getStrategies();
  if (!strategies.includes(FCL_WC_SERVICE_METHOD)) {
    log({
      title: "FCL WalletConnect Service Plugin",
      level: LEVELS.error,
      message: "All dApps are expected to register for a WalletConnect projectId & add this to their FCL configuration.  If you do not do so, users will be unable to use certain wallets to interact with your dApp.  See https://developers.flow.com/tools/clients/fcl-js/configure-fcl for more information."
    });
  }
}
var AbortController3 = globalThis.AbortController || require_browser();
var execStrategy = async (_ref) => {
  let {
    service,
    body,
    config: config3,
    abortSignal,
    customRpc,
    user,
    opts
  } = _ref;
  const strategy = getServiceRegistry().getStrategy(service.method);
  return strategy({
    service,
    body,
    config: config3,
    abortSignal,
    customRpc,
    opts,
    user
  });
};
async function execService(context, _ref2) {
  var _a2;
  let {
    service,
    msg = {},
    config: config3 = {},
    opts = {},
    platform,
    abortSignal = new AbortController3().signal,
    execStrategy: _execStrategy,
    user
  } = _ref2;
  checkWalletConnectEnabled();
  msg.data = service.data;
  const execConfig = {
    services: await configLens(context, /^service\./),
    app: await configLens(context, /^app\.detail\./),
    client: {
      ...config3.client,
      platform,
      fclVersion: VERSION,
      fclLibrary: "https://github.com/onflow/fcl-js",
      hostname: ((_a2 = window == null ? void 0 : window.location) == null ? void 0 : _a2.hostname) ?? null,
      network: await createGetChainId(context)(opts)
    }
  };
  try {
    const res = await (_execStrategy || execStrategy)({
      service,
      body: msg,
      config: execConfig,
      opts,
      user,
      abortSignal
    });
    if (res.status === "REDIRECT") {
      invariant(service.type === res.data.type, "Cannot shift recursive service type in execService");
      return await execService(context, {
        service: res.data,
        msg,
        config: execConfig,
        opts,
        abortSignal,
        platform,
        user
      });
    } else {
      return res;
    }
  } catch (error) {
    log({
      title: `Error on execService ${service == null ? void 0 : service.type}`,
      message: error,
      level: LEVELS.error
    });
    throw error;
  }
}
var isFn2 = (d8) => typeof d8 === "function";
var NAME2 = "CURRENT_USER";
var UPDATED3 = "CURRENT_USER/UPDATED";
var SNAPSHOT2 = "SNAPSHOT";
var SET_CURRENT_USER = "SET_CURRENT_USER";
var DEL_CURRENT_USER = "DEL_CURRENT_USER";
var DATA = `{
  "f_type": "User",
  "f_vsn": "1.0.0",
  "addr":null,
  "cid":null,
  "loggedIn":null,
  "expiresAt":null,
  "services":[]
}`;
var getStoredUser = async (storage) => {
  const fallback2 = JSON.parse(DATA);
  const stored = await storage.get(NAME2);
  if (stored != null && fallback2["f_vsn"] !== stored["f_vsn"]) {
    storage.removeItem(NAME2);
    return fallback2;
  }
  return stored || fallback2;
};
var makeHandlers = (context) => {
  const getStorageProvider = async () => {
    if (context.getStorageProvider)
      return await context.getStorageProvider();
    return await context.config.first(["fcl.storage", "fcl.storage.default"], void 0);
  };
  return {
    [INIT]: async (ctx) => {
      if (typeof window === "undefined") {
        console.warn(`
        %cFCL Warning
        ============================
        "currentUser" is only available in the browser.
        For more info, please see the docs: https://docs.onflow.org/fcl/
        ============================
        `, "font-weight:bold;font-family:monospace;");
      }
      ctx.merge(JSON.parse(DATA));
      const storage = await getStorageProvider();
      if (storage.can) {
        const user = await getStoredUser(storage);
        if (notExpired(user))
          ctx.merge(user);
      }
    },
    [SUBSCRIBE]: (ctx, letter) => {
      ctx.subscribe(letter.from);
      ctx.send(letter.from, UPDATED3, {
        ...ctx.all()
      });
    },
    [UNSUBSCRIBE]: (ctx, letter) => {
      ctx.unsubscribe(letter.from);
    },
    [SNAPSHOT2]: async (ctx, letter) => {
      letter.reply({
        ...ctx.all()
      });
    },
    [SET_CURRENT_USER]: async (ctx, letter, data) => {
      ctx.merge(data);
      const storage = await getStorageProvider();
      if (storage.can)
        storage.put(NAME2, ctx.all());
      ctx.broadcast(UPDATED3, {
        ...ctx.all()
      });
    },
    [DEL_CURRENT_USER]: async (ctx, letter) => {
      ctx.merge(JSON.parse(DATA));
      const storage = await getStorageProvider();
      if (storage.can)
        storage.put(NAME2, ctx.all());
      ctx.broadcast(UPDATED3, {
        ...ctx.all()
      });
    }
  };
};
var spawnCurrentUser = (context) => {
  spawn(makeHandlers(context), context.actorName);
};
function notExpired(user) {
  return user.expiresAt == null || user.expiresAt === 0 || user.expiresAt > Date.now();
}
async function getAccountProofData(context) {
  var _a2;
  let accountProofDataResolver = await context.config.get("fcl.accountProof.resolver");
  if (accountProofDataResolver == null)
    return;
  if (!isFn2(accountProofDataResolver)) {
    log({
      title: "Account Proof Data Resolver must be a function",
      message: `Check fcl.accountProof.resolver configuration.
                Expected: fcl.accountProof.resolver: async () => { ... }
                Received: fcl.accountProof.resolver: ${typeof accountProofDataResolver}
                `,
      level: LEVELS.warn
    });
    return;
  }
  const accountProofData = {
    ...await accountProofDataResolver()
  };
  const origin = (_a2 = window == null ? void 0 : window.location) == null ? void 0 : _a2.origin;
  if (accountProofData.appIdentifier) {
    if (origin) {
      log.deprecate({
        pkg: "FCL",
        subject: "appIdentifier in fcl.accountProof.resolver",
        message: "Manually set app identifiers in the account proof resolver function are now deprecated.  These are now automatically set to the application origin URL by FCL",
        transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/TRANSITIONS.md#0002-deprecate-appIdentifier-field-in-account-proof-resolver"
      });
      invariant(typeof accountProofData.appIdentifier === "string", "appIdentifier must be a string");
    }
  } else {
    invariant(origin, "The appIdentifier (origin) could not be inferred from the window.location.origin.  Please set the appIdentifier manually in the fcl.accountProof.resolver function.");
    accountProofData.appIdentifier = origin;
  }
  invariant(/^[0-9a-f]+$/i.test(accountProofData.nonce), "Nonce must be a hex string");
  return accountProofData;
}
var makeConfig = async (_ref) => {
  let {
    discoveryAuthnInclude,
    discoveryAuthnExclude,
    discoveryFeaturesSuggested
  } = _ref;
  return {
    client: {
      discoveryAuthnInclude,
      discoveryAuthnExclude,
      discoveryFeaturesSuggested,
      clientServices: await makeDiscoveryServices(),
      supportedStrategies: getServiceRegistry().getStrategies()
    }
  };
};
var createAuthenticate = (context) => (
  /**
   * @description Calling this method will authenticate the current user via any wallet that supports FCL. Once called, FCL will initiate communication with the configured `discovery.wallet` endpoint which lets the user select a wallet to authenticate with. Once the wallet provider has authenticated the user, FCL will set the values on the current user object for future use and authorization.
   *
   * This method can only be used in web browsers.
   *
   * `discovery.wallet` value must be set in the configuration before calling this method. See FCL Configuration.
   *
   * The default discovery endpoint will open an iframe overlay to let the user choose a supported wallet.
   *
   * `authenticate` can also take a service returned from discovery with `fcl.authenticate(\{ service \})`.
   *
   * @param opts Authentication options
   * @param opts.service Optional service to use for authentication. A service returned from discovery can be passed here.
   * @param opts.redir Optional redirect flag. Defaults to false.
   * @param opts.forceReauth Optional force re-authentication flag. Defaults to false.
   * @returns Promise that resolves to the authenticated CurrentUser object or undefined
   *
   * @example
   * import * as fcl from '@onflow/fcl';
   * fcl
   *   .config()
   *   .put('accessNode.api', 'https://rest-testnet.onflow.org')
   *   .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');
   * // anywhere on the page
   * fcl.authenticate();
   */
  async function() {
    var _a2, _b, _c2;
    let {
      service,
      redir = false,
      forceReauth = false
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (service && !((_a2 = service == null ? void 0 : service.provider) == null ? void 0 : _a2.is_installed) && ((_b = service == null ? void 0 : service.provider) == null ? void 0 : _b.requires_install)) {
      window.location.href = (_c2 = service == null ? void 0 : service.provider) == null ? void 0 : _c2.install_link;
      return;
    }
    return new Promise(async (resolve2, reject) => {
      var _a3;
      spawnCurrentUser(context);
      const opts = {
        redir
      };
      const user = await createSnapshot(context)();
      const refreshService = serviceOfType(user.services, "authn-refresh");
      let accountProofData;
      if (user.loggedIn && !forceReauth) {
        if (refreshService) {
          try {
            const response2 = await execService(context, {
              service: refreshService,
              msg: accountProofData,
              opts,
              platform: context.platform,
              user
            });
            send(context.actorName, SET_CURRENT_USER, await buildUser(response2));
          } catch (error) {
            log({
              title: `${error.name} Could not refresh wallet authentication.`,
              message: error.message,
              level: LEVELS.error
            });
          } finally {
            return resolve2(await createSnapshot(context)());
          }
        } else {
          return resolve2(user);
        }
      }
      try {
        accountProofData = await getAccountProofData(context);
      } catch (error) {
        log({
          title: `${error.name} On Authentication: Could not resolve account proof data.`,
          message: error.message,
          level: LEVELS.error
        });
        return reject(error);
      }
      try {
        const discoveryService = await getDiscoveryService(context, service);
        const response2 = await execService(context, {
          service: discoveryService,
          msg: accountProofData,
          config: await makeConfig(discoveryService),
          opts,
          platform: context.platform,
          execStrategy: (_a3 = context.discovery) == null ? void 0 : _a3.execStrategy,
          user
        });
        send(context.actorName, SET_CURRENT_USER, await buildUser(response2));
      } catch (error) {
        log({
          title: `${error} On Authentication`,
          message: error,
          level: LEVELS.error
        });
      } finally {
        resolve2(await createSnapshot(context)());
      }
    });
  }
);
function createUnauthenticate(context) {
  return function unauthenticate2() {
    spawnCurrentUser(context);
    send(context.actorName, DEL_CURRENT_USER);
  };
}
var normalizePreAuthzResponse = (authz2) => ({
  f_type: "PreAuthzResponse",
  f_vsn: "1.0.0",
  proposer: (authz2 || {}).proposer,
  payer: (authz2 || {}).payer || [],
  authorization: (authz2 || {}).authorization || []
});
var createResolvePreAuthz = (context) => (authz2, _ref2) => {
  let {
    user
  } = _ref2;
  const resp = normalizePreAuthzResponse(authz2);
  const axs = [];
  if (resp.proposer != null)
    axs.push(["PROPOSER", resp.proposer]);
  for (let az of resp.payer || [])
    axs.push(["PAYER", az]);
  for (let az of resp.authorization || [])
    axs.push(["AUTHORIZER", az]);
  var result = axs.map((_ref3) => {
    let [role, az] = _ref3;
    return {
      tempId: [az.identity.address, az.identity.keyId].join("|"),
      addr: az.identity.address,
      keyId: az.identity.keyId,
      signingFunction(signable) {
        return execService(context, {
          service: az,
          msg: signable,
          platform: context.platform,
          user
        });
      },
      role: {
        proposer: role === "PROPOSER",
        payer: role === "PAYER",
        authorizer: role === "AUTHORIZER"
      }
    };
  });
  return result;
};
var createAuthorization = (context) => (
  /**
   * @description Produces the needed authorization details for the current user to submit transactions to Flow
   * It defines a signing function that connects to a user's wallet provider to produce signatures to submit transactions.
   *
   * @param account Account object
   * @returns Account object with signing function
   * */
  async (account2) => {
    spawnCurrentUser(context);
    return {
      ...account2,
      tempId: "CURRENT_USER",
      async resolve(account3, preSignable) {
        const user = await createAuthenticate(context)({
          redir: true
        });
        const authz2 = serviceOfType(user.services, "authz");
        const preAuthz = serviceOfType(user.services, "pre-authz");
        if (preAuthz)
          return createResolvePreAuthz(context)(await execService(context, {
            service: preAuthz,
            msg: preSignable,
            platform: context.platform,
            user
          }), {
            user
          });
        if (authz2) {
          return {
            ...account3,
            tempId: "CURRENT_USER",
            resolve: null,
            addr: sansPrefix(authz2.identity.address),
            keyId: authz2.identity.keyId,
            sequenceNum: null,
            signature: null,
            async signingFunction(signable) {
              return normalizeCompositeSignature(await execService(context, {
                service: authz2,
                msg: signable,
                opts: {
                  includeOlderJsonRpcCall: true
                },
                platform: context.platform,
                user
              }));
            }
          };
        }
        throw new Error("No Authz or PreAuthz Service configured for CURRENT_USER");
      }
    };
  }
);
function createSubscribe2(context) {
  return function subscribe4(callback) {
    spawnCurrentUser(context);
    const EXIT2 = "@EXIT";
    const self2 = spawn(async (ctx) => {
      ctx.send(context.actorName, SUBSCRIBE);
      while (1) {
        const letter = await ctx.receive();
        if (letter.tag === EXIT2) {
          ctx.send(context.actorName, UNSUBSCRIBE);
          return;
        }
        callback(letter.data);
      }
    });
    return () => send(self2, EXIT2);
  };
}
function createSnapshot(context) {
  return function snapshot2() {
    spawnCurrentUser(context);
    return send(context.actorName, SNAPSHOT2, null, {
      expectReply: true,
      timeout: 0
    });
  };
}
var createResolveArgument = (config3) => async () => {
  const {
    addr
  } = await createAuthenticate(config3)();
  return arg(withPrefix2(addr), types_module_exports.Address);
};
var makeSignable = (msg) => {
  invariant(/^[0-9a-f]+$/i.test(msg), "Message must be a hex string");
  return {
    message: msg
  };
};
var createSignUserMessage = (context) => (
  /**
   * @description A method to use allowing the user to personally sign data via FCL Compatible Wallets/Services.
   *
   * This method requires the current user's wallet to support a signing service endpoint. Currently, only Blocto is compatible with this feature by default.
   *
   * @param msg A hexadecimal string to be signed
   * @returns An Array of CompositeSignatures: \{`addr`, `keyId`, `signature`\}
   *
   * @example
   * import * as fcl from '@onflow/fcl';
   *
   * export const signMessage = async () => {
   *   const MSG = Buffer.from('FOO').toString('hex');
   *   try {
   *     return await currentUser.signUserMessage(MSG);
   *   } catch (error) {
   *     console.log(error);
   *   }
   * };
   */
  async (msg) => {
    spawnCurrentUser(context);
    const user = await createAuthenticate(context)({
      redir: true
    });
    const signingService = serviceOfType(user.services, "user-signature");
    invariant(signingService, "Current user must have authorized a signing service.");
    try {
      const response2 = await execService(context, {
        service: signingService,
        msg: makeSignable(msg),
        platform: context.platform,
        user
      });
      if (Array.isArray(response2)) {
        return response2.map((compSigs) => normalizeCompositeSignature(compSigs));
      } else {
        return [normalizeCompositeSignature(response2)];
      }
    } catch (error) {
      return error;
    }
  }
);
var _createUser = (context) => {
  const currentUser2 = {
    authenticate: createAuthenticate(context),
    unauthenticate: createUnauthenticate(context),
    authorization: createAuthorization(context),
    signUserMessage: createSignUserMessage(context),
    subscribe: createSubscribe2(context),
    snapshot: createSnapshot(context),
    resolveArgument: createResolveArgument(context)
  };
  return Object.assign(() => {
    return {
      ...currentUser2
    };
  }, {
    ...currentUser2
  });
};
var createUser = (context) => {
  return _createUser({
    ...context,
    getStorageProvider: async () => context.storage,
    discovery: context.discovery,
    actorName: `${NAME2}_${v4_default2()}`
  });
};
var getCurrentUser = (cfg) => {
  const partialContext = createPartialGlobalFCLContext();
  const getStorageProvider = async () => {
    if (cfg.getStorageProvider)
      return await cfg.getStorageProvider();
    return await config2.first(["fcl.storage", "fcl.storage.default"], void 0);
  };
  return _createUser({
    ...partialContext,
    getStorageProvider,
    platform: cfg.platform,
    actorName: NAME2,
    discovery: cfg.discovery
  });
};
function serviceEndpoint(service) {
  var _a2;
  const url = new URL$1(service.endpoint);
  if ((_a2 = window == null ? void 0 : window.location) == null ? void 0 : _a2.origin) {
    url.searchParams.append("l6n", window.location.origin);
  }
  if (service.params != null) {
    for (let [key, value] of Object.entries(service.params || {})) {
      url.searchParams.append(key, value);
    }
  }
  return url;
}
function fetchService(service) {
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const method = opts.method || "POST";
  const body = method === "GET" ? void 0 : JSON.stringify(opts.data || service.data || {});
  return fetch(serviceEndpoint(service), {
    method,
    headers: {
      ...service.headers || {},
      ...opts.headers || {},
      "Content-Type": "application/json"
    },
    body
  }).then((d8) => d8.json());
}
function normalizePollingResponse(resp) {
  if (resp == null)
    return null;
  if (!resp["f_vsn"]) {
    return {
      ...POLLING_RESPONSE_PRAGMA,
      status: resp.status ?? "APPROVED",
      reason: resp.reason ?? null,
      data: resp.compositeSignature || resp.data || {
        ...resp
      },
      updates: normalizeBackChannelRpc(resp.authorizationUpdates),
      local: normalizeFrame((resp.local || [])[0])
    };
  }
  switch (resp["f_vsn"]) {
    case "1.0.0":
      return resp;
    default:
      return null;
  }
}
var OPTIONS = {
  "HTTP/GET": "GET",
  "HTTP/POST": "POST"
};
var serviceMethod = (service) => {
  invariant(OPTIONS[service.method], "Invalid Service Method for type back-channel-rpc", {
    service
  });
  return OPTIONS[service.method];
};
async function poll(service) {
  let checkCanContinue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : () => true;
  invariant(service, "Missing Polling Service", {
    service
  });
  const canContinue = checkCanContinue();
  if (!canContinue)
    throw new Error("Externally Halted");
  let resp;
  try {
    if (typeof document !== "undefined" && document.visibilityState === "hidden") {
      await new Promise((r4) => setTimeout(r4, 500));
      return poll(service, checkCanContinue);
    }
    resp = await fetchService(service, {
      method: serviceMethod(service)
    }).then(normalizePollingResponse);
  } catch (error) {
    throw error;
  }
  switch (resp == null ? void 0 : resp.status) {
    case "APPROVED":
      return resp.data;
    case "DECLINED":
      throw new Error(`Declined: ${resp.reason || "No reason supplied."}`);
    default:
      await new Promise((r4) => setTimeout(r4, 500));
      return poll(resp == null ? void 0 : resp.updates, checkCanContinue);
  }
}
var getExecHttpPost = (execLocal2) => async (_ref) => {
  let {
    service,
    body,
    config: config3,
    opts
  } = _ref;
  const resp = await fetchService(service, {
    data: {
      fclVersion: VERSION,
      service: {
        params: service.params,
        data: service.data,
        type: service.type
      },
      config: config3,
      ...body
    }
  }).then(normalizePollingResponse);
  if ((resp == null ? void 0 : resp.status) === "APPROVED") {
    return resp.data;
  } else if ((resp == null ? void 0 : resp.status) === "DECLINED") {
    throw new Error(`Declined: ${resp.reason || "No reason supplied."}`);
  } else if ((resp == null ? void 0 : resp.status) === "REDIRECT") {
    return resp;
  } else if ((resp == null ? void 0 : resp.status) === "PENDING") {
    let canContinue = true;
    let shouldContinue = true;
    const [_6, unmount] = await execLocal2(normalizeLocalView(resp.local), {
      serviceEndpoint,
      onClose: () => shouldContinue = false
    });
    const close2 = () => {
      try {
        unmount();
        shouldContinue = false;
      } catch (error) {
        console.error("Frame Close Error", error);
      }
    };
    const checkCanContinue = () => {
      const offsetCanContinue = canContinue;
      canContinue = shouldContinue;
      return offsetCanContinue;
    };
    return poll(resp.updates, checkCanContinue).then((serviceResponse) => {
      close2();
      return serviceResponse;
    }).catch((error) => {
      console.error(error);
      close2();
      throw error;
    });
  } else {
    console.error(`Auto Decline: Invalid Response`, {
      service,
      resp
    });
    throw new Error(`Auto Decline: Invalid Response`);
  }
};
var CLOSE_EVENT = "FCL:VIEW:CLOSE";
var READY_EVENT = "FCL:VIEW:READY";
var RESPONSE_EVENT = "FCL:VIEW:RESPONSE";
var CUSTOM_RPC = "FCL:VIEW:CUSTOM_RPC";
var _ = (e3) => typeof e3 === "string" && e3.toLowerCase();
var IGNORE = /* @__PURE__ */ new Set(["monetizationstart", "monetizationpending", "monetizationprogress", "monetizationstop"]);
var deprecate = (was, want) => console.warn("DEPRECATION NOTICE", `Received ${was}, please use ${want} for this and future versions of FCL`);
var buildMessageHandler = (_ref) => {
  let {
    close: close2,
    send: send4,
    onReady,
    onResponse,
    onMessage,
    onCustomRpc,
    getSource
  } = _ref;
  let source;
  return (e3) => {
    try {
      source = (getSource == null ? void 0 : getSource()) || source;
    } catch (_6) {
      source = null;
    }
    try {
      if (typeof e3.data !== "object")
        return;
      if (IGNORE.has(e3.data.type))
        return;
      if (source != null && e3.source !== source)
        return;
      if (_(e3.data.type) === _(CLOSE_EVENT))
        close2();
      if (_(e3.data.type) === _(READY_EVENT)) {
        onReady(e3, {
          send: send4,
          close: close2
        });
        source || (source = e3.source);
      }
      if (_(e3.data.type) === _(RESPONSE_EVENT))
        onResponse(e3, {
          send: send4,
          close: close2
        });
      if (_(e3.data.type) === _(CUSTOM_RPC))
        onCustomRpc(e3.data.payload, {
          send: send4,
          close: close2
        });
      onMessage(e3, {
        send: send4,
        close: close2
      });
      if (_(e3.data.type) === _("FCL:FRAME:READY")) {
        deprecate(e3.data.type, READY_EVENT);
        onReady(e3, {
          send: send4,
          close: close2
        });
        source || (source = e3.source);
      }
      if (_(e3.data.type) === _("FCL:FRAME:RESPONSE")) {
        deprecate(e3.data.type, RESPONSE_EVENT);
        onResponse(e3, {
          send: send4,
          close: close2
        });
      }
      if (_(e3.data.type) === _("FCL:FRAME:CLOSE")) {
        deprecate(e3.data.type, CLOSE_EVENT);
        close2();
      }
      if (_(e3.data.type) === _("FCL::CHALLENGE::RESPONSE")) {
        deprecate(e3.data.type, RESPONSE_EVENT);
        onResponse(e3, {
          send: send4,
          close: close2
        });
      }
      if (_(e3.data.type) === _("FCL::AUTHZ_READY")) {
        deprecate(e3.data.type, READY_EVENT);
        onReady(e3, {
          send: send4,
          close: close2
        });
        source || (source = e3.source);
      }
      if (_(e3.data.type) === _("FCL::CHALLENGE::CANCEL")) {
        deprecate(e3.data.type, CLOSE_EVENT);
        close2();
      }
      if (_(e3.data.type) === _("FCL::CANCEL")) {
        deprecate(e3.data.type, CLOSE_EVENT);
        close2();
      }
    } catch (error) {
      console.error("Frame Callback Error", error);
      close2();
    }
  };
};
function createFCLContext(config3) {
  var _a2;
  let contracts;
  if (config3.flowJson) {
    invariant(!!config3.flowNetwork, "If flowJson is provided, flowNetwork must also be specified.");
    const cleanedNetwork = config3.flowNetwork.toLowerCase().replace(/^local$/, "emulator");
    invariant(cleanedNetwork === "mainnet" || cleanedNetwork === "testnet" || cleanedNetwork === "emulator", `Invalid flowNetwork: ${config3.flowNetwork}. Must be one of: mainnet, testnet, emulator.`);
    contracts = getContracts(config3.flowJson, cleanedNetwork);
  }
  const sdk = createSdkClient({
    accessNodeUrl: config3.accessNodeUrl,
    transport: config3.transport,
    computeLimit: config3.computeLimit,
    customResolver: config3.customResolver,
    customDecoders: config3.customDecoders,
    contracts
  });
  const configService = createConfigService(config3);
  const currentUser2 = createUser({
    platform: config3.platform,
    storage: config3.storage,
    config: configService,
    discovery: {
      execStrategy: (_a2 = config3.discovery) == null ? void 0 : _a2.execStrategy
    },
    sdk
  });
  return {
    storage: config3.storage,
    currentUser: currentUser2,
    sdk,
    config: configService,
    platform: config3.platform
  };
}
function createConfigService(config3) {
  const configStore = /* @__PURE__ */ new Map([["platform", config3.platform], ["discovery.wallet", config3.discoveryWallet], ["discovery.wallet.method", config3.discoveryWalletMethod], ["discovery.authn.endpoint", config3.discoveryAuthnEndpoint], ["flow.network", config3.flowNetwork], ["accessNode.api", config3.accessNodeUrl], ["fcl.limit", config3.computeLimit], ["app.detail.title", config3.appDetailTitle], ["app.detail.icon", config3.appDetailIcon], ["app.detail.description", config3.appDetailDescription], ["app.detail.url", config3.appDetailUrl], ["service.OpenID.scopes", config3.serviceOpenIdScopes]]);
  for (const [key, value] of configStore.entries()) {
    if (value === void 0) {
      configStore.delete(key);
    }
  }
  const subscribers = /* @__PURE__ */ new Set();
  const configService = {
    get: async (key, fallback2) => {
      return configStore.has(key) ? configStore.get(key) : fallback2;
    },
    put: async (key, value) => {
      configStore.set(key, value);
      subscribers.forEach((fn3) => fn3(configStore));
      return configService;
    },
    update: async (key, updateFn) => {
      const oldValue = configStore.get(key);
      const newValue = updateFn(oldValue);
      configStore.set(key, newValue);
      subscribers.forEach((fn3) => fn3(configStore));
      return configService;
    },
    delete: async (key) => {
      configStore.delete(key);
      subscribers.forEach((fn3) => fn3(configStore));
      return configService;
    },
    where: async (pattern) => {
      const result = {};
      for (const [key, value] of configStore.entries()) {
        if (pattern.test(key)) {
          result[key] = value;
        }
      }
      return result;
    },
    first: async (keys2, defaultValue) => {
      if (typeof keys2 === "string")
        keys2 = [keys2];
      for (const key of keys2) {
        if (configStore.has(key)) {
          return configStore.get(key);
        }
      }
      return defaultValue;
    },
    subscribe: (callback) => {
      subscribers.add(callback);
      return () => {
        subscribers.delete(callback);
      };
    },
    all: async () => {
      return Object.fromEntries(configStore.entries());
    }
  };
  return configService;
}
function createFlowClientCore(params2) {
  const context = createFCLContext({
    ...params2,
    transport: params2.transport || httpTransport
  });
  return {
    // Global services
    currentUser: context.currentUser,
    // Execution methods
    mutate: createMutate(context),
    query: createQuery(context),
    queryRaw: createQueryRaw(context),
    verifyUserSignatures: createVerifyUserSignatures(context),
    getChainId: createGetChainId(context),
    // Streaming helpers
    tx: createTransaction(context),
    events: createEvents(context),
    // Authentication methods
    authenticate: context.currentUser.authenticate,
    unauthenticate: context.currentUser.unauthenticate,
    signUserMessage: context.currentUser.signUserMessage,
    // Utility methods
    serialize: createSerialize(context),
    // Re-export the SDK methods
    ...context.sdk
  };
}
watchForChainIdChanges();

// node_modules/@onflow/util-uid/dist/util-uid.module.js
var HEX = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
var T = HEX.length;
function uid() {
  let str = "", num = 32;
  while (num--)
    str += HEX[Math.random() * T | 0];
  return str;
}

// node_modules/detect-browser/es/index.js
var __spreadArray = function(to4, from8, pack) {
  if (pack || arguments.length === 2)
    for (var i6 = 0, l8 = from8.length, ar4; i6 < l8; i6++) {
      if (ar4 || !(i6 in from8)) {
        if (!ar4)
          ar4 = Array.prototype.slice.call(from8, 0, i6);
        ar4[i6] = from8[i6];
      }
    }
  return to4.concat(ar4 || Array.prototype.slice.call(from8));
};
var BrowserInfo = (
  /** @class */
  function() {
    function BrowserInfo2(name2, version2, os2) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.type = "browser";
    }
    return BrowserInfo2;
  }()
);
var NodeInfo = (
  /** @class */
  function() {
    function NodeInfo2(version2) {
      this.version = version2;
      this.type = "node";
      this.name = "node";
      this.os = process.platform;
    }
    return NodeInfo2;
  }()
);
var SearchBotDeviceInfo = (
  /** @class */
  function() {
    function SearchBotDeviceInfo2(name2, version2, os2, bot) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.bot = bot;
      this.type = "bot-device";
    }
    return SearchBotDeviceInfo2;
  }()
);
var BotInfo = (
  /** @class */
  function() {
    function BotInfo2() {
      this.type = "bot";
      this.bot = true;
      this.name = "bot";
      this.version = null;
      this.os = null;
    }
    return BotInfo2;
  }()
);
var ReactNativeInfo = (
  /** @class */
  function() {
    function ReactNativeInfo2() {
      this.type = "react-native";
      this.name = "react-native";
      this.version = null;
      this.os = null;
    }
    return ReactNativeInfo2;
  }()
);
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", SEARCHBOX_UA_REGEX]
];
var operatingSystemRules = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua2) {
  return ua2 !== "" && userAgentRules.reduce(function(matched, _a2) {
    var browser = _a2[0], regex = _a2[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua2);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua2) {
  var matchedRule = matchUserAgent(ua2);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version2 = versionParts.join(".");
  var os2 = detectOS(ua2);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua2);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name2, version2, os2, searchBotMatch[1]);
  }
  return new BrowserInfo(name2, version2, os2);
}
function detectOS(ua2) {
  for (var ii2 = 0, count = operatingSystemRules.length; ii2 < count; ii2++) {
    var _a2 = operatingSystemRules[ii2], os2 = _a2[0], regex = _a2[1];
    var match = regex.exec(ua2);
    if (match) {
      return os2;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode2 = typeof process !== "undefined" && process.version;
  return isNode2 ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii2 = 0; ii2 < count; ii2++) {
    output.push("0");
  }
  return output;
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_time2 = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress(publicKey) {
  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress(`0x${address}`);
}

// node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey({ hash, signature }) {
  const hashHex = isHex(hash) ? hash : toHex(hash);
  const { secp256k1: secp256k12 } = await import("./secp256k1-EZXXFIAN.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r: r4, s: s4, v: v11, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v11);
      const recoveryBit2 = toRecoveryBit(yParityOrV2);
      return new secp256k12.Signature(hexToBigInt(r4), hexToBigInt(s4)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex(signature) ? signature : toHex(signature);
    if (size(signatureHex) !== 65)
      throw new Error("invalid signature length");
    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit(yParityOrV);
    return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress({ hash, signature }) {
  return publicKeyToAddress(await recoverPublicKey({ hash, signature }));
}

// node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction(transaction3) {
  const transaction_ = {
    ...transaction3,
    blockHash: transaction3.blockHash ? transaction3.blockHash : null,
    blockNumber: transaction3.blockNumber ? BigInt(transaction3.blockNumber) : null,
    chainId: transaction3.chainId ? hexToNumber(transaction3.chainId) : void 0,
    gas: transaction3.gas ? BigInt(transaction3.gas) : void 0,
    gasPrice: transaction3.gasPrice ? BigInt(transaction3.gasPrice) : void 0,
    maxFeePerBlobGas: transaction3.maxFeePerBlobGas ? BigInt(transaction3.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction3.maxFeePerGas ? BigInt(transaction3.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction3.maxPriorityFeePerGas ? BigInt(transaction3.maxPriorityFeePerGas) : void 0,
    nonce: transaction3.nonce ? hexToNumber(transaction3.nonce) : void 0,
    to: transaction3.to ? transaction3.to : null,
    transactionIndex: transaction3.transactionIndex ? Number(transaction3.transactionIndex) : null,
    type: transaction3.type ? transactionType[transaction3.type] : void 0,
    typeHex: transaction3.type ? transaction3.type : void 0,
    value: transaction3.value ? BigInt(transaction3.value) : void 0,
    v: transaction3.v ? BigInt(transaction3.v) : void 0
  };
  if (transaction3.authorizationList)
    transaction_.authorizationList = formatAuthorizationList(transaction3.authorizationList);
  transaction_.yParity = (() => {
    if (transaction3.yParity)
      return Number(transaction3.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction = defineFormatter("transaction", formatTransaction);
function formatAuthorizationList(authorizationList) {
  return authorizationList.map((authorization2) => ({
    address: authorization2.address,
    chainId: Number(authorization2.chainId),
    nonce: Number(authorization2.nonce),
    r: authorization2.r,
    s: authorization2.s,
    yParity: Number(authorization2.yParity)
  }));
}

// node_modules/viem/_esm/utils/formatters/block.js
function formatBlock(block2) {
  const transactions = (block2.transactions ?? []).map((transaction3) => {
    if (typeof transaction3 === "string")
      return transaction3;
    return formatTransaction(transaction3);
  });
  return {
    ...block2,
    baseFeePerGas: block2.baseFeePerGas ? BigInt(block2.baseFeePerGas) : null,
    blobGasUsed: block2.blobGasUsed ? BigInt(block2.blobGasUsed) : void 0,
    difficulty: block2.difficulty ? BigInt(block2.difficulty) : void 0,
    excessBlobGas: block2.excessBlobGas ? BigInt(block2.excessBlobGas) : void 0,
    gasLimit: block2.gasLimit ? BigInt(block2.gasLimit) : void 0,
    gasUsed: block2.gasUsed ? BigInt(block2.gasUsed) : void 0,
    hash: block2.hash ? block2.hash : null,
    logsBloom: block2.logsBloom ? block2.logsBloom : null,
    nonce: block2.nonce ? block2.nonce : null,
    number: block2.number ? BigInt(block2.number) : null,
    size: block2.size ? BigInt(block2.size) : void 0,
    timestamp: block2.timestamp ? BigInt(block2.timestamp) : void 0,
    transactions,
    totalDifficulty: block2.totalDifficulty ? BigInt(block2.totalDifficulty) : null
  };
}
var defineBlock = defineFormatter("block", formatBlock);

// node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [
      address,
      typeof blockNumber === "bigint" ? numberToHex(blockNumber) : blockTag
    ]
  }, {
    dedupe: Boolean(blockNumber)
  });
  return hexToNumber(count);
}

// node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// node_modules/viem/_esm/utils/formatters/log.js
function formatLog(log2, { args: args2, eventName } = {}) {
  return {
    ...log2,
    blockHash: log2.blockHash ? log2.blockHash : null,
    blockNumber: log2.blockNumber ? BigInt(log2.blockNumber) : null,
    logIndex: log2.logIndex ? Number(log2.logIndex) : null,
    transactionHash: log2.transactionHash ? log2.transactionHash : null,
    transactionIndex: log2.transactionIndex ? Number(log2.transactionIndex) : null,
    ...eventName ? { args: args2, eventName } : {}
  };
}

// node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace = new LruMap(128);

// node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log2) => formatLog(log2)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt = defineFormatter("transactionReceipt", formatTransactionReceipt);

// node_modules/viem/_esm/actions/wallet/sendCalls.js
var fallbackTransactionErrorMagicIdentifier = numberToHex(0, {
  size: 32
});

// node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache = new LruMap(8192);

// node_modules/viem/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W = new Uint32Array(80);
var SHA1 = class extends HashMD {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV[0] | 0;
    this.B = SHA1_IV[1] | 0;
    this.C = SHA1_IV[2] | 0;
    this.D = SHA1_IV[3] | 0;
    this.E = SHA1_IV[4] | 0;
  }
  get() {
    const { A: A5, B: B5, C: C7, D: D3, E: E6 } = this;
    return [A5, B5, C7, D3, E6];
  }
  set(A5, B5, C7, D3, E6) {
    this.A = A5 | 0;
    this.B = B5 | 0;
    this.C = C7 | 0;
    this.D = D3 | 0;
    this.E = E6 | 0;
  }
  process(view, offset) {
    for (let i6 = 0; i6 < 16; i6++, offset += 4)
      SHA1_W[i6] = view.getUint32(offset, false);
    for (let i6 = 16; i6 < 80; i6++)
      SHA1_W[i6] = rotl(SHA1_W[i6 - 3] ^ SHA1_W[i6 - 8] ^ SHA1_W[i6 - 14] ^ SHA1_W[i6 - 16], 1);
    let { A: A5, B: B5, C: C7, D: D3, E: E6 } = this;
    for (let i6 = 0; i6 < 80; i6++) {
      let F4, K7;
      if (i6 < 20) {
        F4 = Chi(B5, C7, D3);
        K7 = 1518500249;
      } else if (i6 < 40) {
        F4 = B5 ^ C7 ^ D3;
        K7 = 1859775393;
      } else if (i6 < 60) {
        F4 = Maj(B5, C7, D3);
        K7 = 2400959708;
      } else {
        F4 = B5 ^ C7 ^ D3;
        K7 = 3395469782;
      }
      const T7 = rotl(A5, 5) + F4 + E6 + K7 + SHA1_W[i6] | 0;
      E6 = D3;
      D3 = C7;
      C7 = rotl(B5, 30);
      B5 = A5;
      A5 = T7;
    }
    A5 = A5 + this.A | 0;
    B5 = B5 + this.B | 0;
    C7 = C7 + this.C | 0;
    D3 = D3 + this.D | 0;
    E6 = E6 + this.E | 0;
    this.set(A5, B5, C7, D3, E6);
  }
  roundClean() {
    clean(SHA1_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean(this.buffer);
  }
};
var sha13 = createHasher(() => new SHA1());
var p32 = Math.pow(2, 32);
var K = Array.from({ length: 64 }, (_6, i6) => Math.floor(p32 * Math.abs(Math.sin(i6 + 1))));
var MD5_IV = SHA1_IV.slice(0, 4);
var MD5_W = new Uint32Array(16);
var MD5 = class extends HashMD {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV[0] | 0;
    this.B = MD5_IV[1] | 0;
    this.C = MD5_IV[2] | 0;
    this.D = MD5_IV[3] | 0;
  }
  get() {
    const { A: A5, B: B5, C: C7, D: D3 } = this;
    return [A5, B5, C7, D3];
  }
  set(A5, B5, C7, D3) {
    this.A = A5 | 0;
    this.B = B5 | 0;
    this.C = C7 | 0;
    this.D = D3 | 0;
  }
  process(view, offset) {
    for (let i6 = 0; i6 < 16; i6++, offset += 4)
      MD5_W[i6] = view.getUint32(offset, true);
    let { A: A5, B: B5, C: C7, D: D3 } = this;
    for (let i6 = 0; i6 < 64; i6++) {
      let F4, g7, s4;
      if (i6 < 16) {
        F4 = Chi(B5, C7, D3);
        g7 = i6;
        s4 = [7, 12, 17, 22];
      } else if (i6 < 32) {
        F4 = Chi(D3, B5, C7);
        g7 = (5 * i6 + 1) % 16;
        s4 = [5, 9, 14, 20];
      } else if (i6 < 48) {
        F4 = B5 ^ C7 ^ D3;
        g7 = (3 * i6 + 5) % 16;
        s4 = [4, 11, 16, 23];
      } else {
        F4 = C7 ^ (B5 | ~D3);
        g7 = 7 * i6 % 16;
        s4 = [6, 10, 15, 21];
      }
      F4 = F4 + A5 + K[i6] + MD5_W[g7];
      A5 = D3;
      D3 = C7;
      C7 = B5;
      B5 = B5 + rotl(F4, s4[i6 % 4]);
    }
    A5 = A5 + this.A | 0;
    B5 = B5 + this.B | 0;
    C7 = C7 + this.C | 0;
    D3 = D3 + this.D | 0;
    this.set(A5, B5, C7, D3);
  }
  roundClean() {
    clean(MD5_W);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean(this.buffer);
  }
};
var md53 = createHasher(() => new MD5());
var Rho160 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id160 = (() => Uint8Array.from(new Array(16).fill(0).map((_6, i6) => i6)))();
var Pi160 = (() => Id160.map((i6) => (9 * i6 + 5) % 16))();
var idxLR = (() => {
  const L5 = [Id160];
  const R4 = [Pi160];
  const res = [L5, R4];
  for (let i6 = 0; i6 < 4; i6++)
    for (let j6 of res)
      j6.push(j6[i6].map((k6) => Rho160[k6]));
  return res;
})();
var idxL = (() => idxLR[0])();
var idxR = (() => idxLR[1])();
var shifts160 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i6) => Uint8Array.from(i6));
var shiftsL160 = idxL.map((idx, i6) => idx.map((j6) => shifts160[i6][j6]));
var shiftsR160 = idxR.map((idx, i6) => idx.map((j6) => shifts160[i6][j6]));
var Kl160 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr160 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f(group, x7, y6, z7) {
  if (group === 0)
    return x7 ^ y6 ^ z7;
  if (group === 1)
    return x7 & y6 | ~x7 & z7;
  if (group === 2)
    return (x7 | ~y6) ^ z7;
  if (group === 3)
    return x7 & z7 | y6 & ~z7;
  return x7 ^ (y6 | ~z7);
}
var BUF_160 = new Uint32Array(16);
var RIPEMD160 = class extends HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i6 = 0; i6 < 16; i6++, offset += 4)
      BUF_160[i6] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar4 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr3 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl160[group], hbr = Kr160[group];
      const rl = idxL[group], rr4 = idxR[group];
      const sl = shiftsL160[group], sr2 = shiftsR160[group];
      for (let i6 = 0; i6 < 16; i6++) {
        const tl = rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i6]] + hbl, sl[i6]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i6 = 0; i6 < 16; i6++) {
        const tr2 = rotl(ar4 + ripemd_f(rGroup, br4, cr3, dr4) + BUF_160[rr4[i6]] + hbr, sr2[i6]) + er3 | 0;
        ar4 = er3, er3 = dr4, dr4 = rotl(cr3, 10) | 0, cr3 = br4, br4 = tr2;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar4 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr3 | 0);
  }
  roundClean() {
    clean(BUF_160);
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = createHasher(() => new RIPEMD160());

// node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise2 = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise2;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise2 = promiseMap.get(key);
      if (!promise2) {
        promise2 = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise2);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise2;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager = createNonceManager({
  source: jsonRpc()
});

// node_modules/viem/_esm/utils/rpc/id.js
function createIdStore() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache = createIdStore();

// node_modules/ox/node_modules/@noble/hashes/esm/_md.js
function setBigUint64(view, byteOffset, value, isLE) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h6 = isLE ? 4 : 0;
  const l8 = isLE ? 0 : 4;
  view.setUint32(byteOffset + h6, wh, isLE);
  view.setUint32(byteOffset + l8, wl, isLE);
}
function Chi2(a4, b5, c8) {
  return a4 & b5 ^ ~a4 & c8;
}
function Maj2(a4, b5, c8) {
  return a4 & b5 ^ a4 & c8 ^ b5 & c8;
}
var HashMD2 = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE) {
    super();
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    aexists(this);
    data = toBytes(data);
    abytes(data);
    const { view, buffer, blockLen } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists(this);
    aoutput(out, this);
    this.finished = true;
    const { buffer, view, blockLen, isLE } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    clean2(this.buffer.subarray(pos));
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i6 = pos; i6 < blockLen; i6++)
      buffer[i6] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i6 = 0; i6 < outLen; i6++)
      oview.setUint32(4 * i6, state[i6], isLE);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to4) {
    to4 || (to4 = new this.constructor());
    to4.set(...this.get());
    const { blockLen, buffer, length: length2, finished, destroyed, pos } = this;
    to4.destroyed = destroyed;
    to4.finished = finished;
    to4.length = length2;
    to4.pos = pos;
    if (length2 % blockLen)
      to4.buffer.set(buffer);
    return to4;
  }
  clone() {
    return this._cloneInto();
  }
};
var SHA256_IV = Uint32Array.from([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA224_IV = Uint32Array.from([
  3238371032,
  914150663,
  812702999,
  4144912697,
  4290775857,
  1750603025,
  1694076839,
  3204075428
]);
var SHA384_IV = Uint32Array.from([
  3418070365,
  3238371032,
  1654270250,
  914150663,
  2438529370,
  812702999,
  355462360,
  4144912697,
  1731405415,
  4290775857,
  2394180231,
  1750603025,
  3675008525,
  1694076839,
  1203062813,
  3204075428
]);
var SHA512_IV = Uint32Array.from([
  1779033703,
  4089235720,
  3144134277,
  2227873595,
  1013904242,
  4271175723,
  2773480762,
  1595750129,
  1359893119,
  2917565137,
  2600822924,
  725511199,
  528734635,
  4215389547,
  1541459225,
  327033209
]);

// node_modules/ox/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV2 = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W2 = new Uint32Array(80);
var SHA12 = class extends HashMD2 {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV2[0] | 0;
    this.B = SHA1_IV2[1] | 0;
    this.C = SHA1_IV2[2] | 0;
    this.D = SHA1_IV2[3] | 0;
    this.E = SHA1_IV2[4] | 0;
  }
  get() {
    const { A: A5, B: B5, C: C7, D: D3, E: E6 } = this;
    return [A5, B5, C7, D3, E6];
  }
  set(A5, B5, C7, D3, E6) {
    this.A = A5 | 0;
    this.B = B5 | 0;
    this.C = C7 | 0;
    this.D = D3 | 0;
    this.E = E6 | 0;
  }
  process(view, offset) {
    for (let i6 = 0; i6 < 16; i6++, offset += 4)
      SHA1_W2[i6] = view.getUint32(offset, false);
    for (let i6 = 16; i6 < 80; i6++)
      SHA1_W2[i6] = rotl2(SHA1_W2[i6 - 3] ^ SHA1_W2[i6 - 8] ^ SHA1_W2[i6 - 14] ^ SHA1_W2[i6 - 16], 1);
    let { A: A5, B: B5, C: C7, D: D3, E: E6 } = this;
    for (let i6 = 0; i6 < 80; i6++) {
      let F4, K7;
      if (i6 < 20) {
        F4 = Chi2(B5, C7, D3);
        K7 = 1518500249;
      } else if (i6 < 40) {
        F4 = B5 ^ C7 ^ D3;
        K7 = 1859775393;
      } else if (i6 < 60) {
        F4 = Maj2(B5, C7, D3);
        K7 = 2400959708;
      } else {
        F4 = B5 ^ C7 ^ D3;
        K7 = 3395469782;
      }
      const T7 = rotl2(A5, 5) + F4 + E6 + K7 + SHA1_W2[i6] | 0;
      E6 = D3;
      D3 = C7;
      C7 = rotl2(B5, 30);
      B5 = A5;
      A5 = T7;
    }
    A5 = A5 + this.A | 0;
    B5 = B5 + this.B | 0;
    C7 = C7 + this.C | 0;
    D3 = D3 + this.D | 0;
    E6 = E6 + this.E | 0;
    this.set(A5, B5, C7, D3, E6);
  }
  roundClean() {
    clean2(SHA1_W2);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean2(this.buffer);
  }
};
var sha14 = createHasher2(() => new SHA12());
var p322 = Math.pow(2, 32);
var K2 = Array.from({ length: 64 }, (_6, i6) => Math.floor(p322 * Math.abs(Math.sin(i6 + 1))));
var MD5_IV2 = SHA1_IV2.slice(0, 4);
var MD5_W2 = new Uint32Array(16);
var MD52 = class extends HashMD2 {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV2[0] | 0;
    this.B = MD5_IV2[1] | 0;
    this.C = MD5_IV2[2] | 0;
    this.D = MD5_IV2[3] | 0;
  }
  get() {
    const { A: A5, B: B5, C: C7, D: D3 } = this;
    return [A5, B5, C7, D3];
  }
  set(A5, B5, C7, D3) {
    this.A = A5 | 0;
    this.B = B5 | 0;
    this.C = C7 | 0;
    this.D = D3 | 0;
  }
  process(view, offset) {
    for (let i6 = 0; i6 < 16; i6++, offset += 4)
      MD5_W2[i6] = view.getUint32(offset, true);
    let { A: A5, B: B5, C: C7, D: D3 } = this;
    for (let i6 = 0; i6 < 64; i6++) {
      let F4, g7, s4;
      if (i6 < 16) {
        F4 = Chi2(B5, C7, D3);
        g7 = i6;
        s4 = [7, 12, 17, 22];
      } else if (i6 < 32) {
        F4 = Chi2(D3, B5, C7);
        g7 = (5 * i6 + 1) % 16;
        s4 = [5, 9, 14, 20];
      } else if (i6 < 48) {
        F4 = B5 ^ C7 ^ D3;
        g7 = (3 * i6 + 5) % 16;
        s4 = [4, 11, 16, 23];
      } else {
        F4 = C7 ^ (B5 | ~D3);
        g7 = 7 * i6 % 16;
        s4 = [6, 10, 15, 21];
      }
      F4 = F4 + A5 + K2[i6] + MD5_W2[g7];
      A5 = D3;
      D3 = C7;
      C7 = B5;
      B5 = B5 + rotl2(F4, s4[i6 % 4]);
    }
    A5 = A5 + this.A | 0;
    B5 = B5 + this.B | 0;
    C7 = C7 + this.C | 0;
    D3 = D3 + this.D | 0;
    this.set(A5, B5, C7, D3);
  }
  roundClean() {
    clean2(MD5_W2);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean2(this.buffer);
  }
};
var md54 = createHasher2(() => new MD52());
var Rho1602 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id1602 = (() => Uint8Array.from(new Array(16).fill(0).map((_6, i6) => i6)))();
var Pi1602 = (() => Id1602.map((i6) => (9 * i6 + 5) % 16))();
var idxLR2 = (() => {
  const L5 = [Id1602];
  const R4 = [Pi1602];
  const res = [L5, R4];
  for (let i6 = 0; i6 < 4; i6++)
    for (let j6 of res)
      j6.push(j6[i6].map((k6) => Rho1602[k6]));
  return res;
})();
var idxL2 = (() => idxLR2[0])();
var idxR2 = (() => idxLR2[1])();
var shifts1602 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i6) => Uint8Array.from(i6));
var shiftsL1602 = idxL2.map((idx, i6) => idx.map((j6) => shifts1602[i6][j6]));
var shiftsR1602 = idxR2.map((idx, i6) => idx.map((j6) => shifts1602[i6][j6]));
var Kl1602 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr1602 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f2(group, x7, y6, z7) {
  if (group === 0)
    return x7 ^ y6 ^ z7;
  if (group === 1)
    return x7 & y6 | ~x7 & z7;
  if (group === 2)
    return (x7 | ~y6) ^ z7;
  if (group === 3)
    return x7 & z7 | y6 & ~z7;
  return x7 ^ (y6 | ~z7);
}
var BUF_1602 = new Uint32Array(16);
var RIPEMD1602 = class extends HashMD2 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i6 = 0; i6 < 16; i6++, offset += 4)
      BUF_1602[i6] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar4 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr3 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl1602[group], hbr = Kr1602[group];
      const rl = idxL2[group], rr4 = idxR2[group];
      const sl = shiftsL1602[group], sr2 = shiftsR1602[group];
      for (let i6 = 0; i6 < 16; i6++) {
        const tl = rotl2(al + ripemd_f2(group, bl, cl, dl) + BUF_1602[rl[i6]] + hbl, sl[i6]) + el | 0;
        al = el, el = dl, dl = rotl2(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i6 = 0; i6 < 16; i6++) {
        const tr2 = rotl2(ar4 + ripemd_f2(rGroup, br4, cr3, dr4) + BUF_1602[rr4[i6]] + hbr, sr2[i6]) + er3 | 0;
        ar4 = er3, er3 = dr4, dr4 = rotl2(cr3, 10) | 0, cr3 = br4, br4 = tr2;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar4 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr3 | 0);
  }
  roundClean() {
    clean2(BUF_1602);
  }
  destroy() {
    this.destroyed = true;
    clean2(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd1604 = createHasher2(() => new RIPEMD1602());

// node_modules/ox/node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = BigInt(2 ** 32 - 1);
var _32n = BigInt(32);
function fromBig(n6, le5 = false) {
  if (le5)
    return { h: Number(n6 & U32_MASK64), l: Number(n6 >> _32n & U32_MASK64) };
  return { h: Number(n6 >> _32n & U32_MASK64) | 0, l: Number(n6 & U32_MASK64) | 0 };
}
function split(lst, le5 = false) {
  const len = lst.length;
  let Ah = new Uint32Array(len);
  let Al = new Uint32Array(len);
  for (let i6 = 0; i6 < len; i6++) {
    const { h: h6, l: l8 } = fromBig(lst[i6], le5);
    [Ah[i6], Al[i6]] = [h6, l8];
  }
  return [Ah, Al];
}
var shrSH = (h6, _l, s4) => h6 >>> s4;
var shrSL = (h6, l8, s4) => h6 << 32 - s4 | l8 >>> s4;
var rotrSH = (h6, l8, s4) => h6 >>> s4 | l8 << 32 - s4;
var rotrSL = (h6, l8, s4) => h6 << 32 - s4 | l8 >>> s4;
var rotrBH = (h6, l8, s4) => h6 << 64 - s4 | l8 >>> s4 - 32;
var rotrBL = (h6, l8, s4) => h6 >>> s4 - 32 | l8 << 64 - s4;
var rotlSH = (h6, l8, s4) => h6 << s4 | l8 >>> 32 - s4;
var rotlSL = (h6, l8, s4) => l8 << s4 | h6 >>> 32 - s4;
var rotlBH = (h6, l8, s4) => l8 << s4 - 32 | h6 >>> 64 - s4;
var rotlBL = (h6, l8, s4) => h6 << s4 - 32 | l8 >>> 64 - s4;
function add(Ah, Al, Bh, Bl) {
  const l8 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l8 / 2 ** 32 | 0) | 0, l: l8 | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;

// node_modules/ox/node_modules/@noble/hashes/esm/sha3.js
var _0n = BigInt(0);
var _1n = BigInt(1);
var _2n = BigInt(2);
var _7n = BigInt(7);
var _256n = BigInt(256);
var _0x71n = BigInt(113);
var SHA3_PI = [];
var SHA3_ROTL = [];
var _SHA3_IOTA = [];
for (let round = 0, R4 = _1n, x7 = 1, y6 = 0; round < 24; round++) {
  [x7, y6] = [y6, (2 * x7 + 3 * y6) % 5];
  SHA3_PI.push(2 * (5 * y6 + x7));
  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
  let t2 = _0n;
  for (let j6 = 0; j6 < 7; j6++) {
    R4 = (R4 << _1n ^ (R4 >> _7n) * _0x71n) % _256n;
    if (R4 & _2n)
      t2 ^= _1n << (_1n << BigInt(j6)) - _1n;
  }
  _SHA3_IOTA.push(t2);
}
var IOTAS = split(_SHA3_IOTA, true);
var SHA3_IOTA_H = IOTAS[0];
var SHA3_IOTA_L = IOTAS[1];
var rotlH = (h6, l8, s4) => s4 > 32 ? rotlBH(h6, l8, s4) : rotlSH(h6, l8, s4);
var rotlL = (h6, l8, s4) => s4 > 32 ? rotlBL(h6, l8, s4) : rotlSL(h6, l8, s4);
function keccakP(s4, rounds = 24) {
  const B5 = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x7 = 0; x7 < 10; x7++)
      B5[x7] = s4[x7] ^ s4[x7 + 10] ^ s4[x7 + 20] ^ s4[x7 + 30] ^ s4[x7 + 40];
    for (let x7 = 0; x7 < 10; x7 += 2) {
      const idx1 = (x7 + 8) % 10;
      const idx0 = (x7 + 2) % 10;
      const B0 = B5[idx0];
      const B1 = B5[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B5[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B5[idx1 + 1];
      for (let y6 = 0; y6 < 50; y6 += 10) {
        s4[x7 + y6] ^= Th;
        s4[x7 + y6 + 1] ^= Tl;
      }
    }
    let curH = s4[2];
    let curL = s4[3];
    for (let t2 = 0; t2 < 24; t2++) {
      const shift = SHA3_ROTL[t2];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t2];
      curH = s4[PI];
      curL = s4[PI + 1];
      s4[PI] = Th;
      s4[PI + 1] = Tl;
    }
    for (let y6 = 0; y6 < 50; y6 += 10) {
      for (let x7 = 0; x7 < 10; x7++)
        B5[x7] = s4[y6 + x7];
      for (let x7 = 0; x7 < 10; x7++)
        s4[y6 + x7] ^= ~B5[(x7 + 2) % 10] & B5[(x7 + 4) % 10];
    }
    s4[0] ^= SHA3_IOTA_H[round];
    s4[1] ^= SHA3_IOTA_L[round];
  }
  clean2(B5);
}
var Keccak = class _Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    this.enableXOF = false;
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    anumber(outputLen);
    if (!(0 < blockLen && blockLen < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200);
    this.state32 = u32(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    swap32IfBE(this.state32);
    keccakP(this.state32, this.rounds);
    swap32IfBE(this.state32);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    aexists(this);
    data = toBytes(data);
    abytes(data);
    const { blockLen, state } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i6 = 0; i6 < take; i6++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    aexists(this, false);
    abytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes) {
    anumber(bytes);
    return this.xofInto(new Uint8Array(bytes));
  }
  digestInto(out) {
    aoutput(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    clean2(this.state);
  }
  _cloneInto(to4) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to4 || (to4 = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to4.state32.set(this.state32);
    to4.pos = this.pos;
    to4.posOut = this.posOut;
    to4.finished = this.finished;
    to4.rounds = rounds;
    to4.suffix = suffix;
    to4.outputLen = outputLen;
    to4.enableXOF = enableXOF;
    to4.destroyed = this.destroyed;
    return to4;
  }
};
var gen = (suffix, blockLen, outputLen) => createHasher2(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = (() => gen(6, 144, 224 / 8))();
var sha3_2562 = (() => gen(6, 136, 256 / 8))();
var sha3_384 = (() => gen(6, 104, 384 / 8))();
var sha3_512 = (() => gen(6, 72, 512 / 8))();
var keccak_224 = (() => gen(1, 144, 224 / 8))();
var keccak_256 = (() => gen(1, 136, 256 / 8))();
var keccak_384 = (() => gen(1, 104, 384 / 8))();
var keccak_512 = (() => gen(1, 72, 512 / 8))();
var genShake = (suffix, blockLen, outputLen) => createXOFer((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake128 = (() => genShake(31, 168, 128 / 8))();
var shake256 = (() => genShake(31, 136, 256 / 8))();

// node_modules/ox/node_modules/@noble/hashes/esm/sha2.js
var SHA256_K = Uint32Array.from([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_W = new Uint32Array(64);
var SHA2562 = class extends HashMD2 {
  constructor(outputLen = 32) {
    super(64, outputLen, 8, false);
    this.A = SHA256_IV[0] | 0;
    this.B = SHA256_IV[1] | 0;
    this.C = SHA256_IV[2] | 0;
    this.D = SHA256_IV[3] | 0;
    this.E = SHA256_IV[4] | 0;
    this.F = SHA256_IV[5] | 0;
    this.G = SHA256_IV[6] | 0;
    this.H = SHA256_IV[7] | 0;
  }
  get() {
    const { A: A5, B: B5, C: C7, D: D3, E: E6, F: F4, G: G6, H: H3 } = this;
    return [A5, B5, C7, D3, E6, F4, G6, H3];
  }
  // prettier-ignore
  set(A5, B5, C7, D3, E6, F4, G6, H3) {
    this.A = A5 | 0;
    this.B = B5 | 0;
    this.C = C7 | 0;
    this.D = D3 | 0;
    this.E = E6 | 0;
    this.F = F4 | 0;
    this.G = G6 | 0;
    this.H = H3 | 0;
  }
  process(view, offset) {
    for (let i6 = 0; i6 < 16; i6++, offset += 4)
      SHA256_W[i6] = view.getUint32(offset, false);
    for (let i6 = 16; i6 < 64; i6++) {
      const W15 = SHA256_W[i6 - 15];
      const W22 = SHA256_W[i6 - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W22, 17) ^ rotr(W22, 19) ^ W22 >>> 10;
      SHA256_W[i6] = s1 + SHA256_W[i6 - 7] + s0 + SHA256_W[i6 - 16] | 0;
    }
    let { A: A5, B: B5, C: C7, D: D3, E: E6, F: F4, G: G6, H: H3 } = this;
    for (let i6 = 0; i6 < 64; i6++) {
      const sigma1 = rotr(E6, 6) ^ rotr(E6, 11) ^ rotr(E6, 25);
      const T1 = H3 + sigma1 + Chi2(E6, F4, G6) + SHA256_K[i6] + SHA256_W[i6] | 0;
      const sigma0 = rotr(A5, 2) ^ rotr(A5, 13) ^ rotr(A5, 22);
      const T22 = sigma0 + Maj2(A5, B5, C7) | 0;
      H3 = G6;
      G6 = F4;
      F4 = E6;
      E6 = D3 + T1 | 0;
      D3 = C7;
      C7 = B5;
      B5 = A5;
      A5 = T1 + T22 | 0;
    }
    A5 = A5 + this.A | 0;
    B5 = B5 + this.B | 0;
    C7 = C7 + this.C | 0;
    D3 = D3 + this.D | 0;
    E6 = E6 + this.E | 0;
    F4 = F4 + this.F | 0;
    G6 = G6 + this.G | 0;
    H3 = H3 + this.H | 0;
    this.set(A5, B5, C7, D3, E6, F4, G6, H3);
  }
  roundClean() {
    clean2(SHA256_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    clean2(this.buffer);
  }
};
var SHA2242 = class extends SHA2562 {
  constructor() {
    super(28);
    this.A = SHA224_IV[0] | 0;
    this.B = SHA224_IV[1] | 0;
    this.C = SHA224_IV[2] | 0;
    this.D = SHA224_IV[3] | 0;
    this.E = SHA224_IV[4] | 0;
    this.F = SHA224_IV[5] | 0;
    this.G = SHA224_IV[6] | 0;
    this.H = SHA224_IV[7] | 0;
  }
};
var K512 = (() => split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n6) => BigInt(n6))))();
var SHA512_Kh = (() => K512[0])();
var SHA512_Kl = (() => K512[1])();
var SHA512_W_H = new Uint32Array(80);
var SHA512_W_L = new Uint32Array(80);
var SHA512 = class extends HashMD2 {
  constructor(outputLen = 64) {
    super(128, outputLen, 16, false);
    this.Ah = SHA512_IV[0] | 0;
    this.Al = SHA512_IV[1] | 0;
    this.Bh = SHA512_IV[2] | 0;
    this.Bl = SHA512_IV[3] | 0;
    this.Ch = SHA512_IV[4] | 0;
    this.Cl = SHA512_IV[5] | 0;
    this.Dh = SHA512_IV[6] | 0;
    this.Dl = SHA512_IV[7] | 0;
    this.Eh = SHA512_IV[8] | 0;
    this.El = SHA512_IV[9] | 0;
    this.Fh = SHA512_IV[10] | 0;
    this.Fl = SHA512_IV[11] | 0;
    this.Gh = SHA512_IV[12] | 0;
    this.Gl = SHA512_IV[13] | 0;
    this.Hh = SHA512_IV[14] | 0;
    this.Hl = SHA512_IV[15] | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i6 = 0; i6 < 16; i6++, offset += 4) {
      SHA512_W_H[i6] = view.getUint32(offset);
      SHA512_W_L[i6] = view.getUint32(offset += 4);
    }
    for (let i6 = 16; i6 < 80; i6++) {
      const W15h = SHA512_W_H[i6 - 15] | 0;
      const W15l = SHA512_W_L[i6 - 15] | 0;
      const s0h = rotrSH(W15h, W15l, 1) ^ rotrSH(W15h, W15l, 8) ^ shrSH(W15h, W15l, 7);
      const s0l = rotrSL(W15h, W15l, 1) ^ rotrSL(W15h, W15l, 8) ^ shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i6 - 2] | 0;
      const W2l = SHA512_W_L[i6 - 2] | 0;
      const s1h = rotrSH(W2h, W2l, 19) ^ rotrBH(W2h, W2l, 61) ^ shrSH(W2h, W2l, 6);
      const s1l = rotrSL(W2h, W2l, 19) ^ rotrBL(W2h, W2l, 61) ^ shrSL(W2h, W2l, 6);
      const SUMl = add4L(s0l, s1l, SHA512_W_L[i6 - 7], SHA512_W_L[i6 - 16]);
      const SUMh = add4H(SUMl, s0h, s1h, SHA512_W_H[i6 - 7], SHA512_W_H[i6 - 16]);
      SHA512_W_H[i6] = SUMh | 0;
      SHA512_W_L[i6] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i6 = 0; i6 < 80; i6++) {
      const sigma1h = rotrSH(Eh, El, 14) ^ rotrSH(Eh, El, 18) ^ rotrBH(Eh, El, 41);
      const sigma1l = rotrSL(Eh, El, 14) ^ rotrSL(Eh, El, 18) ^ rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = add5L(Hl, sigma1l, CHIl, SHA512_Kl[i6], SHA512_W_L[i6]);
      const T1h = add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i6], SHA512_W_H[i6]);
      const T1l = T1ll | 0;
      const sigma0h = rotrSH(Ah, Al, 28) ^ rotrBH(Ah, Al, 34) ^ rotrBH(Ah, Al, 39);
      const sigma0l = rotrSL(Ah, Al, 28) ^ rotrBL(Ah, Al, 34) ^ rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = add3L(T1l, sigma0l, MAJl);
      Ah = add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    clean2(SHA512_W_H, SHA512_W_L);
  }
  destroy() {
    clean2(this.buffer);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA384 = class extends SHA512 {
  constructor() {
    super(48);
    this.Ah = SHA384_IV[0] | 0;
    this.Al = SHA384_IV[1] | 0;
    this.Bh = SHA384_IV[2] | 0;
    this.Bl = SHA384_IV[3] | 0;
    this.Ch = SHA384_IV[4] | 0;
    this.Cl = SHA384_IV[5] | 0;
    this.Dh = SHA384_IV[6] | 0;
    this.Dl = SHA384_IV[7] | 0;
    this.Eh = SHA384_IV[8] | 0;
    this.El = SHA384_IV[9] | 0;
    this.Fh = SHA384_IV[10] | 0;
    this.Fl = SHA384_IV[11] | 0;
    this.Gh = SHA384_IV[12] | 0;
    this.Gl = SHA384_IV[13] | 0;
    this.Hh = SHA384_IV[14] | 0;
    this.Hl = SHA384_IV[15] | 0;
  }
};
var T224_IV = Uint32Array.from([
  2352822216,
  424955298,
  1944164710,
  2312950998,
  502970286,
  855612546,
  1738396948,
  1479516111,
  258812777,
  2077511080,
  2011393907,
  79989058,
  1067287976,
  1780299464,
  286451373,
  2446758561
]);
var T256_IV = Uint32Array.from([
  573645204,
  4230739756,
  2673172387,
  3360449730,
  596883563,
  1867755857,
  2520282905,
  1497426621,
  2519219938,
  2827943907,
  3193839141,
  1401305490,
  721525244,
  746961066,
  246885852,
  2177182882
]);
var SHA512_224 = class extends SHA512 {
  constructor() {
    super(28);
    this.Ah = T224_IV[0] | 0;
    this.Al = T224_IV[1] | 0;
    this.Bh = T224_IV[2] | 0;
    this.Bl = T224_IV[3] | 0;
    this.Ch = T224_IV[4] | 0;
    this.Cl = T224_IV[5] | 0;
    this.Dh = T224_IV[6] | 0;
    this.Dl = T224_IV[7] | 0;
    this.Eh = T224_IV[8] | 0;
    this.El = T224_IV[9] | 0;
    this.Fh = T224_IV[10] | 0;
    this.Fl = T224_IV[11] | 0;
    this.Gh = T224_IV[12] | 0;
    this.Gl = T224_IV[13] | 0;
    this.Hh = T224_IV[14] | 0;
    this.Hl = T224_IV[15] | 0;
  }
};
var SHA512_256 = class extends SHA512 {
  constructor() {
    super(32);
    this.Ah = T256_IV[0] | 0;
    this.Al = T256_IV[1] | 0;
    this.Bh = T256_IV[2] | 0;
    this.Bl = T256_IV[3] | 0;
    this.Ch = T256_IV[4] | 0;
    this.Cl = T256_IV[5] | 0;
    this.Dh = T256_IV[6] | 0;
    this.Dl = T256_IV[7] | 0;
    this.Eh = T256_IV[8] | 0;
    this.El = T256_IV[9] | 0;
    this.Fh = T256_IV[10] | 0;
    this.Fl = T256_IV[11] | 0;
    this.Gh = T256_IV[12] | 0;
    this.Gl = T256_IV[13] | 0;
    this.Hh = T256_IV[14] | 0;
    this.Hl = T256_IV[15] | 0;
  }
};
var sha2564 = createHasher2(() => new SHA2562());
var sha2242 = createHasher2(() => new SHA2242());
var sha512 = createHasher2(() => new SHA512());
var sha384 = createHasher2(() => new SHA384());
var sha512_256 = createHasher2(() => new SHA512_256());
var sha512_224 = createHasher2(() => new SHA512_224());

// node_modules/ox/_esm/core/Hash.js
function keccak2562(value, options = {}) {
  const { as: as2 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from(value));
  if (as2 === "Bytes")
    return bytes;
  return fromBytes(bytes);
}

// node_modules/ox/_esm/core/internal/lru.js
var LruMap2 = class extends Map {
  constructor(size4) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size4;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap2(8192)
};
var checksum = caches.checksum;

// node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError2({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError2({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2562(fromString(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i6 = 0; i6 < 40; i6 += 2) {
    if (hash[i6 >> 1] >> 4 >= 8 && characters[i6]) {
      characters[i6] = characters[i6].toUpperCase();
    }
    if ((hash[i6 >> 1] & 15) >= 8 && characters[i6 + 1]) {
      characters[i6 + 1] = characters[i6 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
var InvalidAddressError2 = class extends BaseError {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// node_modules/ox/_esm/core/Solidity.js
var arrayRegex2 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex2 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint2562 = 2n ** 256n - 1n;

// node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError2({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size4) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size4 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError2 = class extends BaseError {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError {
  constructor({ count, limit: limit2 }) {
    super(`Recursive read limit of \`${limit2}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// node_modules/ox/_esm/core/AbiParameters.js
function encodePacked2(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i6 = 0; i6 < types.length; i6++) {
    const type = types[i6];
    const value = values[i6];
    data.push(encodePacked2.encode(type, value));
  }
  return concat(...data);
}
(function(encodePacked3) {
  function encode10(type, value, isArray3 = false) {
    if (type === "address") {
      const address = value;
      assert(address);
      return padLeft(address.toLowerCase(), isArray3 ? 32 : 0);
    }
    if (type === "string")
      return fromString2(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray3 ? 32 : 1);
    const intMatch = type.match(integerRegex2);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size4 = Number.parseInt(bits, 10) / 8;
      return fromNumber(value, {
        size: isArray3 ? 32 : size4,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex2);
    if (bytesMatch) {
      const [_type, size4] = bytesMatch;
      if (Number.parseInt(size4, 10) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError2({
          expectedSize: Number.parseInt(size4, 10),
          value
        });
      return padRight(value, isArray3 ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex2);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i6 = 0; i6 < value.length; i6++) {
        data.push(encode10(childType, value[i6], true));
      }
      if (data.length === 0)
        return "0x";
      return concat(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked3.encode = encode10;
})(encodePacked2 || (encodePacked2 = {}));
var BytesSizeMismatchError2 = class extends BaseError {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size2(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// node_modules/base-x/src/esm/index.js
function base(ALPHABET2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  const BASE_MAP = new Uint8Array(256);
  for (let j6 = 0; j6 < BASE_MAP.length; j6++) {
    BASE_MAP[j6] = 255;
  }
  for (let i6 = 0; i6 < ALPHABET2.length; i6++) {
    const x7 = ALPHABET2.charAt(i6);
    const xc2 = x7.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x7 + " is ambiguous");
    }
    BASE_MAP[xc2] = i6;
  }
  const BASE = ALPHABET2.length;
  const LEADER = ALPHABET2.charAt(0);
  const FACTOR = Math.log(BASE) / Math.log(256);
  const iFACTOR = Math.log(256) / Math.log(BASE);
  function encode10(source) {
    if (source instanceof Uint8Array) {
    } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    let zeroes = 0;
    let length2 = 0;
    let pbegin = 0;
    const pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    const size4 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    const b58 = new Uint8Array(size4);
    while (pbegin !== pend) {
      let carry = source[pbegin];
      let i6 = 0;
      for (let it1 = size4 - 1; (carry !== 0 || i6 < length2) && it1 !== -1; it1--, i6++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i6;
      pbegin++;
    }
    let it22 = size4 - length2;
    while (it22 !== size4 && b58[it22] === 0) {
      it22++;
    }
    let str = LEADER.repeat(zeroes);
    for (; it22 < size4; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    let psz = 0;
    let zeroes = 0;
    let length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    const size4 = (source.length - psz) * FACTOR + 1 >>> 0;
    const b256 = new Uint8Array(size4);
    while (psz < source.length) {
      const charCode = source.charCodeAt(psz);
      if (charCode > 255) {
        return;
      }
      let carry = BASE_MAP[charCode];
      if (carry === 255) {
        return;
      }
      let i6 = 0;
      for (let it3 = size4 - 1; (carry !== 0 || i6 < length2) && it3 !== -1; it3--, i6++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i6;
      psz++;
    }
    let it4 = size4 - length2;
    while (it4 !== size4 && b256[it4] === 0) {
      it4++;
    }
    const vch = new Uint8Array(zeroes + (size4 - it4));
    let j6 = zeroes;
    while (it4 !== size4) {
      vch[j6++] = b256[it4++];
    }
    return vch;
  }
  function decode9(string2) {
    const buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error("Non-base" + BASE + " character");
  }
  return {
    encode: encode10,
    decodeUnsafe,
    decode: decode9
  };
}
var esm_default = base;

// node_modules/bs58/src/esm/index.js
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var esm_default2 = esm_default(ALPHABET);

// node_modules/@msgpack/msgpack/dist.esm/utils/utf8.mjs
function utf8Count(str) {
  const strLength = str.length;
  let byteLength = 0;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      byteLength++;
      continue;
    } else if ((value & 4294965248) === 0) {
      byteLength += 2;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        byteLength += 3;
      } else {
        byteLength += 4;
      }
    }
  }
  return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
  const strLength = str.length;
  let offset = outputOffset;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      output[offset++] = value;
      continue;
    } else if ((value & 4294965248) === 0) {
      output[offset++] = value >> 6 & 31 | 192;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        output[offset++] = value >> 12 & 15 | 224;
        output[offset++] = value >> 6 & 63 | 128;
      } else {
        output[offset++] = value >> 18 & 7 | 240;
        output[offset++] = value >> 12 & 63 | 128;
        output[offset++] = value >> 6 & 63 | 128;
      }
    }
    output[offset++] = value & 63 | 128;
  }
}
var sharedTextEncoder = new TextEncoder();
var TEXT_ENCODER_THRESHOLD = 50;
function utf8EncodeTE(str, output, outputOffset) {
  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
function utf8Encode(str, output, outputOffset) {
  if (str.length > TEXT_ENCODER_THRESHOLD) {
    utf8EncodeTE(str, output, outputOffset);
  } else {
    utf8EncodeJs(str, output, outputOffset);
  }
}
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
  let offset = inputOffset;
  const end = offset + byteLength;
  const units = [];
  let result = "";
  while (offset < end) {
    const byte1 = bytes[offset++];
    if ((byte1 & 128) === 0) {
      units.push(byte1);
    } else if ((byte1 & 224) === 192) {
      const byte2 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 6 | byte2);
    } else if ((byte1 & 240) === 224) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
    } else if ((byte1 & 248) === 240) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      const byte4 = bytes[offset++] & 63;
      let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
      if (unit > 65535) {
        unit -= 65536;
        units.push(unit >>> 10 & 1023 | 55296);
        unit = 56320 | unit & 1023;
      }
      units.push(unit);
    } else {
      units.push(byte1);
    }
    if (units.length >= CHUNK_SIZE) {
      result += String.fromCharCode(...units);
      units.length = 0;
    }
  }
  if (units.length > 0) {
    result += String.fromCharCode(...units);
  }
  return result;
}
var sharedTextDecoder = new TextDecoder();
var TEXT_DECODER_THRESHOLD = 200;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
  return sharedTextDecoder.decode(stringBytes);
}
function utf8Decode(bytes, inputOffset, byteLength) {
  if (byteLength > TEXT_DECODER_THRESHOLD) {
    return utf8DecodeTD(bytes, inputOffset, byteLength);
  } else {
    return utf8DecodeJs(bytes, inputOffset, byteLength);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/ExtData.mjs
var ExtData = class {
  constructor(type, data) {
    this.type = type;
    this.data = data;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/DecodeError.mjs
var DecodeError = class _DecodeError extends Error {
  constructor(message) {
    super(message);
    const proto = Object.create(_DecodeError.prototype);
    Object.setPrototypeOf(this, proto);
    Object.defineProperty(this, "name", {
      configurable: true,
      enumerable: false,
      value: _DecodeError.name
    });
  }
};

// node_modules/@msgpack/msgpack/dist.esm/utils/int.mjs
var UINT32_MAX = 4294967295;
function setUint64(view, offset, value) {
  const high = value / 4294967296;
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
  const high = Math.floor(value / 4294967296);
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function getInt64(view, offset) {
  const high = view.getInt32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}
function getUint64(view, offset) {
  const high = view.getUint32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}

// node_modules/@msgpack/msgpack/dist.esm/timestamp.mjs
var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 4294967296 - 1;
var TIMESTAMP64_MAX_SEC = 17179869184 - 1;
function encodeTimeSpecToTimestamp({ sec, nsec }) {
  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
      const rv = new Uint8Array(4);
      const view = new DataView(rv.buffer);
      view.setUint32(0, sec);
      return rv;
    } else {
      const secHigh = sec / 4294967296;
      const secLow = sec & 4294967295;
      const rv = new Uint8Array(8);
      const view = new DataView(rv.buffer);
      view.setUint32(0, nsec << 2 | secHigh & 3);
      view.setUint32(4, secLow);
      return rv;
    }
  } else {
    const rv = new Uint8Array(12);
    const view = new DataView(rv.buffer);
    view.setUint32(0, nsec);
    setInt64(view, 4, sec);
    return rv;
  }
}
function encodeDateToTimeSpec(date) {
  const msec = date.getTime();
  const sec = Math.floor(msec / 1e3);
  const nsec = (msec - sec * 1e3) * 1e6;
  const nsecInSec = Math.floor(nsec / 1e9);
  return {
    sec: sec + nsecInSec,
    nsec: nsec - nsecInSec * 1e9
  };
}
function encodeTimestampExtension(object) {
  if (object instanceof Date) {
    const timeSpec = encodeDateToTimeSpec(object);
    return encodeTimeSpecToTimestamp(timeSpec);
  } else {
    return null;
  }
}
function decodeTimestampToTimeSpec(data) {
  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);
  switch (data.byteLength) {
    case 4: {
      const sec = view.getUint32(0);
      const nsec = 0;
      return { sec, nsec };
    }
    case 8: {
      const nsec30AndSecHigh2 = view.getUint32(0);
      const secLow32 = view.getUint32(4);
      const sec = (nsec30AndSecHigh2 & 3) * 4294967296 + secLow32;
      const nsec = nsec30AndSecHigh2 >>> 2;
      return { sec, nsec };
    }
    case 12: {
      const sec = getInt64(view, 4);
      const nsec = view.getUint32(0);
      return { sec, nsec };
    }
    default:
      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);
  }
}
function decodeTimestampExtension(data) {
  const timeSpec = decodeTimestampToTimeSpec(data);
  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
  type: EXT_TIMESTAMP,
  encode: encodeTimestampExtension,
  decode: decodeTimestampExtension
};

// node_modules/@msgpack/msgpack/dist.esm/ExtensionCodec.mjs
var ExtensionCodec = class {
  constructor() {
    this.builtInEncoders = [];
    this.builtInDecoders = [];
    this.encoders = [];
    this.decoders = [];
    this.register(timestampExtension);
  }
  register({ type, encode: encode10, decode: decode9 }) {
    if (type >= 0) {
      this.encoders[type] = encode10;
      this.decoders[type] = decode9;
    } else {
      const index3 = -1 - type;
      this.builtInEncoders[index3] = encode10;
      this.builtInDecoders[index3] = decode9;
    }
  }
  tryToEncode(object, context) {
    for (let i6 = 0; i6 < this.builtInEncoders.length; i6++) {
      const encodeExt = this.builtInEncoders[i6];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = -1 - i6;
          return new ExtData(type, data);
        }
      }
    }
    for (let i6 = 0; i6 < this.encoders.length; i6++) {
      const encodeExt = this.encoders[i6];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = i6;
          return new ExtData(type, data);
        }
      }
    }
    if (object instanceof ExtData) {
      return object;
    }
    return null;
  }
  decode(data, type, context) {
    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
    if (decodeExt) {
      return decodeExt(data, type, context);
    } else {
      return new ExtData(type, data);
    }
  }
};
ExtensionCodec.defaultCodec = new ExtensionCodec();

// node_modules/@msgpack/msgpack/dist.esm/utils/typedArrays.mjs
function isArrayBufferLike(buffer) {
  return buffer instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && buffer instanceof SharedArrayBuffer;
}
function ensureUint8Array(buffer) {
  if (buffer instanceof Uint8Array) {
    return buffer;
  } else if (ArrayBuffer.isView(buffer)) {
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  } else if (isArrayBufferLike(buffer)) {
    return new Uint8Array(buffer);
  } else {
    return Uint8Array.from(buffer);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/Encoder.mjs
var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = class _Encoder {
  constructor(options) {
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.maxDepth = (options == null ? void 0 : options.maxDepth) ?? DEFAULT_MAX_DEPTH;
    this.initialBufferSize = (options == null ? void 0 : options.initialBufferSize) ?? DEFAULT_INITIAL_BUFFER_SIZE;
    this.sortKeys = (options == null ? void 0 : options.sortKeys) ?? false;
    this.forceFloat32 = (options == null ? void 0 : options.forceFloat32) ?? false;
    this.ignoreUndefined = (options == null ? void 0 : options.ignoreUndefined) ?? false;
    this.forceIntegerToFloat = (options == null ? void 0 : options.forceIntegerToFloat) ?? false;
    this.pos = 0;
    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
    this.bytes = new Uint8Array(this.view.buffer);
  }
  clone() {
    return new _Encoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      maxDepth: this.maxDepth,
      initialBufferSize: this.initialBufferSize,
      sortKeys: this.sortKeys,
      forceFloat32: this.forceFloat32,
      ignoreUndefined: this.ignoreUndefined,
      forceIntegerToFloat: this.forceIntegerToFloat
    });
  }
  reinitializeState() {
    this.pos = 0;
  }
  /**
   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.
   *
   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.
   */
  encodeSharedRef(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encodeSharedRef(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.subarray(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  /**
   * @returns Encodes the object and returns a copy of the encoder's internal buffer.
   */
  encode(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encode(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.slice(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  doEncode(object, depth) {
    if (depth > this.maxDepth) {
      throw new Error(`Too deep objects in depth ${depth}`);
    }
    if (object == null) {
      this.encodeNil();
    } else if (typeof object === "boolean") {
      this.encodeBoolean(object);
    } else if (typeof object === "number") {
      if (!this.forceIntegerToFloat) {
        this.encodeNumber(object);
      } else {
        this.encodeNumberAsFloat(object);
      }
    } else if (typeof object === "string") {
      this.encodeString(object);
    } else if (this.useBigInt64 && typeof object === "bigint") {
      this.encodeBigInt64(object);
    } else {
      this.encodeObject(object, depth);
    }
  }
  ensureBufferSizeToWrite(sizeToWrite) {
    const requiredSize = this.pos + sizeToWrite;
    if (this.view.byteLength < requiredSize) {
      this.resizeBuffer(requiredSize * 2);
    }
  }
  resizeBuffer(newSize) {
    const newBuffer = new ArrayBuffer(newSize);
    const newBytes = new Uint8Array(newBuffer);
    const newView = new DataView(newBuffer);
    newBytes.set(this.bytes);
    this.view = newView;
    this.bytes = newBytes;
  }
  encodeNil() {
    this.writeU8(192);
  }
  encodeBoolean(object) {
    if (object === false) {
      this.writeU8(194);
    } else {
      this.writeU8(195);
    }
  }
  encodeNumber(object) {
    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {
      if (object >= 0) {
        if (object < 128) {
          this.writeU8(object);
        } else if (object < 256) {
          this.writeU8(204);
          this.writeU8(object);
        } else if (object < 65536) {
          this.writeU8(205);
          this.writeU16(object);
        } else if (object < 4294967296) {
          this.writeU8(206);
          this.writeU32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(207);
          this.writeU64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      } else {
        if (object >= -32) {
          this.writeU8(224 | object + 32);
        } else if (object >= -128) {
          this.writeU8(208);
          this.writeI8(object);
        } else if (object >= -32768) {
          this.writeU8(209);
          this.writeI16(object);
        } else if (object >= -2147483648) {
          this.writeU8(210);
          this.writeI32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(211);
          this.writeI64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      }
    } else {
      this.encodeNumberAsFloat(object);
    }
  }
  encodeNumberAsFloat(object) {
    if (this.forceFloat32) {
      this.writeU8(202);
      this.writeF32(object);
    } else {
      this.writeU8(203);
      this.writeF64(object);
    }
  }
  encodeBigInt64(object) {
    if (object >= BigInt(0)) {
      this.writeU8(207);
      this.writeBigUint64(object);
    } else {
      this.writeU8(211);
      this.writeBigInt64(object);
    }
  }
  writeStringHeader(byteLength) {
    if (byteLength < 32) {
      this.writeU8(160 + byteLength);
    } else if (byteLength < 256) {
      this.writeU8(217);
      this.writeU8(byteLength);
    } else if (byteLength < 65536) {
      this.writeU8(218);
      this.writeU16(byteLength);
    } else if (byteLength < 4294967296) {
      this.writeU8(219);
      this.writeU32(byteLength);
    } else {
      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);
    }
  }
  encodeString(object) {
    const maxHeaderSize = 1 + 4;
    const byteLength = utf8Count(object);
    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
    this.writeStringHeader(byteLength);
    utf8Encode(object, this.bytes, this.pos);
    this.pos += byteLength;
  }
  encodeObject(object, depth) {
    const ext = this.extensionCodec.tryToEncode(object, this.context);
    if (ext != null) {
      this.encodeExtension(ext);
    } else if (Array.isArray(object)) {
      this.encodeArray(object, depth);
    } else if (ArrayBuffer.isView(object)) {
      this.encodeBinary(object);
    } else if (typeof object === "object") {
      this.encodeMap(object, depth);
    } else {
      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);
    }
  }
  encodeBinary(object) {
    const size4 = object.byteLength;
    if (size4 < 256) {
      this.writeU8(196);
      this.writeU8(size4);
    } else if (size4 < 65536) {
      this.writeU8(197);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(198);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large binary: ${size4}`);
    }
    const bytes = ensureUint8Array(object);
    this.writeU8a(bytes);
  }
  encodeArray(object, depth) {
    const size4 = object.length;
    if (size4 < 16) {
      this.writeU8(144 + size4);
    } else if (size4 < 65536) {
      this.writeU8(220);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(221);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large array: ${size4}`);
    }
    for (const item of object) {
      this.doEncode(item, depth + 1);
    }
  }
  countWithoutUndefined(object, keys2) {
    let count = 0;
    for (const key of keys2) {
      if (object[key] !== void 0) {
        count++;
      }
    }
    return count;
  }
  encodeMap(object, depth) {
    const keys2 = Object.keys(object);
    if (this.sortKeys) {
      keys2.sort();
    }
    const size4 = this.ignoreUndefined ? this.countWithoutUndefined(object, keys2) : keys2.length;
    if (size4 < 16) {
      this.writeU8(128 + size4);
    } else if (size4 < 65536) {
      this.writeU8(222);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(223);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large map object: ${size4}`);
    }
    for (const key of keys2) {
      const value = object[key];
      if (!(this.ignoreUndefined && value === void 0)) {
        this.encodeString(key);
        this.doEncode(value, depth + 1);
      }
    }
  }
  encodeExtension(ext) {
    if (typeof ext.data === "function") {
      const data = ext.data(this.pos + 6);
      const size5 = data.length;
      if (size5 >= 4294967296) {
        throw new Error(`Too large extension object: ${size5}`);
      }
      this.writeU8(201);
      this.writeU32(size5);
      this.writeI8(ext.type);
      this.writeU8a(data);
      return;
    }
    const size4 = ext.data.length;
    if (size4 === 1) {
      this.writeU8(212);
    } else if (size4 === 2) {
      this.writeU8(213);
    } else if (size4 === 4) {
      this.writeU8(214);
    } else if (size4 === 8) {
      this.writeU8(215);
    } else if (size4 === 16) {
      this.writeU8(216);
    } else if (size4 < 256) {
      this.writeU8(199);
      this.writeU8(size4);
    } else if (size4 < 65536) {
      this.writeU8(200);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(201);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large extension object: ${size4}`);
    }
    this.writeI8(ext.type);
    this.writeU8a(ext.data);
  }
  writeU8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setUint8(this.pos, value);
    this.pos++;
  }
  writeU8a(values) {
    const size4 = values.length;
    this.ensureBufferSizeToWrite(size4);
    this.bytes.set(values, this.pos);
    this.pos += size4;
  }
  writeI8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setInt8(this.pos, value);
    this.pos++;
  }
  writeU16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setUint16(this.pos, value);
    this.pos += 2;
  }
  writeI16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setInt16(this.pos, value);
    this.pos += 2;
  }
  writeU32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setUint32(this.pos, value);
    this.pos += 4;
  }
  writeI32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setInt32(this.pos, value);
    this.pos += 4;
  }
  writeF32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setFloat32(this.pos, value);
    this.pos += 4;
  }
  writeF64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setFloat64(this.pos, value);
    this.pos += 8;
  }
  writeU64(value) {
    this.ensureBufferSizeToWrite(8);
    setUint64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeI64(value) {
    this.ensureBufferSizeToWrite(8);
    setInt64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeBigUint64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigUint64(this.pos, value);
    this.pos += 8;
  }
  writeBigInt64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigInt64(this.pos, value);
    this.pos += 8;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/encode.mjs
function encode5(value, options) {
  const encoder = new Encoder(options);
  return encoder.encodeSharedRef(value);
}

// node_modules/@msgpack/msgpack/dist.esm/utils/prettyByte.mjs
function prettyByte(byte) {
  return `${byte < 0 ? "-" : ""}0x${Math.abs(byte).toString(16).padStart(2, "0")}`;
}

// node_modules/@msgpack/msgpack/dist.esm/CachedKeyDecoder.mjs
var DEFAULT_MAX_KEY_LENGTH = 16;
var DEFAULT_MAX_LENGTH_PER_KEY = 16;
var CachedKeyDecoder = class {
  constructor(maxKeyLength = DEFAULT_MAX_KEY_LENGTH, maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {
    this.hit = 0;
    this.miss = 0;
    this.maxKeyLength = maxKeyLength;
    this.maxLengthPerKey = maxLengthPerKey;
    this.caches = [];
    for (let i6 = 0; i6 < this.maxKeyLength; i6++) {
      this.caches.push([]);
    }
  }
  canBeCached(byteLength) {
    return byteLength > 0 && byteLength <= this.maxKeyLength;
  }
  find(bytes, inputOffset, byteLength) {
    const records = this.caches[byteLength - 1];
    FIND_CHUNK:
      for (const record of records) {
        const recordBytes = record.bytes;
        for (let j6 = 0; j6 < byteLength; j6++) {
          if (recordBytes[j6] !== bytes[inputOffset + j6]) {
            continue FIND_CHUNK;
          }
        }
        return record.str;
      }
    return null;
  }
  store(bytes, value) {
    const records = this.caches[bytes.length - 1];
    const record = { bytes, str: value };
    if (records.length >= this.maxLengthPerKey) {
      records[Math.random() * records.length | 0] = record;
    } else {
      records.push(record);
    }
  }
  decode(bytes, inputOffset, byteLength) {
    const cachedValue = this.find(bytes, inputOffset, byteLength);
    if (cachedValue != null) {
      this.hit++;
      return cachedValue;
    }
    this.miss++;
    const str = utf8DecodeJs(bytes, inputOffset, byteLength);
    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
    this.store(slicedCopyOfBytes, str);
    return str;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/Decoder.mjs
var STATE_ARRAY = "array";
var STATE_MAP_KEY = "map_key";
var STATE_MAP_VALUE = "map_value";
var mapKeyConverter = (key) => {
  if (typeof key === "string" || typeof key === "number") {
    return key;
  }
  throw new DecodeError("The type of key must be string or number but " + typeof key);
};
var StackPool = class {
  constructor() {
    this.stack = [];
    this.stackHeadPosition = -1;
  }
  get length() {
    return this.stackHeadPosition + 1;
  }
  top() {
    return this.stack[this.stackHeadPosition];
  }
  pushArrayState(size4) {
    const state = this.getUninitializedStateFromPool();
    state.type = STATE_ARRAY;
    state.position = 0;
    state.size = size4;
    state.array = new Array(size4);
  }
  pushMapState(size4) {
    const state = this.getUninitializedStateFromPool();
    state.type = STATE_MAP_KEY;
    state.readCount = 0;
    state.size = size4;
    state.map = {};
  }
  getUninitializedStateFromPool() {
    this.stackHeadPosition++;
    if (this.stackHeadPosition === this.stack.length) {
      const partialState = {
        type: void 0,
        size: 0,
        array: void 0,
        position: 0,
        readCount: 0,
        map: void 0,
        key: null
      };
      this.stack.push(partialState);
    }
    return this.stack[this.stackHeadPosition];
  }
  release(state) {
    const topStackState = this.stack[this.stackHeadPosition];
    if (topStackState !== state) {
      throw new Error("Invalid stack state. Released state is not on top of the stack.");
    }
    if (state.type === STATE_ARRAY) {
      const partialState = state;
      partialState.size = 0;
      partialState.array = void 0;
      partialState.position = 0;
      partialState.type = void 0;
    }
    if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {
      const partialState = state;
      partialState.size = 0;
      partialState.map = void 0;
      partialState.readCount = 0;
      partialState.type = void 0;
    }
    this.stackHeadPosition--;
  }
  reset() {
    this.stack.length = 0;
    this.stackHeadPosition = -1;
  }
};
var HEAD_BYTE_REQUIRED = -1;
var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
try {
  EMPTY_VIEW.getInt8(0);
} catch (e3) {
  if (!(e3 instanceof RangeError)) {
    throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access");
  }
}
var MORE_DATA = new RangeError("Insufficient data");
var sharedCachedKeyDecoder = new CachedKeyDecoder();
var Decoder = class _Decoder {
  constructor(options) {
    this.totalPos = 0;
    this.pos = 0;
    this.view = EMPTY_VIEW;
    this.bytes = EMPTY_BYTES;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack = new StackPool();
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.rawStrings = (options == null ? void 0 : options.rawStrings) ?? false;
    this.maxStrLength = (options == null ? void 0 : options.maxStrLength) ?? UINT32_MAX;
    this.maxBinLength = (options == null ? void 0 : options.maxBinLength) ?? UINT32_MAX;
    this.maxArrayLength = (options == null ? void 0 : options.maxArrayLength) ?? UINT32_MAX;
    this.maxMapLength = (options == null ? void 0 : options.maxMapLength) ?? UINT32_MAX;
    this.maxExtLength = (options == null ? void 0 : options.maxExtLength) ?? UINT32_MAX;
    this.keyDecoder = (options == null ? void 0 : options.keyDecoder) !== void 0 ? options.keyDecoder : sharedCachedKeyDecoder;
    this.mapKeyConverter = (options == null ? void 0 : options.mapKeyConverter) ?? mapKeyConverter;
  }
  clone() {
    return new _Decoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      rawStrings: this.rawStrings,
      maxStrLength: this.maxStrLength,
      maxBinLength: this.maxBinLength,
      maxArrayLength: this.maxArrayLength,
      maxMapLength: this.maxMapLength,
      maxExtLength: this.maxExtLength,
      keyDecoder: this.keyDecoder
    });
  }
  reinitializeState() {
    this.totalPos = 0;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack.reset();
  }
  setBuffer(buffer) {
    const bytes = ensureUint8Array(buffer);
    this.bytes = bytes;
    this.view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    this.pos = 0;
  }
  appendBuffer(buffer) {
    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
      this.setBuffer(buffer);
    } else {
      const remainingData = this.bytes.subarray(this.pos);
      const newData = ensureUint8Array(buffer);
      const newBuffer = new Uint8Array(remainingData.length + newData.length);
      newBuffer.set(remainingData);
      newBuffer.set(newData, remainingData.length);
      this.setBuffer(newBuffer);
    }
  }
  hasRemaining(size4) {
    return this.view.byteLength - this.pos >= size4;
  }
  createExtraByteError(posToShow) {
    const { view, pos } = this;
    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);
  }
  /**
   * @throws {@link DecodeError}
   * @throws {@link RangeError}
   */
  decode(buffer) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decode(buffer);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      const object = this.doDecodeSync();
      if (this.hasRemaining(1)) {
        throw this.createExtraByteError(this.pos);
      }
      return object;
    } finally {
      this.entered = false;
    }
  }
  *decodeMulti(buffer) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMulti(buffer);
      return;
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      while (this.hasRemaining(1)) {
        yield this.doDecodeSync();
      }
    } finally {
      this.entered = false;
    }
  }
  async decodeAsync(stream) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decodeAsync(stream);
    }
    try {
      this.entered = true;
      let decoded = false;
      let object;
      for await (const buffer of stream) {
        if (decoded) {
          this.entered = false;
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        try {
          object = this.doDecodeSync();
          decoded = true;
        } catch (e3) {
          if (!(e3 instanceof RangeError)) {
            throw e3;
          }
        }
        this.totalPos += this.pos;
      }
      if (decoded) {
        if (this.hasRemaining(1)) {
          throw this.createExtraByteError(this.totalPos);
        }
        return object;
      }
      const { headByte, pos, totalPos } = this;
      throw new RangeError(`Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`);
    } finally {
      this.entered = false;
    }
  }
  decodeArrayStream(stream) {
    return this.decodeMultiAsync(stream, true);
  }
  decodeStream(stream) {
    return this.decodeMultiAsync(stream, false);
  }
  async *decodeMultiAsync(stream, isArray3) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMultiAsync(stream, isArray3);
      return;
    }
    try {
      this.entered = true;
      let isArrayHeaderRequired = isArray3;
      let arrayItemsLeft = -1;
      for await (const buffer of stream) {
        if (isArray3 && arrayItemsLeft === 0) {
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        if (isArrayHeaderRequired) {
          arrayItemsLeft = this.readArraySize();
          isArrayHeaderRequired = false;
          this.complete();
        }
        try {
          while (true) {
            yield this.doDecodeSync();
            if (--arrayItemsLeft === 0) {
              break;
            }
          }
        } catch (e3) {
          if (!(e3 instanceof RangeError)) {
            throw e3;
          }
        }
        this.totalPos += this.pos;
      }
    } finally {
      this.entered = false;
    }
  }
  doDecodeSync() {
    DECODE:
      while (true) {
        const headByte = this.readHeadByte();
        let object;
        if (headByte >= 224) {
          object = headByte - 256;
        } else if (headByte < 192) {
          if (headByte < 128) {
            object = headByte;
          } else if (headByte < 144) {
            const size4 = headByte - 128;
            if (size4 !== 0) {
              this.pushMapState(size4);
              this.complete();
              continue DECODE;
            } else {
              object = {};
            }
          } else if (headByte < 160) {
            const size4 = headByte - 144;
            if (size4 !== 0) {
              this.pushArrayState(size4);
              this.complete();
              continue DECODE;
            } else {
              object = [];
            }
          } else {
            const byteLength = headByte - 160;
            object = this.decodeString(byteLength, 0);
          }
        } else if (headByte === 192) {
          object = null;
        } else if (headByte === 194) {
          object = false;
        } else if (headByte === 195) {
          object = true;
        } else if (headByte === 202) {
          object = this.readF32();
        } else if (headByte === 203) {
          object = this.readF64();
        } else if (headByte === 204) {
          object = this.readU8();
        } else if (headByte === 205) {
          object = this.readU16();
        } else if (headByte === 206) {
          object = this.readU32();
        } else if (headByte === 207) {
          if (this.useBigInt64) {
            object = this.readU64AsBigInt();
          } else {
            object = this.readU64();
          }
        } else if (headByte === 208) {
          object = this.readI8();
        } else if (headByte === 209) {
          object = this.readI16();
        } else if (headByte === 210) {
          object = this.readI32();
        } else if (headByte === 211) {
          if (this.useBigInt64) {
            object = this.readI64AsBigInt();
          } else {
            object = this.readI64();
          }
        } else if (headByte === 217) {
          const byteLength = this.lookU8();
          object = this.decodeString(byteLength, 1);
        } else if (headByte === 218) {
          const byteLength = this.lookU16();
          object = this.decodeString(byteLength, 2);
        } else if (headByte === 219) {
          const byteLength = this.lookU32();
          object = this.decodeString(byteLength, 4);
        } else if (headByte === 220) {
          const size4 = this.readU16();
          if (size4 !== 0) {
            this.pushArrayState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else if (headByte === 221) {
          const size4 = this.readU32();
          if (size4 !== 0) {
            this.pushArrayState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else if (headByte === 222) {
          const size4 = this.readU16();
          if (size4 !== 0) {
            this.pushMapState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte === 223) {
          const size4 = this.readU32();
          if (size4 !== 0) {
            this.pushMapState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte === 196) {
          const size4 = this.lookU8();
          object = this.decodeBinary(size4, 1);
        } else if (headByte === 197) {
          const size4 = this.lookU16();
          object = this.decodeBinary(size4, 2);
        } else if (headByte === 198) {
          const size4 = this.lookU32();
          object = this.decodeBinary(size4, 4);
        } else if (headByte === 212) {
          object = this.decodeExtension(1, 0);
        } else if (headByte === 213) {
          object = this.decodeExtension(2, 0);
        } else if (headByte === 214) {
          object = this.decodeExtension(4, 0);
        } else if (headByte === 215) {
          object = this.decodeExtension(8, 0);
        } else if (headByte === 216) {
          object = this.decodeExtension(16, 0);
        } else if (headByte === 199) {
          const size4 = this.lookU8();
          object = this.decodeExtension(size4, 1);
        } else if (headByte === 200) {
          const size4 = this.lookU16();
          object = this.decodeExtension(size4, 2);
        } else if (headByte === 201) {
          const size4 = this.lookU32();
          object = this.decodeExtension(size4, 4);
        } else {
          throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);
        }
        this.complete();
        const stack = this.stack;
        while (stack.length > 0) {
          const state = stack.top();
          if (state.type === STATE_ARRAY) {
            state.array[state.position] = object;
            state.position++;
            if (state.position === state.size) {
              object = state.array;
              stack.release(state);
            } else {
              continue DECODE;
            }
          } else if (state.type === STATE_MAP_KEY) {
            if (object === "__proto__") {
              throw new DecodeError("The key __proto__ is not allowed");
            }
            state.key = this.mapKeyConverter(object);
            state.type = STATE_MAP_VALUE;
            continue DECODE;
          } else {
            state.map[state.key] = object;
            state.readCount++;
            if (state.readCount === state.size) {
              object = state.map;
              stack.release(state);
            } else {
              state.key = null;
              state.type = STATE_MAP_KEY;
              continue DECODE;
            }
          }
        }
        return object;
      }
  }
  readHeadByte() {
    if (this.headByte === HEAD_BYTE_REQUIRED) {
      this.headByte = this.readU8();
    }
    return this.headByte;
  }
  complete() {
    this.headByte = HEAD_BYTE_REQUIRED;
  }
  readArraySize() {
    const headByte = this.readHeadByte();
    switch (headByte) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default: {
        if (headByte < 160) {
          return headByte - 144;
        } else {
          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);
        }
      }
    }
  }
  pushMapState(size4) {
    if (size4 > this.maxMapLength) {
      throw new DecodeError(`Max length exceeded: map length (${size4}) > maxMapLengthLength (${this.maxMapLength})`);
    }
    this.stack.pushMapState(size4);
  }
  pushArrayState(size4) {
    if (size4 > this.maxArrayLength) {
      throw new DecodeError(`Max length exceeded: array length (${size4}) > maxArrayLength (${this.maxArrayLength})`);
    }
    this.stack.pushArrayState(size4);
  }
  decodeString(byteLength, headerOffset) {
    if (!this.rawStrings || this.stateIsMapKey()) {
      return this.decodeUtf8String(byteLength, headerOffset);
    }
    return this.decodeBinary(byteLength, headerOffset);
  }
  /**
   * @throws {@link RangeError}
   */
  decodeUtf8String(byteLength, headerOffset) {
    var _a2;
    if (byteLength > this.maxStrLength) {
      throw new DecodeError(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);
    }
    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
      throw MORE_DATA;
    }
    const offset = this.pos + headerOffset;
    let object;
    if (this.stateIsMapKey() && ((_a2 = this.keyDecoder) == null ? void 0 : _a2.canBeCached(byteLength))) {
      object = this.keyDecoder.decode(this.bytes, offset, byteLength);
    } else {
      object = utf8Decode(this.bytes, offset, byteLength);
    }
    this.pos += headerOffset + byteLength;
    return object;
  }
  stateIsMapKey() {
    if (this.stack.length > 0) {
      const state = this.stack.top();
      return state.type === STATE_MAP_KEY;
    }
    return false;
  }
  /**
   * @throws {@link RangeError}
   */
  decodeBinary(byteLength, headOffset) {
    if (byteLength > this.maxBinLength) {
      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);
    }
    if (!this.hasRemaining(byteLength + headOffset)) {
      throw MORE_DATA;
    }
    const offset = this.pos + headOffset;
    const object = this.bytes.subarray(offset, offset + byteLength);
    this.pos += headOffset + byteLength;
    return object;
  }
  decodeExtension(size4, headOffset) {
    if (size4 > this.maxExtLength) {
      throw new DecodeError(`Max length exceeded: ext length (${size4}) > maxExtLength (${this.maxExtLength})`);
    }
    const extType = this.view.getInt8(this.pos + headOffset);
    const data = this.decodeBinary(
      size4,
      headOffset + 1
      /* extType */
    );
    return this.extensionCodec.decode(data, extType, this.context);
  }
  lookU8() {
    return this.view.getUint8(this.pos);
  }
  lookU16() {
    return this.view.getUint16(this.pos);
  }
  lookU32() {
    return this.view.getUint32(this.pos);
  }
  readU8() {
    const value = this.view.getUint8(this.pos);
    this.pos++;
    return value;
  }
  readI8() {
    const value = this.view.getInt8(this.pos);
    this.pos++;
    return value;
  }
  readU16() {
    const value = this.view.getUint16(this.pos);
    this.pos += 2;
    return value;
  }
  readI16() {
    const value = this.view.getInt16(this.pos);
    this.pos += 2;
    return value;
  }
  readU32() {
    const value = this.view.getUint32(this.pos);
    this.pos += 4;
    return value;
  }
  readI32() {
    const value = this.view.getInt32(this.pos);
    this.pos += 4;
    return value;
  }
  readU64() {
    const value = getUint64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readI64() {
    const value = getInt64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readU64AsBigInt() {
    const value = this.view.getBigUint64(this.pos);
    this.pos += 8;
    return value;
  }
  readI64AsBigInt() {
    const value = this.view.getBigInt64(this.pos);
    this.pos += 8;
    return value;
  }
  readF32() {
    const value = this.view.getFloat32(this.pos);
    this.pos += 4;
    return value;
  }
  readF64() {
    const value = this.view.getFloat64(this.pos);
    this.pos += 8;
    return value;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/decode.mjs
function decode3(buffer, options) {
  const decoder = new Decoder(options);
  return decoder.decode(buffer);
}

// node_modules/@scure/base/lib/esm/index.js
function isBytes2(a4) {
  return a4 instanceof Uint8Array || ArrayBuffer.isView(a4) && a4.constructor.name === "Uint8Array";
}
function abytes2(b5, ...lengths) {
  if (!isBytes2(b5))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b5.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b5.length);
}
function isArrayOf(isString4, arr) {
  if (!Array.isArray(arr))
    return false;
  if (arr.length === 0)
    return true;
  if (isString4) {
    return arr.every((item) => typeof item === "string");
  } else {
    return arr.every((item) => Number.isSafeInteger(item));
  }
}
function afn(input) {
  if (typeof input !== "function")
    throw new Error("function expected");
  return true;
}
function astr(label, input) {
  if (typeof input !== "string")
    throw new Error(`${label}: string expected`);
  return true;
}
function anumber2(n6) {
  if (!Number.isSafeInteger(n6))
    throw new Error(`invalid integer: ${n6}`);
}
function aArr(input) {
  if (!Array.isArray(input))
    throw new Error("array expected");
}
function astrArr(label, input) {
  if (!isArrayOf(true, input))
    throw new Error(`${label}: array of strings expected`);
}
function anumArr(label, input) {
  if (!isArrayOf(false, input))
    throw new Error(`${label}: array of numbers expected`);
}
function chain(...args2) {
  const id2 = (a4) => a4;
  const wrap = (a4, b5) => (c8) => a4(b5(c8));
  const encode10 = args2.map((x7) => x7.encode).reduceRight(wrap, id2);
  const decode9 = args2.map((x7) => x7.decode).reduce(wrap, id2);
  return { encode: encode10, decode: decode9 };
}
function alphabet(letters) {
  const lettersA = typeof letters === "string" ? letters.split("") : letters;
  const len = lettersA.length;
  astrArr("alphabet", lettersA);
  const indexes = new Map(lettersA.map((l8, i6) => [l8, i6]));
  return {
    encode: (digits) => {
      aArr(digits);
      return digits.map((i6) => {
        if (!Number.isSafeInteger(i6) || i6 < 0 || i6 >= len)
          throw new Error(`alphabet.encode: digit index outside alphabet "${i6}". Allowed: ${letters}`);
        return lettersA[i6];
      });
    },
    decode: (input) => {
      aArr(input);
      return input.map((letter) => {
        astr("alphabet.decode", letter);
        const i6 = indexes.get(letter);
        if (i6 === void 0)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
        return i6;
      });
    }
  };
}
function join(separator = "") {
  astr("join", separator);
  return {
    encode: (from8) => {
      astrArr("join.decode", from8);
      return from8.join(separator);
    },
    decode: (to4) => {
      astr("join.decode", to4);
      return to4.split(separator);
    }
  };
}
function padding(bits, chr = "=") {
  anumber2(bits);
  astr("padding", chr);
  return {
    encode(data) {
      astrArr("padding.encode", data);
      while (data.length * bits % 8)
        data.push(chr);
      return data;
    },
    decode(input) {
      astrArr("padding.decode", input);
      let end = input.length;
      if (end * bits % 8)
        throw new Error("padding: invalid, string should have whole number of bytes");
      for (; end > 0 && input[end - 1] === chr; end--) {
        const last = end - 1;
        const byte = last * bits;
        if (byte % 8 === 0)
          throw new Error("padding: invalid, string has too much padding");
      }
      return input.slice(0, end);
    }
  };
}
function normalize(fn3) {
  afn(fn3);
  return { encode: (from8) => from8, decode: (to4) => fn3(to4) };
}
function convertRadix(data, from8, to4) {
  if (from8 < 2)
    throw new Error(`convertRadix: invalid from=${from8}, base cannot be less than 2`);
  if (to4 < 2)
    throw new Error(`convertRadix: invalid to=${to4}, base cannot be less than 2`);
  aArr(data);
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data, (d8) => {
    anumber2(d8);
    if (d8 < 0 || d8 >= from8)
      throw new Error(`invalid integer: ${d8}`);
    return d8;
  });
  const dlen = digits.length;
  while (true) {
    let carry = 0;
    let done = true;
    for (let i6 = pos; i6 < dlen; i6++) {
      const digit = digits[i6];
      const fromCarry = from8 * carry;
      const digitBase = fromCarry + digit;
      if (!Number.isSafeInteger(digitBase) || fromCarry / from8 !== carry || digitBase - digit !== fromCarry) {
        throw new Error("convertRadix: carry overflow");
      }
      const div = digitBase / to4;
      carry = digitBase % to4;
      const rounded = Math.floor(div);
      digits[i6] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to4 + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i6;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i6 = 0; i6 < data.length - 1 && data[i6] === 0; i6++)
    res.push(0);
  return res.reverse();
}
var gcd = (a4, b5) => b5 === 0 ? a4 : gcd(b5, a4 % b5);
var radix2carry = (from8, to4) => from8 + (to4 - gcd(from8, to4));
var powers = (() => {
  let res = [];
  for (let i6 = 0; i6 < 40; i6++)
    res.push(2 ** i6);
  return res;
})();
function convertRadix2(data, from8, to4, padding2) {
  aArr(data);
  if (from8 <= 0 || from8 > 32)
    throw new Error(`convertRadix2: wrong from=${from8}`);
  if (to4 <= 0 || to4 > 32)
    throw new Error(`convertRadix2: wrong to=${to4}`);
  if (radix2carry(from8, to4) > 32) {
    throw new Error(`convertRadix2: carry overflow from=${from8} to=${to4} carryBits=${radix2carry(from8, to4)}`);
  }
  let carry = 0;
  let pos = 0;
  const max = powers[from8];
  const mask = powers[to4] - 1;
  const res = [];
  for (const n6 of data) {
    anumber2(n6);
    if (n6 >= max)
      throw new Error(`convertRadix2: invalid data word=${n6} from=${from8}`);
    carry = carry << from8 | n6;
    if (pos + from8 > 32)
      throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from8}`);
    pos += from8;
    for (; pos >= to4; pos -= to4)
      res.push((carry >> pos - to4 & mask) >>> 0);
    const pow = powers[pos];
    if (pow === void 0)
      throw new Error("invalid carry");
    carry &= pow - 1;
  }
  carry = carry << to4 - pos & mask;
  if (!padding2 && pos >= from8)
    throw new Error("Excess padding");
  if (!padding2 && carry > 0)
    throw new Error(`Non-zero padding: ${carry}`);
  if (padding2 && pos > 0)
    res.push(carry >>> 0);
  return res;
}
function radix(num) {
  anumber2(num);
  const _256 = 2 ** 8;
  return {
    encode: (bytes) => {
      if (!isBytes2(bytes))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix(Array.from(bytes), _256, num);
    },
    decode: (digits) => {
      anumArr("radix.decode", digits);
      return Uint8Array.from(convertRadix(digits, num, _256));
    }
  };
}
function radix2(bits, revPadding = false) {
  anumber2(bits);
  if (bits <= 0 || bits > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (bytes) => {
      if (!isBytes2(bytes))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
    },
    decode: (digits) => {
      anumArr("radix2.decode", digits);
      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
    }
  };
}
function unsafeWrapper(fn3) {
  afn(fn3);
  return function(...args2) {
    try {
      return fn3.apply(null, args2);
    } catch (e3) {
    }
  };
}
var base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
var base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
var base32nopad = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), join(""));
var base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
var base32hexnopad = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), join(""));
var base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s4) => s4.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
var hasBase64Builtin = (() => typeof Uint8Array.from([]).toBase64 === "function" && typeof Uint8Array.fromBase64 === "function")();
var decodeBase64Builtin = (s4, isUrl) => {
  astr("base64", s4);
  const re4 = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;
  const alphabet3 = isUrl ? "base64url" : "base64";
  if (s4.length > 0 && !re4.test(s4))
    throw new Error("invalid base64");
  return Uint8Array.fromBase64(s4, { alphabet: alphabet3, lastChunkHandling: "strict" });
};
var base64 = hasBase64Builtin ? {
  encode(b5) {
    abytes2(b5);
    return b5.toBase64();
  },
  decode(s4) {
    return decodeBase64Builtin(s4, false);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
var base64nopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), join(""));
var base64url = hasBase64Builtin ? {
  encode(b5) {
    abytes2(b5);
    return b5.toBase64({ alphabet: "base64url" });
  },
  decode(s4) {
    return decodeBase64Builtin(s4, true);
  }
} : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
var base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
var base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod(pre2) {
  const b5 = pre2 >> 25;
  let chk = (pre2 & 33554431) << 5;
  for (let i6 = 0; i6 < POLYMOD_GENERATORS.length; i6++) {
    if ((b5 >> i6 & 1) === 1)
      chk ^= POLYMOD_GENERATORS[i6];
  }
  return chk;
}
function bechChecksum(prefix, words, encodingConst = 1) {
  const len = prefix.length;
  let chk = 1;
  for (let i6 = 0; i6 < len; i6++) {
    const c8 = prefix.charCodeAt(i6);
    if (c8 < 33 || c8 > 126)
      throw new Error(`Invalid prefix (${prefix})`);
    chk = bech32Polymod(chk) ^ c8 >> 5;
  }
  chk = bech32Polymod(chk);
  for (let i6 = 0; i6 < len; i6++)
    chk = bech32Polymod(chk) ^ prefix.charCodeAt(i6) & 31;
  for (let v11 of words)
    chk = bech32Polymod(chk) ^ v11;
  for (let i6 = 0; i6 < 6; i6++)
    chk = bech32Polymod(chk);
  chk ^= encodingConst;
  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));
}
function genBech32(encoding) {
  const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
  const _words = radix2(5);
  const fromWords = _words.decode;
  const toWords = _words.encode;
  const fromWordsUnsafe = unsafeWrapper(fromWords);
  function encode10(prefix, words, limit2 = 90) {
    astr("bech32.encode prefix", prefix);
    if (isBytes2(words))
      words = Array.from(words);
    anumArr("bech32.encode", words);
    const plen = prefix.length;
    if (plen === 0)
      throw new TypeError(`Invalid prefix length ${plen}`);
    const actualLength = plen + 7 + words.length;
    if (limit2 !== false && actualLength > limit2)
      throw new TypeError(`Length ${actualLength} exceeds limit ${limit2}`);
    const lowered = prefix.toLowerCase();
    const sum = bechChecksum(lowered, words, ENCODING_CONST);
    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
  }
  function decode9(str, limit2 = 90) {
    astr("bech32.decode input", str);
    const slen = str.length;
    if (slen < 8 || limit2 !== false && slen > limit2)
      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit2})`);
    const lowered = str.toLowerCase();
    if (str !== lowered && str !== str.toUpperCase())
      throw new Error(`String must be lowercase or uppercase`);
    const sepIndex = lowered.lastIndexOf("1");
    if (sepIndex === 0 || sepIndex === -1)
      throw new Error(`Letter "1" must be present between prefix and data only`);
    const prefix = lowered.slice(0, sepIndex);
    const data = lowered.slice(sepIndex + 1);
    if (data.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const words = BECH_ALPHABET.decode(data).slice(0, -6);
    const sum = bechChecksum(prefix, words, ENCODING_CONST);
    if (!data.endsWith(sum))
      throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
    return { prefix, words };
  }
  const decodeUnsafe = unsafeWrapper(decode9);
  function decodeToBytes(str) {
    const { prefix, words } = decode9(str, false);
    return { prefix, words, bytes: fromWords(words) };
  }
  function encodeFromBytes(prefix, bytes) {
    return encode10(prefix, toWords(bytes));
  }
  return {
    encode: encode10,
    decode: decode9,
    encodeFromBytes,
    decodeToBytes,
    decodeUnsafe,
    fromWords,
    fromWordsUnsafe,
    toWords
  };
}
var bech32 = genBech32("bech32");
var bech32m = genBech32("bech32m");
var hasHexBuiltin = (() => typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function")();
var hexBuiltin = {
  encode(data) {
    abytes2(data);
    return data.toHex();
  },
  decode(s4) {
    astr("hex", s4);
    return Uint8Array.fromHex(s4);
  }
};
var hex = hasHexBuiltin ? hexBuiltin : chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s4) => {
  if (typeof s4 !== "string" || s4.length % 2 !== 0)
    throw new TypeError(`hex.decode: expected string, got ${typeof s4} with length ${s4.length}`);
  return s4.toLowerCase();
}));

// node_modules/@walletconnect/relay-auth/dist/index.es.js
var import_time = __toESM(require_cjs());

// node_modules/@walletconnect/safe-json/dist/esm/index.js
var JSONStringify = (data) => JSON.stringify(data, (_6, value) => typeof value === "bigint" ? value.toString() + "n" : value);
var JSONParse = (json) => {
  const numbersBiggerThanMaxInt = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
  const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
  return JSON.parse(serializedData, (_6, value) => {
    const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
    if (isCustomFormatBigInt)
      return BigInt(value.substring(0, value.length - 1));
    return value;
  });
};
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSONParse(value);
  } catch (_a2) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSONStringify(value) || "";
}

// node_modules/@walletconnect/relay-auth/dist/index.es.js
function En(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function fe(t2, ...e3) {
  if (!En(t2))
    throw new Error("Uint8Array expected");
  if (e3.length > 0 && !e3.includes(t2.length))
    throw new Error("Uint8Array expected of length " + e3 + ", got length=" + t2.length);
}
function De(t2, e3 = true) {
  if (t2.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e3 && t2.finished)
    throw new Error("Hash#digest() has already been called");
}
function gn(t2, e3) {
  fe(t2);
  const n6 = e3.outputLen;
  if (t2.length < n6)
    throw new Error("digestInto() expects output buffer of length at least " + n6);
}
var it = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
var _t = (t2) => new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
function yn(t2) {
  if (typeof t2 != "string")
    throw new Error("utf8ToBytes expected string, got " + typeof t2);
  return new Uint8Array(new TextEncoder().encode(t2));
}
function de(t2) {
  return typeof t2 == "string" && (t2 = yn(t2)), fe(t2), t2;
}
var xn = class {
  clone() {
    return this._cloneInto();
  }
};
function Bn(t2) {
  const e3 = (r4) => t2().update(de(r4)).digest(), n6 = t2();
  return e3.outputLen = n6.outputLen, e3.blockLen = n6.blockLen, e3.create = () => t2(), e3;
}
function he(t2 = 32) {
  if (it && typeof it.getRandomValues == "function")
    return it.getRandomValues(new Uint8Array(t2));
  if (it && typeof it.randomBytes == "function")
    return it.randomBytes(t2);
  throw new Error("crypto.getRandomValues must be defined");
}
function Cn(t2, e3, n6, r4) {
  if (typeof t2.setBigUint64 == "function")
    return t2.setBigUint64(e3, n6, r4);
  const o6 = BigInt(32), s4 = BigInt(4294967295), a4 = Number(n6 >> o6 & s4), u4 = Number(n6 & s4), i6 = r4 ? 4 : 0, D3 = r4 ? 0 : 4;
  t2.setUint32(e3 + i6, a4, r4), t2.setUint32(e3 + D3, u4, r4);
}
var An = class extends xn {
  constructor(e3, n6, r4, o6) {
    super(), this.blockLen = e3, this.outputLen = n6, this.padOffset = r4, this.isLE = o6, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e3), this.view = _t(this.buffer);
  }
  update(e3) {
    De(this);
    const { view: n6, buffer: r4, blockLen: o6 } = this;
    e3 = de(e3);
    const s4 = e3.length;
    for (let a4 = 0; a4 < s4; ) {
      const u4 = Math.min(o6 - this.pos, s4 - a4);
      if (u4 === o6) {
        const i6 = _t(e3);
        for (; o6 <= s4 - a4; a4 += o6)
          this.process(i6, a4);
        continue;
      }
      r4.set(e3.subarray(a4, a4 + u4), this.pos), this.pos += u4, a4 += u4, this.pos === o6 && (this.process(n6, 0), this.pos = 0);
    }
    return this.length += e3.length, this.roundClean(), this;
  }
  digestInto(e3) {
    De(this), gn(e3, this), this.finished = true;
    const { buffer: n6, view: r4, blockLen: o6, isLE: s4 } = this;
    let { pos: a4 } = this;
    n6[a4++] = 128, this.buffer.subarray(a4).fill(0), this.padOffset > o6 - a4 && (this.process(r4, 0), a4 = 0);
    for (let l8 = a4; l8 < o6; l8++)
      n6[l8] = 0;
    Cn(r4, o6 - 8, BigInt(this.length * 8), s4), this.process(r4, 0);
    const u4 = _t(e3), i6 = this.outputLen;
    if (i6 % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const D3 = i6 / 4, c8 = this.get();
    if (D3 > c8.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l8 = 0; l8 < D3; l8++)
      u4.setUint32(4 * l8, c8[l8], s4);
  }
  digest() {
    const { buffer: e3, outputLen: n6 } = this;
    this.digestInto(e3);
    const r4 = e3.slice(0, n6);
    return this.destroy(), r4;
  }
  _cloneInto(e3) {
    e3 || (e3 = new this.constructor()), e3.set(...this.get());
    const { blockLen: n6, buffer: r4, length: o6, finished: s4, destroyed: a4, pos: u4 } = this;
    return e3.length = o6, e3.pos = u4, e3.finished = s4, e3.destroyed = a4, o6 % n6 && e3.buffer.set(r4), e3;
  }
};
var wt = BigInt(2 ** 32 - 1);
var St = BigInt(32);
function le(t2, e3 = false) {
  return e3 ? { h: Number(t2 & wt), l: Number(t2 >> St & wt) } : { h: Number(t2 >> St & wt) | 0, l: Number(t2 & wt) | 0 };
}
function mn(t2, e3 = false) {
  let n6 = new Uint32Array(t2.length), r4 = new Uint32Array(t2.length);
  for (let o6 = 0; o6 < t2.length; o6++) {
    const { h: s4, l: a4 } = le(t2[o6], e3);
    [n6[o6], r4[o6]] = [s4, a4];
  }
  return [n6, r4];
}
var _n = (t2, e3) => BigInt(t2 >>> 0) << St | BigInt(e3 >>> 0);
var Sn = (t2, e3, n6) => t2 >>> n6;
var vn = (t2, e3, n6) => t2 << 32 - n6 | e3 >>> n6;
var In = (t2, e3, n6) => t2 >>> n6 | e3 << 32 - n6;
var Un = (t2, e3, n6) => t2 << 32 - n6 | e3 >>> n6;
var Tn = (t2, e3, n6) => t2 << 64 - n6 | e3 >>> n6 - 32;
var Fn = (t2, e3, n6) => t2 >>> n6 - 32 | e3 << 64 - n6;
var Nn = (t2, e3) => e3;
var Ln = (t2, e3) => t2;
var On = (t2, e3, n6) => t2 << n6 | e3 >>> 32 - n6;
var Hn = (t2, e3, n6) => e3 << n6 | t2 >>> 32 - n6;
var zn = (t2, e3, n6) => e3 << n6 - 32 | t2 >>> 64 - n6;
var Mn = (t2, e3, n6) => t2 << n6 - 32 | e3 >>> 64 - n6;
function qn(t2, e3, n6, r4) {
  const o6 = (e3 >>> 0) + (r4 >>> 0);
  return { h: t2 + n6 + (o6 / 2 ** 32 | 0) | 0, l: o6 | 0 };
}
var $n = (t2, e3, n6) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0);
var kn = (t2, e3, n6, r4) => e3 + n6 + r4 + (t2 / 2 ** 32 | 0) | 0;
var Rn = (t2, e3, n6, r4) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0) + (r4 >>> 0);
var jn = (t2, e3, n6, r4, o6) => e3 + n6 + r4 + o6 + (t2 / 2 ** 32 | 0) | 0;
var Zn = (t2, e3, n6, r4, o6) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0) + (r4 >>> 0) + (o6 >>> 0);
var Gn = (t2, e3, n6, r4, o6, s4) => e3 + n6 + r4 + o6 + s4 + (t2 / 2 ** 32 | 0) | 0;
var x = { fromBig: le, split: mn, toBig: _n, shrSH: Sn, shrSL: vn, rotrSH: In, rotrSL: Un, rotrBH: Tn, rotrBL: Fn, rotr32H: Nn, rotr32L: Ln, rotlSH: On, rotlSL: Hn, rotlBH: zn, rotlBL: Mn, add: qn, add3L: $n, add3H: kn, add4L: Rn, add4H: jn, add5H: Gn, add5L: Zn };
var [Vn, Yn] = (() => x.split(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t2) => BigInt(t2))))();
var P = new Uint32Array(80);
var Q = new Uint32Array(80);
var Jn = class extends An {
  constructor() {
    super(128, 64, 16, false), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  get() {
    const { Ah: e3, Al: n6, Bh: r4, Bl: o6, Ch: s4, Cl: a4, Dh: u4, Dl: i6, Eh: D3, El: c8, Fh: l8, Fl: p5, Gh: w6, Gl: h6, Hh: g7, Hl: S6 } = this;
    return [e3, n6, r4, o6, s4, a4, u4, i6, D3, c8, l8, p5, w6, h6, g7, S6];
  }
  set(e3, n6, r4, o6, s4, a4, u4, i6, D3, c8, l8, p5, w6, h6, g7, S6) {
    this.Ah = e3 | 0, this.Al = n6 | 0, this.Bh = r4 | 0, this.Bl = o6 | 0, this.Ch = s4 | 0, this.Cl = a4 | 0, this.Dh = u4 | 0, this.Dl = i6 | 0, this.Eh = D3 | 0, this.El = c8 | 0, this.Fh = l8 | 0, this.Fl = p5 | 0, this.Gh = w6 | 0, this.Gl = h6 | 0, this.Hh = g7 | 0, this.Hl = S6 | 0;
  }
  process(e3, n6) {
    for (let d8 = 0; d8 < 16; d8++, n6 += 4)
      P[d8] = e3.getUint32(n6), Q[d8] = e3.getUint32(n6 += 4);
    for (let d8 = 16; d8 < 80; d8++) {
      const m6 = P[d8 - 15] | 0, F4 = Q[d8 - 15] | 0, q3 = x.rotrSH(m6, F4, 1) ^ x.rotrSH(m6, F4, 8) ^ x.shrSH(m6, F4, 7), z7 = x.rotrSL(m6, F4, 1) ^ x.rotrSL(m6, F4, 8) ^ x.shrSL(m6, F4, 7), I4 = P[d8 - 2] | 0, O7 = Q[d8 - 2] | 0, ot3 = x.rotrSH(I4, O7, 19) ^ x.rotrBH(I4, O7, 61) ^ x.shrSH(I4, O7, 6), tt4 = x.rotrSL(I4, O7, 19) ^ x.rotrBL(I4, O7, 61) ^ x.shrSL(I4, O7, 6), st4 = x.add4L(z7, tt4, Q[d8 - 7], Q[d8 - 16]), at2 = x.add4H(st4, q3, ot3, P[d8 - 7], P[d8 - 16]);
      P[d8] = at2 | 0, Q[d8] = st4 | 0;
    }
    let { Ah: r4, Al: o6, Bh: s4, Bl: a4, Ch: u4, Cl: i6, Dh: D3, Dl: c8, Eh: l8, El: p5, Fh: w6, Fl: h6, Gh: g7, Gl: S6, Hh: v11, Hl: L5 } = this;
    for (let d8 = 0; d8 < 80; d8++) {
      const m6 = x.rotrSH(l8, p5, 14) ^ x.rotrSH(l8, p5, 18) ^ x.rotrBH(l8, p5, 41), F4 = x.rotrSL(l8, p5, 14) ^ x.rotrSL(l8, p5, 18) ^ x.rotrBL(l8, p5, 41), q3 = l8 & w6 ^ ~l8 & g7, z7 = p5 & h6 ^ ~p5 & S6, I4 = x.add5L(L5, F4, z7, Yn[d8], Q[d8]), O7 = x.add5H(I4, v11, m6, q3, Vn[d8], P[d8]), ot3 = I4 | 0, tt4 = x.rotrSH(r4, o6, 28) ^ x.rotrBH(r4, o6, 34) ^ x.rotrBH(r4, o6, 39), st4 = x.rotrSL(r4, o6, 28) ^ x.rotrBL(r4, o6, 34) ^ x.rotrBL(r4, o6, 39), at2 = r4 & s4 ^ r4 & u4 ^ s4 & u4, Ct4 = o6 & a4 ^ o6 & i6 ^ a4 & i6;
      v11 = g7 | 0, L5 = S6 | 0, g7 = w6 | 0, S6 = h6 | 0, w6 = l8 | 0, h6 = p5 | 0, { h: l8, l: p5 } = x.add(D3 | 0, c8 | 0, O7 | 0, ot3 | 0), D3 = u4 | 0, c8 = i6 | 0, u4 = s4 | 0, i6 = a4 | 0, s4 = r4 | 0, a4 = o6 | 0;
      const At4 = x.add3L(ot3, st4, Ct4);
      r4 = x.add3H(At4, O7, tt4, at2), o6 = At4 | 0;
    }
    ({ h: r4, l: o6 } = x.add(this.Ah | 0, this.Al | 0, r4 | 0, o6 | 0)), { h: s4, l: a4 } = x.add(this.Bh | 0, this.Bl | 0, s4 | 0, a4 | 0), { h: u4, l: i6 } = x.add(this.Ch | 0, this.Cl | 0, u4 | 0, i6 | 0), { h: D3, l: c8 } = x.add(this.Dh | 0, this.Dl | 0, D3 | 0, c8 | 0), { h: l8, l: p5 } = x.add(this.Eh | 0, this.El | 0, l8 | 0, p5 | 0), { h: w6, l: h6 } = x.add(this.Fh | 0, this.Fl | 0, w6 | 0, h6 | 0), { h: g7, l: S6 } = x.add(this.Gh | 0, this.Gl | 0, g7 | 0, S6 | 0), { h: v11, l: L5 } = x.add(this.Hh | 0, this.Hl | 0, v11 | 0, L5 | 0), this.set(r4, o6, s4, a4, u4, i6, D3, c8, l8, p5, w6, h6, g7, S6, v11, L5);
  }
  roundClean() {
    P.fill(0), Q.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Kn = Bn(() => new Jn());
var vt = BigInt(0);
var be = BigInt(1);
var Wn = BigInt(2);
function It(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function Ut(t2) {
  if (!It(t2))
    throw new Error("Uint8Array expected");
}
function Tt(t2, e3) {
  if (typeof e3 != "boolean")
    throw new Error(t2 + " boolean expected, got " + e3);
}
var Xn = Array.from({ length: 256 }, (t2, e3) => e3.toString(16).padStart(2, "0"));
function Ft(t2) {
  Ut(t2);
  let e3 = "";
  for (let n6 = 0; n6 < t2.length; n6++)
    e3 += Xn[t2[n6]];
  return e3;
}
function pe(t2) {
  if (typeof t2 != "string")
    throw new Error("hex string expected, got " + typeof t2);
  return t2 === "" ? vt : BigInt("0x" + t2);
}
var K3 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function we(t2) {
  if (t2 >= K3._0 && t2 <= K3._9)
    return t2 - K3._0;
  if (t2 >= K3.A && t2 <= K3.F)
    return t2 - (K3.A - 10);
  if (t2 >= K3.a && t2 <= K3.f)
    return t2 - (K3.a - 10);
}
function Ee(t2) {
  if (typeof t2 != "string")
    throw new Error("hex string expected, got " + typeof t2);
  const e3 = t2.length, n6 = e3 / 2;
  if (e3 % 2)
    throw new Error("hex string expected, got unpadded hex of length " + e3);
  const r4 = new Uint8Array(n6);
  for (let o6 = 0, s4 = 0; o6 < n6; o6++, s4 += 2) {
    const a4 = we(t2.charCodeAt(s4)), u4 = we(t2.charCodeAt(s4 + 1));
    if (a4 === void 0 || u4 === void 0) {
      const i6 = t2[s4] + t2[s4 + 1];
      throw new Error('hex string expected, got non-hex character "' + i6 + '" at index ' + s4);
    }
    r4[o6] = a4 * 16 + u4;
  }
  return r4;
}
function Pn(t2) {
  return pe(Ft(t2));
}
function Et(t2) {
  return Ut(t2), pe(Ft(Uint8Array.from(t2).reverse()));
}
function ge(t2, e3) {
  return Ee(t2.toString(16).padStart(e3 * 2, "0"));
}
function Nt(t2, e3) {
  return ge(t2, e3).reverse();
}
function W(t2, e3, n6) {
  let r4;
  if (typeof e3 == "string")
    try {
      r4 = Ee(e3);
    } catch (s4) {
      throw new Error(t2 + " must be hex string or Uint8Array, cause: " + s4);
    }
  else if (It(e3))
    r4 = Uint8Array.from(e3);
  else
    throw new Error(t2 + " must be hex string or Uint8Array");
  const o6 = r4.length;
  if (typeof n6 == "number" && o6 !== n6)
    throw new Error(t2 + " of length " + n6 + " expected, got " + o6);
  return r4;
}
function ye(...t2) {
  let e3 = 0;
  for (let r4 = 0; r4 < t2.length; r4++) {
    const o6 = t2[r4];
    Ut(o6), e3 += o6.length;
  }
  const n6 = new Uint8Array(e3);
  for (let r4 = 0, o6 = 0; r4 < t2.length; r4++) {
    const s4 = t2[r4];
    n6.set(s4, o6), o6 += s4.length;
  }
  return n6;
}
var Lt = (t2) => typeof t2 == "bigint" && vt <= t2;
function Qn(t2, e3, n6) {
  return Lt(t2) && Lt(e3) && Lt(n6) && e3 <= t2 && t2 < n6;
}
function ft(t2, e3, n6, r4) {
  if (!Qn(e3, n6, r4))
    throw new Error("expected valid " + t2 + ": " + n6 + " <= n < " + r4 + ", got " + e3);
}
function tr(t2) {
  let e3;
  for (e3 = 0; t2 > vt; t2 >>= be, e3 += 1)
    ;
  return e3;
}
var er = (t2) => (Wn << BigInt(t2 - 1)) - be;
var nr = { bigint: (t2) => typeof t2 == "bigint", function: (t2) => typeof t2 == "function", boolean: (t2) => typeof t2 == "boolean", string: (t2) => typeof t2 == "string", stringOrUint8Array: (t2) => typeof t2 == "string" || It(t2), isSafeInteger: (t2) => Number.isSafeInteger(t2), array: (t2) => Array.isArray(t2), field: (t2, e3) => e3.Fp.isValid(t2), hash: (t2) => typeof t2 == "function" && Number.isSafeInteger(t2.outputLen) };
function Ot(t2, e3, n6 = {}) {
  const r4 = (o6, s4, a4) => {
    const u4 = nr[s4];
    if (typeof u4 != "function")
      throw new Error("invalid validator function");
    const i6 = t2[o6];
    if (!(a4 && i6 === void 0) && !u4(i6, t2))
      throw new Error("param " + String(o6) + " is invalid. Expected " + s4 + ", got " + i6);
  };
  for (const [o6, s4] of Object.entries(e3))
    r4(o6, s4, false);
  for (const [o6, s4] of Object.entries(n6))
    r4(o6, s4, true);
  return t2;
}
function xe(t2) {
  const e3 = /* @__PURE__ */ new WeakMap();
  return (n6, ...r4) => {
    const o6 = e3.get(n6);
    if (o6 !== void 0)
      return o6;
    const s4 = t2(n6, ...r4);
    return e3.set(n6, s4), s4;
  };
}
var M = BigInt(0);
var N = BigInt(1);
var nt = BigInt(2);
var rr = BigInt(3);
var Ht = BigInt(4);
var Be = BigInt(5);
var Ce = BigInt(8);
function H(t2, e3) {
  const n6 = t2 % e3;
  return n6 >= M ? n6 : e3 + n6;
}
function or(t2, e3, n6) {
  if (e3 < M)
    throw new Error("invalid exponent, negatives unsupported");
  if (n6 <= M)
    throw new Error("invalid modulus");
  if (n6 === N)
    return M;
  let r4 = N;
  for (; e3 > M; )
    e3 & N && (r4 = r4 * t2 % n6), t2 = t2 * t2 % n6, e3 >>= N;
  return r4;
}
function J(t2, e3, n6) {
  let r4 = t2;
  for (; e3-- > M; )
    r4 *= r4, r4 %= n6;
  return r4;
}
function Ae(t2, e3) {
  if (t2 === M)
    throw new Error("invert: expected non-zero number");
  if (e3 <= M)
    throw new Error("invert: expected positive modulus, got " + e3);
  let n6 = H(t2, e3), r4 = e3, o6 = M, s4 = N;
  for (; n6 !== M; ) {
    const u4 = r4 / n6, i6 = r4 % n6, D3 = o6 - s4 * u4;
    r4 = n6, n6 = i6, o6 = s4, s4 = D3;
  }
  if (r4 !== N)
    throw new Error("invert: does not exist");
  return H(o6, e3);
}
function sr(t2) {
  const e3 = (t2 - N) / nt;
  let n6, r4, o6;
  for (n6 = t2 - N, r4 = 0; n6 % nt === M; n6 /= nt, r4++)
    ;
  for (o6 = nt; o6 < t2 && or(o6, e3, t2) !== t2 - N; o6++)
    if (o6 > 1e3)
      throw new Error("Cannot find square root: likely non-prime P");
  if (r4 === 1) {
    const a4 = (t2 + N) / Ht;
    return function(i6, D3) {
      const c8 = i6.pow(D3, a4);
      if (!i6.eql(i6.sqr(c8), D3))
        throw new Error("Cannot find square root");
      return c8;
    };
  }
  const s4 = (n6 + N) / nt;
  return function(u4, i6) {
    if (u4.pow(i6, e3) === u4.neg(u4.ONE))
      throw new Error("Cannot find square root");
    let D3 = r4, c8 = u4.pow(u4.mul(u4.ONE, o6), n6), l8 = u4.pow(i6, s4), p5 = u4.pow(i6, n6);
    for (; !u4.eql(p5, u4.ONE); ) {
      if (u4.eql(p5, u4.ZERO))
        return u4.ZERO;
      let w6 = 1;
      for (let g7 = u4.sqr(p5); w6 < D3 && !u4.eql(g7, u4.ONE); w6++)
        g7 = u4.sqr(g7);
      const h6 = u4.pow(c8, N << BigInt(D3 - w6 - 1));
      c8 = u4.sqr(h6), l8 = u4.mul(l8, h6), p5 = u4.mul(p5, c8), D3 = w6;
    }
    return l8;
  };
}
function ir(t2) {
  if (t2 % Ht === rr) {
    const e3 = (t2 + N) / Ht;
    return function(r4, o6) {
      const s4 = r4.pow(o6, e3);
      if (!r4.eql(r4.sqr(s4), o6))
        throw new Error("Cannot find square root");
      return s4;
    };
  }
  if (t2 % Ce === Be) {
    const e3 = (t2 - Be) / Ce;
    return function(r4, o6) {
      const s4 = r4.mul(o6, nt), a4 = r4.pow(s4, e3), u4 = r4.mul(o6, a4), i6 = r4.mul(r4.mul(u4, nt), a4), D3 = r4.mul(u4, r4.sub(i6, r4.ONE));
      if (!r4.eql(r4.sqr(D3), o6))
        throw new Error("Cannot find square root");
      return D3;
    };
  }
  return sr(t2);
}
var ur = (t2, e3) => (H(t2, e3) & N) === N;
var cr = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function ar(t2) {
  const e3 = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n6 = cr.reduce((r4, o6) => (r4[o6] = "function", r4), e3);
  return Ot(t2, n6);
}
function fr(t2, e3, n6) {
  if (n6 < M)
    throw new Error("invalid exponent, negatives unsupported");
  if (n6 === M)
    return t2.ONE;
  if (n6 === N)
    return e3;
  let r4 = t2.ONE, o6 = e3;
  for (; n6 > M; )
    n6 & N && (r4 = t2.mul(r4, o6)), o6 = t2.sqr(o6), n6 >>= N;
  return r4;
}
function Dr(t2, e3) {
  const n6 = new Array(e3.length), r4 = e3.reduce((s4, a4, u4) => t2.is0(a4) ? s4 : (n6[u4] = s4, t2.mul(s4, a4)), t2.ONE), o6 = t2.inv(r4);
  return e3.reduceRight((s4, a4, u4) => t2.is0(a4) ? s4 : (n6[u4] = t2.mul(s4, n6[u4]), t2.mul(s4, a4)), o6), n6;
}
function me(t2, e3) {
  const n6 = e3 !== void 0 ? e3 : t2.toString(2).length, r4 = Math.ceil(n6 / 8);
  return { nBitLength: n6, nByteLength: r4 };
}
function _e(t2, e3, n6 = false, r4 = {}) {
  if (t2 <= M)
    throw new Error("invalid field: expected ORDER > 0, got " + t2);
  const { nBitLength: o6, nByteLength: s4 } = me(t2, e3);
  if (s4 > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a4;
  const u4 = Object.freeze({ ORDER: t2, isLE: n6, BITS: o6, BYTES: s4, MASK: er(o6), ZERO: M, ONE: N, create: (i6) => H(i6, t2), isValid: (i6) => {
    if (typeof i6 != "bigint")
      throw new Error("invalid field element: expected bigint, got " + typeof i6);
    return M <= i6 && i6 < t2;
  }, is0: (i6) => i6 === M, isOdd: (i6) => (i6 & N) === N, neg: (i6) => H(-i6, t2), eql: (i6, D3) => i6 === D3, sqr: (i6) => H(i6 * i6, t2), add: (i6, D3) => H(i6 + D3, t2), sub: (i6, D3) => H(i6 - D3, t2), mul: (i6, D3) => H(i6 * D3, t2), pow: (i6, D3) => fr(u4, i6, D3), div: (i6, D3) => H(i6 * Ae(D3, t2), t2), sqrN: (i6) => i6 * i6, addN: (i6, D3) => i6 + D3, subN: (i6, D3) => i6 - D3, mulN: (i6, D3) => i6 * D3, inv: (i6) => Ae(i6, t2), sqrt: r4.sqrt || ((i6) => (a4 || (a4 = ir(t2)), a4(u4, i6))), invertBatch: (i6) => Dr(u4, i6), cmov: (i6, D3, c8) => c8 ? D3 : i6, toBytes: (i6) => n6 ? Nt(i6, s4) : ge(i6, s4), fromBytes: (i6) => {
    if (i6.length !== s4)
      throw new Error("Field.fromBytes: expected " + s4 + " bytes, got " + i6.length);
    return n6 ? Et(i6) : Pn(i6);
  } });
  return Object.freeze(u4);
}
var Se = BigInt(0);
var gt = BigInt(1);
function zt(t2, e3) {
  const n6 = e3.negate();
  return t2 ? n6 : e3;
}
function ve(t2, e3) {
  if (!Number.isSafeInteger(t2) || t2 <= 0 || t2 > e3)
    throw new Error("invalid window size, expected [1.." + e3 + "], got W=" + t2);
}
function Mt(t2, e3) {
  ve(t2, e3);
  const n6 = Math.ceil(e3 / t2) + 1, r4 = 2 ** (t2 - 1);
  return { windows: n6, windowSize: r4 };
}
function dr(t2, e3) {
  if (!Array.isArray(t2))
    throw new Error("array expected");
  t2.forEach((n6, r4) => {
    if (!(n6 instanceof e3))
      throw new Error("invalid point at index " + r4);
  });
}
function hr(t2, e3) {
  if (!Array.isArray(t2))
    throw new Error("array of scalars expected");
  t2.forEach((n6, r4) => {
    if (!e3.isValid(n6))
      throw new Error("invalid scalar at index " + r4);
  });
}
var qt = /* @__PURE__ */ new WeakMap();
var Ie = /* @__PURE__ */ new WeakMap();
function $t(t2) {
  return Ie.get(t2) || 1;
}
function lr(t2, e3) {
  return { constTimeNegate: zt, hasPrecomputes(n6) {
    return $t(n6) !== 1;
  }, unsafeLadder(n6, r4, o6 = t2.ZERO) {
    let s4 = n6;
    for (; r4 > Se; )
      r4 & gt && (o6 = o6.add(s4)), s4 = s4.double(), r4 >>= gt;
    return o6;
  }, precomputeWindow(n6, r4) {
    const { windows: o6, windowSize: s4 } = Mt(r4, e3), a4 = [];
    let u4 = n6, i6 = u4;
    for (let D3 = 0; D3 < o6; D3++) {
      i6 = u4, a4.push(i6);
      for (let c8 = 1; c8 < s4; c8++)
        i6 = i6.add(u4), a4.push(i6);
      u4 = i6.double();
    }
    return a4;
  }, wNAF(n6, r4, o6) {
    const { windows: s4, windowSize: a4 } = Mt(n6, e3);
    let u4 = t2.ZERO, i6 = t2.BASE;
    const D3 = BigInt(2 ** n6 - 1), c8 = 2 ** n6, l8 = BigInt(n6);
    for (let p5 = 0; p5 < s4; p5++) {
      const w6 = p5 * a4;
      let h6 = Number(o6 & D3);
      o6 >>= l8, h6 > a4 && (h6 -= c8, o6 += gt);
      const g7 = w6, S6 = w6 + Math.abs(h6) - 1, v11 = p5 % 2 !== 0, L5 = h6 < 0;
      h6 === 0 ? i6 = i6.add(zt(v11, r4[g7])) : u4 = u4.add(zt(L5, r4[S6]));
    }
    return { p: u4, f: i6 };
  }, wNAFUnsafe(n6, r4, o6, s4 = t2.ZERO) {
    const { windows: a4, windowSize: u4 } = Mt(n6, e3), i6 = BigInt(2 ** n6 - 1), D3 = 2 ** n6, c8 = BigInt(n6);
    for (let l8 = 0; l8 < a4; l8++) {
      const p5 = l8 * u4;
      if (o6 === Se)
        break;
      let w6 = Number(o6 & i6);
      if (o6 >>= c8, w6 > u4 && (w6 -= D3, o6 += gt), w6 === 0)
        continue;
      let h6 = r4[p5 + Math.abs(w6) - 1];
      w6 < 0 && (h6 = h6.negate()), s4 = s4.add(h6);
    }
    return s4;
  }, getPrecomputes(n6, r4, o6) {
    let s4 = qt.get(r4);
    return s4 || (s4 = this.precomputeWindow(r4, n6), n6 !== 1 && qt.set(r4, o6(s4))), s4;
  }, wNAFCached(n6, r4, o6) {
    const s4 = $t(n6);
    return this.wNAF(s4, this.getPrecomputes(s4, n6, o6), r4);
  }, wNAFCachedUnsafe(n6, r4, o6, s4) {
    const a4 = $t(n6);
    return a4 === 1 ? this.unsafeLadder(n6, r4, s4) : this.wNAFUnsafe(a4, this.getPrecomputes(a4, n6, o6), r4, s4);
  }, setWindowSize(n6, r4) {
    ve(r4, e3), Ie.set(n6, r4), qt.delete(n6);
  } };
}
function br(t2, e3, n6, r4) {
  if (dr(n6, t2), hr(r4, e3), n6.length !== r4.length)
    throw new Error("arrays of points and scalars must have equal length");
  const o6 = t2.ZERO, s4 = tr(BigInt(n6.length)), a4 = s4 > 12 ? s4 - 3 : s4 > 4 ? s4 - 2 : s4 ? 2 : 1, u4 = (1 << a4) - 1, i6 = new Array(u4 + 1).fill(o6), D3 = Math.floor((e3.BITS - 1) / a4) * a4;
  let c8 = o6;
  for (let l8 = D3; l8 >= 0; l8 -= a4) {
    i6.fill(o6);
    for (let w6 = 0; w6 < r4.length; w6++) {
      const h6 = r4[w6], g7 = Number(h6 >> BigInt(l8) & BigInt(u4));
      i6[g7] = i6[g7].add(n6[w6]);
    }
    let p5 = o6;
    for (let w6 = i6.length - 1, h6 = o6; w6 > 0; w6--)
      h6 = h6.add(i6[w6]), p5 = p5.add(h6);
    if (c8 = c8.add(p5), l8 !== 0)
      for (let w6 = 0; w6 < a4; w6++)
        c8 = c8.double();
  }
  return c8;
}
function pr(t2) {
  return ar(t2.Fp), Ot(t2, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...me(t2.n, t2.nBitLength), ...t2, p: t2.Fp.ORDER });
}
var G = BigInt(0);
var j = BigInt(1);
var yt = BigInt(2);
var wr = BigInt(8);
var Er = { zip215: true };
function gr(t2) {
  const e3 = pr(t2);
  return Ot(t2, { hash: "function", a: "bigint", d: "bigint", randomBytes: "function" }, { adjustScalarBytes: "function", domain: "function", uvRatio: "function", mapToCurve: "function" }), Object.freeze({ ...e3 });
}
function yr(t2) {
  const e3 = gr(t2), { Fp: n6, n: r4, prehash: o6, hash: s4, randomBytes: a4, nByteLength: u4, h: i6 } = e3, D3 = yt << BigInt(u4 * 8) - j, c8 = n6.create, l8 = _e(e3.n, e3.nBitLength), p5 = e3.uvRatio || ((y6, f11) => {
    try {
      return { isValid: true, value: n6.sqrt(y6 * n6.inv(f11)) };
    } catch {
      return { isValid: false, value: G };
    }
  }), w6 = e3.adjustScalarBytes || ((y6) => y6), h6 = e3.domain || ((y6, f11, b5) => {
    if (Tt("phflag", b5), f11.length || b5)
      throw new Error("Contexts/pre-hash are not supported");
    return y6;
  });
  function g7(y6, f11) {
    ft("coordinate " + y6, f11, G, D3);
  }
  function S6(y6) {
    if (!(y6 instanceof d8))
      throw new Error("ExtendedPoint expected");
  }
  const v11 = xe((y6, f11) => {
    const { ex: b5, ey: E6, ez: B5 } = y6, C7 = y6.is0();
    f11 == null && (f11 = C7 ? wr : n6.inv(B5));
    const A5 = c8(b5 * f11), U4 = c8(E6 * f11), _6 = c8(B5 * f11);
    if (C7)
      return { x: G, y: j };
    if (_6 !== j)
      throw new Error("invZ was invalid");
    return { x: A5, y: U4 };
  }), L5 = xe((y6) => {
    const { a: f11, d: b5 } = e3;
    if (y6.is0())
      throw new Error("bad point: ZERO");
    const { ex: E6, ey: B5, ez: C7, et: A5 } = y6, U4 = c8(E6 * E6), _6 = c8(B5 * B5), T7 = c8(C7 * C7), $4 = c8(T7 * T7), R4 = c8(U4 * f11), V4 = c8(T7 * c8(R4 + _6)), Y2 = c8($4 + c8(b5 * c8(U4 * _6)));
    if (V4 !== Y2)
      throw new Error("bad point: equation left != right (1)");
    const Z2 = c8(E6 * B5), X3 = c8(C7 * A5);
    if (Z2 !== X3)
      throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class d8 {
    constructor(f11, b5, E6, B5) {
      this.ex = f11, this.ey = b5, this.ez = E6, this.et = B5, g7("x", f11), g7("y", b5), g7("z", E6), g7("t", B5), Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(f11) {
      if (f11 instanceof d8)
        throw new Error("extended point not allowed");
      const { x: b5, y: E6 } = f11 || {};
      return g7("x", b5), g7("y", E6), new d8(b5, E6, j, c8(b5 * E6));
    }
    static normalizeZ(f11) {
      const b5 = n6.invertBatch(f11.map((E6) => E6.ez));
      return f11.map((E6, B5) => E6.toAffine(b5[B5])).map(d8.fromAffine);
    }
    static msm(f11, b5) {
      return br(d8, l8, f11, b5);
    }
    _setWindowSize(f11) {
      q3.setWindowSize(this, f11);
    }
    assertValidity() {
      L5(this);
    }
    equals(f11) {
      S6(f11);
      const { ex: b5, ey: E6, ez: B5 } = this, { ex: C7, ey: A5, ez: U4 } = f11, _6 = c8(b5 * U4), T7 = c8(C7 * B5), $4 = c8(E6 * U4), R4 = c8(A5 * B5);
      return _6 === T7 && $4 === R4;
    }
    is0() {
      return this.equals(d8.ZERO);
    }
    negate() {
      return new d8(c8(-this.ex), this.ey, this.ez, c8(-this.et));
    }
    double() {
      const { a: f11 } = e3, { ex: b5, ey: E6, ez: B5 } = this, C7 = c8(b5 * b5), A5 = c8(E6 * E6), U4 = c8(yt * c8(B5 * B5)), _6 = c8(f11 * C7), T7 = b5 + E6, $4 = c8(c8(T7 * T7) - C7 - A5), R4 = _6 + A5, V4 = R4 - U4, Y2 = _6 - A5, Z2 = c8($4 * V4), X3 = c8(R4 * Y2), et4 = c8($4 * Y2), pt4 = c8(V4 * R4);
      return new d8(Z2, X3, pt4, et4);
    }
    add(f11) {
      S6(f11);
      const { a: b5, d: E6 } = e3, { ex: B5, ey: C7, ez: A5, et: U4 } = this, { ex: _6, ey: T7, ez: $4, et: R4 } = f11;
      if (b5 === BigInt(-1)) {
        const re4 = c8((C7 - B5) * (T7 + _6)), oe4 = c8((C7 + B5) * (T7 - _6)), mt4 = c8(oe4 - re4);
        if (mt4 === G)
          return this.double();
        const se3 = c8(A5 * yt * R4), ie4 = c8(U4 * yt * $4), ue2 = ie4 + se3, ce3 = oe4 + re4, ae4 = ie4 - se3, Dn3 = c8(ue2 * mt4), dn3 = c8(ce3 * ae4), hn3 = c8(ue2 * ae4), ln3 = c8(mt4 * ce3);
        return new d8(Dn3, dn3, ln3, hn3);
      }
      const V4 = c8(B5 * _6), Y2 = c8(C7 * T7), Z2 = c8(U4 * E6 * R4), X3 = c8(A5 * $4), et4 = c8((B5 + C7) * (_6 + T7) - V4 - Y2), pt4 = X3 - Z2, ee4 = X3 + Z2, ne3 = c8(Y2 - b5 * V4), un3 = c8(et4 * pt4), cn3 = c8(ee4 * ne3), an3 = c8(et4 * ne3), fn3 = c8(pt4 * ee4);
      return new d8(un3, cn3, fn3, an3);
    }
    subtract(f11) {
      return this.add(f11.negate());
    }
    wNAF(f11) {
      return q3.wNAFCached(this, f11, d8.normalizeZ);
    }
    multiply(f11) {
      const b5 = f11;
      ft("scalar", b5, j, r4);
      const { p: E6, f: B5 } = this.wNAF(b5);
      return d8.normalizeZ([E6, B5])[0];
    }
    multiplyUnsafe(f11, b5 = d8.ZERO) {
      const E6 = f11;
      return ft("scalar", E6, G, r4), E6 === G ? F4 : this.is0() || E6 === j ? this : q3.wNAFCachedUnsafe(this, E6, d8.normalizeZ, b5);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i6).is0();
    }
    isTorsionFree() {
      return q3.unsafeLadder(this, r4).is0();
    }
    toAffine(f11) {
      return v11(this, f11);
    }
    clearCofactor() {
      const { h: f11 } = e3;
      return f11 === j ? this : this.multiplyUnsafe(f11);
    }
    static fromHex(f11, b5 = false) {
      const { d: E6, a: B5 } = e3, C7 = n6.BYTES;
      f11 = W("pointHex", f11, C7), Tt("zip215", b5);
      const A5 = f11.slice(), U4 = f11[C7 - 1];
      A5[C7 - 1] = U4 & -129;
      const _6 = Et(A5), T7 = b5 ? D3 : n6.ORDER;
      ft("pointHex.y", _6, G, T7);
      const $4 = c8(_6 * _6), R4 = c8($4 - j), V4 = c8(E6 * $4 - B5);
      let { isValid: Y2, value: Z2 } = p5(R4, V4);
      if (!Y2)
        throw new Error("Point.fromHex: invalid y coordinate");
      const X3 = (Z2 & j) === j, et4 = (U4 & 128) !== 0;
      if (!b5 && Z2 === G && et4)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      return et4 !== X3 && (Z2 = c8(-Z2)), d8.fromAffine({ x: Z2, y: _6 });
    }
    static fromPrivateKey(f11) {
      return O7(f11).point;
    }
    toRawBytes() {
      const { x: f11, y: b5 } = this.toAffine(), E6 = Nt(b5, n6.BYTES);
      return E6[E6.length - 1] |= f11 & j ? 128 : 0, E6;
    }
    toHex() {
      return Ft(this.toRawBytes());
    }
  }
  d8.BASE = new d8(e3.Gx, e3.Gy, j, c8(e3.Gx * e3.Gy)), d8.ZERO = new d8(G, j, j, G);
  const { BASE: m6, ZERO: F4 } = d8, q3 = lr(d8, u4 * 8);
  function z7(y6) {
    return H(y6, r4);
  }
  function I4(y6) {
    return z7(Et(y6));
  }
  function O7(y6) {
    const f11 = n6.BYTES;
    y6 = W("private key", y6, f11);
    const b5 = W("hashed private key", s4(y6), 2 * f11), E6 = w6(b5.slice(0, f11)), B5 = b5.slice(f11, 2 * f11), C7 = I4(E6), A5 = m6.multiply(C7), U4 = A5.toRawBytes();
    return { head: E6, prefix: B5, scalar: C7, point: A5, pointBytes: U4 };
  }
  function ot3(y6) {
    return O7(y6).pointBytes;
  }
  function tt4(y6 = new Uint8Array(), ...f11) {
    const b5 = ye(...f11);
    return I4(s4(h6(b5, W("context", y6), !!o6)));
  }
  function st4(y6, f11, b5 = {}) {
    y6 = W("message", y6), o6 && (y6 = o6(y6));
    const { prefix: E6, scalar: B5, pointBytes: C7 } = O7(f11), A5 = tt4(b5.context, E6, y6), U4 = m6.multiply(A5).toRawBytes(), _6 = tt4(b5.context, U4, C7, y6), T7 = z7(A5 + _6 * B5);
    ft("signature.s", T7, G, r4);
    const $4 = ye(U4, Nt(T7, n6.BYTES));
    return W("result", $4, n6.BYTES * 2);
  }
  const at2 = Er;
  function Ct4(y6, f11, b5, E6 = at2) {
    const { context: B5, zip215: C7 } = E6, A5 = n6.BYTES;
    y6 = W("signature", y6, 2 * A5), f11 = W("message", f11), b5 = W("publicKey", b5, A5), C7 !== void 0 && Tt("zip215", C7), o6 && (f11 = o6(f11));
    const U4 = Et(y6.slice(A5, 2 * A5));
    let _6, T7, $4;
    try {
      _6 = d8.fromHex(b5, C7), T7 = d8.fromHex(y6.slice(0, A5), C7), $4 = m6.multiplyUnsafe(U4);
    } catch {
      return false;
    }
    if (!C7 && _6.isSmallOrder())
      return false;
    const R4 = tt4(B5, T7.toRawBytes(), _6.toRawBytes(), f11);
    return T7.add(_6.multiplyUnsafe(R4)).subtract($4).clearCofactor().equals(d8.ZERO);
  }
  return m6._setWindowSize(8), { CURVE: e3, getPublicKey: ot3, sign: st4, verify: Ct4, ExtendedPoint: d8, utils: { getExtendedPublicKey: O7, randomPrivateKey: () => a4(n6.BYTES), precompute(y6 = 8, f11 = d8.BASE) {
    return f11._setWindowSize(y6), f11.multiply(BigInt(3)), f11;
  } } };
}
BigInt(0), BigInt(1);
var kt = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var Ue = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
var xr = BigInt(1);
var Te = BigInt(2);
BigInt(3);
var Br = BigInt(5);
var Cr = BigInt(8);
function Ar(t2) {
  const e3 = BigInt(10), n6 = BigInt(20), r4 = BigInt(40), o6 = BigInt(80), s4 = kt, u4 = t2 * t2 % s4 * t2 % s4, i6 = J(u4, Te, s4) * u4 % s4, D3 = J(i6, xr, s4) * t2 % s4, c8 = J(D3, Br, s4) * D3 % s4, l8 = J(c8, e3, s4) * c8 % s4, p5 = J(l8, n6, s4) * l8 % s4, w6 = J(p5, r4, s4) * p5 % s4, h6 = J(w6, o6, s4) * w6 % s4, g7 = J(h6, o6, s4) * w6 % s4, S6 = J(g7, e3, s4) * c8 % s4;
  return { pow_p_5_8: J(S6, Te, s4) * t2 % s4, b2: u4 };
}
function mr(t2) {
  return t2[0] &= 248, t2[31] &= 127, t2[31] |= 64, t2;
}
function _r(t2, e3) {
  const n6 = kt, r4 = H(e3 * e3 * e3, n6), o6 = H(r4 * r4 * e3, n6), s4 = Ar(t2 * o6).pow_p_5_8;
  let a4 = H(t2 * r4 * s4, n6);
  const u4 = H(e3 * a4 * a4, n6), i6 = a4, D3 = H(a4 * Ue, n6), c8 = u4 === t2, l8 = u4 === H(-t2, n6), p5 = u4 === H(-t2 * Ue, n6);
  return c8 && (a4 = i6), (l8 || p5) && (a4 = D3), ur(a4, n6) && (a4 = H(-a4, n6)), { isValid: c8 || l8, value: a4 };
}
var Sr = (() => _e(kt, void 0, true))();
var vr = (() => ({ a: BigInt(-1), d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"), Fp: Sr, n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), h: Cr, Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"), Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"), hash: Kn, randomBytes: he, adjustScalarBytes: mr, uvRatio: _r }))();
var Rt = (() => yr(vr))();
var jt = "EdDSA";
var Zt = "JWT";
var ut = ".";
var Dt = "base64url";
var Gt = "utf8";
var xt = "utf8";
var Vt = ":";
var Yt = "did";
var Jt = "key";
var dt = "base58btc";
var Kt = "z";
var Wt = "K36";
var Ne = 32;
function Xt(t2) {
  return globalThis.Buffer != null ? new Uint8Array(t2.buffer, t2.byteOffset, t2.byteLength) : t2;
}
function Le(t2 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t2)) : new Uint8Array(t2);
}
function Oe(t2, e3) {
  e3 || (e3 = t2.reduce((o6, s4) => o6 + s4.length, 0));
  const n6 = Le(e3);
  let r4 = 0;
  for (const o6 of t2)
    n6.set(o6, r4), r4 += o6.length;
  return Xt(n6);
}
function Ir(t2, e3) {
  if (t2.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var n6 = new Uint8Array(256), r4 = 0; r4 < n6.length; r4++)
    n6[r4] = 255;
  for (var o6 = 0; o6 < t2.length; o6++) {
    var s4 = t2.charAt(o6), a4 = s4.charCodeAt(0);
    if (n6[a4] !== 255)
      throw new TypeError(s4 + " is ambiguous");
    n6[a4] = o6;
  }
  var u4 = t2.length, i6 = t2.charAt(0), D3 = Math.log(u4) / Math.log(256), c8 = Math.log(256) / Math.log(u4);
  function l8(h6) {
    if (h6 instanceof Uint8Array || (ArrayBuffer.isView(h6) ? h6 = new Uint8Array(h6.buffer, h6.byteOffset, h6.byteLength) : Array.isArray(h6) && (h6 = Uint8Array.from(h6))), !(h6 instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (h6.length === 0)
      return "";
    for (var g7 = 0, S6 = 0, v11 = 0, L5 = h6.length; v11 !== L5 && h6[v11] === 0; )
      v11++, g7++;
    for (var d8 = (L5 - v11) * c8 + 1 >>> 0, m6 = new Uint8Array(d8); v11 !== L5; ) {
      for (var F4 = h6[v11], q3 = 0, z7 = d8 - 1; (F4 !== 0 || q3 < S6) && z7 !== -1; z7--, q3++)
        F4 += 256 * m6[z7] >>> 0, m6[z7] = F4 % u4 >>> 0, F4 = F4 / u4 >>> 0;
      if (F4 !== 0)
        throw new Error("Non-zero carry");
      S6 = q3, v11++;
    }
    for (var I4 = d8 - S6; I4 !== d8 && m6[I4] === 0; )
      I4++;
    for (var O7 = i6.repeat(g7); I4 < d8; ++I4)
      O7 += t2.charAt(m6[I4]);
    return O7;
  }
  function p5(h6) {
    if (typeof h6 != "string")
      throw new TypeError("Expected String");
    if (h6.length === 0)
      return new Uint8Array();
    var g7 = 0;
    if (h6[g7] !== " ") {
      for (var S6 = 0, v11 = 0; h6[g7] === i6; )
        S6++, g7++;
      for (var L5 = (h6.length - g7) * D3 + 1 >>> 0, d8 = new Uint8Array(L5); h6[g7]; ) {
        var m6 = n6[h6.charCodeAt(g7)];
        if (m6 === 255)
          return;
        for (var F4 = 0, q3 = L5 - 1; (m6 !== 0 || F4 < v11) && q3 !== -1; q3--, F4++)
          m6 += u4 * d8[q3] >>> 0, d8[q3] = m6 % 256 >>> 0, m6 = m6 / 256 >>> 0;
        if (m6 !== 0)
          throw new Error("Non-zero carry");
        v11 = F4, g7++;
      }
      if (h6[g7] !== " ") {
        for (var z7 = L5 - v11; z7 !== L5 && d8[z7] === 0; )
          z7++;
        for (var I4 = new Uint8Array(S6 + (L5 - z7)), O7 = S6; z7 !== L5; )
          I4[O7++] = d8[z7++];
        return I4;
      }
    }
  }
  function w6(h6) {
    var g7 = p5(h6);
    if (g7)
      return g7;
    throw new Error(`Non-${e3} character`);
  }
  return { encode: l8, decodeUnsafe: p5, decode: w6 };
}
var Ur = Ir;
var Tr = Ur;
var He = (t2) => {
  if (t2 instanceof Uint8Array && t2.constructor.name === "Uint8Array")
    return t2;
  if (t2 instanceof ArrayBuffer)
    return new Uint8Array(t2);
  if (ArrayBuffer.isView(t2))
    return new Uint8Array(t2.buffer, t2.byteOffset, t2.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Fr = (t2) => new TextEncoder().encode(t2);
var Nr = (t2) => new TextDecoder().decode(t2);
var Lr = class {
  constructor(e3, n6, r4) {
    this.name = e3, this.prefix = n6, this.baseEncode = r4;
  }
  encode(e3) {
    if (e3 instanceof Uint8Array)
      return `${this.prefix}${this.baseEncode(e3)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Or = class {
  constructor(e3, n6, r4) {
    if (this.name = e3, this.prefix = n6, n6.codePointAt(0) === void 0)
      throw new Error("Invalid prefix character");
    this.prefixCodePoint = n6.codePointAt(0), this.baseDecode = r4;
  }
  decode(e3) {
    if (typeof e3 == "string") {
      if (e3.codePointAt(0) !== this.prefixCodePoint)
        throw Error(`Unable to decode multibase string ${JSON.stringify(e3)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e3.slice(this.prefix.length));
    } else
      throw Error("Can only multibase decode strings");
  }
  or(e3) {
    return ze(this, e3);
  }
};
var Hr = class {
  constructor(e3) {
    this.decoders = e3;
  }
  or(e3) {
    return ze(this, e3);
  }
  decode(e3) {
    const n6 = e3[0], r4 = this.decoders[n6];
    if (r4)
      return r4.decode(e3);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e3)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ze = (t2, e3) => new Hr({ ...t2.decoders || { [t2.prefix]: t2 }, ...e3.decoders || { [e3.prefix]: e3 } });
var zr = class {
  constructor(e3, n6, r4, o6) {
    this.name = e3, this.prefix = n6, this.baseEncode = r4, this.baseDecode = o6, this.encoder = new Lr(e3, n6, r4), this.decoder = new Or(e3, n6, o6);
  }
  encode(e3) {
    return this.encoder.encode(e3);
  }
  decode(e3) {
    return this.decoder.decode(e3);
  }
};
var Bt = ({ name: t2, prefix: e3, encode: n6, decode: r4 }) => new zr(t2, e3, n6, r4);
var ht = ({ prefix: t2, name: e3, alphabet: n6 }) => {
  const { encode: r4, decode: o6 } = Tr(n6, e3);
  return Bt({ prefix: t2, name: e3, encode: r4, decode: (s4) => He(o6(s4)) });
};
var Mr = (t2, e3, n6, r4) => {
  const o6 = {};
  for (let c8 = 0; c8 < e3.length; ++c8)
    o6[e3[c8]] = c8;
  let s4 = t2.length;
  for (; t2[s4 - 1] === "="; )
    --s4;
  const a4 = new Uint8Array(s4 * n6 / 8 | 0);
  let u4 = 0, i6 = 0, D3 = 0;
  for (let c8 = 0; c8 < s4; ++c8) {
    const l8 = o6[t2[c8]];
    if (l8 === void 0)
      throw new SyntaxError(`Non-${r4} character`);
    i6 = i6 << n6 | l8, u4 += n6, u4 >= 8 && (u4 -= 8, a4[D3++] = 255 & i6 >> u4);
  }
  if (u4 >= n6 || 255 & i6 << 8 - u4)
    throw new SyntaxError("Unexpected end of data");
  return a4;
};
var qr = (t2, e3, n6) => {
  const r4 = e3[e3.length - 1] === "=", o6 = (1 << n6) - 1;
  let s4 = "", a4 = 0, u4 = 0;
  for (let i6 = 0; i6 < t2.length; ++i6)
    for (u4 = u4 << 8 | t2[i6], a4 += 8; a4 > n6; )
      a4 -= n6, s4 += e3[o6 & u4 >> a4];
  if (a4 && (s4 += e3[o6 & u4 << n6 - a4]), r4)
    for (; s4.length * n6 & 7; )
      s4 += "=";
  return s4;
};
var k = ({ name: t2, prefix: e3, bitsPerChar: n6, alphabet: r4 }) => Bt({ prefix: e3, name: t2, encode(o6) {
  return qr(o6, r4, n6);
}, decode(o6) {
  return Mr(o6, r4, n6, t2);
} });
var $r = Bt({ prefix: "\0", name: "identity", encode: (t2) => Nr(t2), decode: (t2) => Fr(t2) });
var kr = Object.freeze({ __proto__: null, identity: $r });
var Rr = k({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var jr = Object.freeze({ __proto__: null, base2: Rr });
var Zr = k({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Gr = Object.freeze({ __proto__: null, base8: Zr });
var Vr = ht({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Yr = Object.freeze({ __proto__: null, base10: Vr });
var Jr = k({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Kr = k({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Wr = Object.freeze({ __proto__: null, base16: Jr, base16upper: Kr });
var Xr = k({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr = k({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Qr = k({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var to = k({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var eo = k({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var no = k({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ro = k({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var oo = k({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var so = k({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var io = Object.freeze({ __proto__: null, base32: Xr, base32upper: Pr, base32pad: Qr, base32padupper: to, base32hex: eo, base32hexupper: no, base32hexpad: ro, base32hexpadupper: oo, base32z: so });
var uo = ht({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var co = ht({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var ao = Object.freeze({ __proto__: null, base36: uo, base36upper: co });
var fo = ht({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Do = ht({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ho = Object.freeze({ __proto__: null, base58btc: fo, base58flickr: Do });
var lo = k({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var bo = k({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var po = k({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var wo = k({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Eo = Object.freeze({ __proto__: null, base64: lo, base64pad: bo, base64url: po, base64urlpad: wo });
var Me = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var go = Me.reduce((t2, e3, n6) => (t2[n6] = e3, t2), []);
var yo = Me.reduce((t2, e3, n6) => (t2[e3.codePointAt(0)] = n6, t2), []);
function xo(t2) {
  return t2.reduce((e3, n6) => (e3 += go[n6], e3), "");
}
function Bo(t2) {
  const e3 = [];
  for (const n6 of t2) {
    const r4 = yo[n6.codePointAt(0)];
    if (r4 === void 0)
      throw new Error(`Non-base256emoji character: ${n6}`);
    e3.push(r4);
  }
  return new Uint8Array(e3);
}
var Co = Bt({ prefix: "🚀", name: "base256emoji", encode: xo, decode: Bo });
var Ao = Object.freeze({ __proto__: null, base256emoji: Co });
var mo = $e;
var qe = 128;
var _o = 127;
var So = ~_o;
var vo = Math.pow(2, 31);
function $e(t2, e3, n6) {
  e3 = e3 || [], n6 = n6 || 0;
  for (var r4 = n6; t2 >= vo; )
    e3[n6++] = t2 & 255 | qe, t2 /= 128;
  for (; t2 & So; )
    e3[n6++] = t2 & 255 | qe, t2 >>>= 7;
  return e3[n6] = t2 | 0, $e.bytes = n6 - r4 + 1, e3;
}
var Io = Pt;
var Uo = 128;
var ke = 127;
function Pt(t2, r4) {
  var n6 = 0, r4 = r4 || 0, o6 = 0, s4 = r4, a4, u4 = t2.length;
  do {
    if (s4 >= u4)
      throw Pt.bytes = 0, new RangeError("Could not decode varint");
    a4 = t2[s4++], n6 += o6 < 28 ? (a4 & ke) << o6 : (a4 & ke) * Math.pow(2, o6), o6 += 7;
  } while (a4 >= Uo);
  return Pt.bytes = s4 - r4, n6;
}
var To = Math.pow(2, 7);
var Fo = Math.pow(2, 14);
var No = Math.pow(2, 21);
var Lo = Math.pow(2, 28);
var Oo = Math.pow(2, 35);
var Ho = Math.pow(2, 42);
var zo = Math.pow(2, 49);
var Mo = Math.pow(2, 56);
var qo = Math.pow(2, 63);
var $o = function(t2) {
  return t2 < To ? 1 : t2 < Fo ? 2 : t2 < No ? 3 : t2 < Lo ? 4 : t2 < Oo ? 5 : t2 < Ho ? 6 : t2 < zo ? 7 : t2 < Mo ? 8 : t2 < qo ? 9 : 10;
};
var ko = { encode: mo, decode: Io, encodingLength: $o };
var Re = ko;
var je = (t2, e3, n6 = 0) => (Re.encode(t2, e3, n6), e3);
var Ze = (t2) => Re.encodingLength(t2);
var Qt = (t2, e3) => {
  const n6 = e3.byteLength, r4 = Ze(t2), o6 = r4 + Ze(n6), s4 = new Uint8Array(o6 + n6);
  return je(t2, s4, 0), je(n6, s4, r4), s4.set(e3, o6), new Ro(t2, n6, e3, s4);
};
var Ro = class {
  constructor(e3, n6, r4, o6) {
    this.code = e3, this.size = n6, this.digest = r4, this.bytes = o6;
  }
};
var Ge = ({ name: t2, code: e3, encode: n6 }) => new jo(t2, e3, n6);
var jo = class {
  constructor(e3, n6, r4) {
    this.name = e3, this.code = n6, this.encode = r4;
  }
  digest(e3) {
    if (e3 instanceof Uint8Array) {
      const n6 = this.encode(e3);
      return n6 instanceof Uint8Array ? Qt(this.code, n6) : n6.then((r4) => Qt(this.code, r4));
    } else
      throw Error("Unknown type, must be binary type");
  }
};
var Ve = (t2) => async (e3) => new Uint8Array(await crypto.subtle.digest(t2, e3));
var Zo = Ge({ name: "sha2-256", code: 18, encode: Ve("SHA-256") });
var Go = Ge({ name: "sha2-512", code: 19, encode: Ve("SHA-512") });
var Vo = Object.freeze({ __proto__: null, sha256: Zo, sha512: Go });
var Ye = 0;
var Yo = "identity";
var Je = He;
var Jo = (t2) => Qt(Ye, Je(t2));
var Ko = { code: Ye, name: Yo, encode: Je, digest: Jo };
var Wo = Object.freeze({ __proto__: null, identity: Ko });
new TextEncoder(), new TextDecoder();
var Ke = { ...kr, ...jr, ...Gr, ...Yr, ...Wr, ...io, ...ao, ...ho, ...Eo, ...Ao };
({ ...Vo, ...Wo });
function We(t2, e3, n6, r4) {
  return { name: t2, prefix: e3, encoder: { name: t2, prefix: e3, encode: n6 }, decoder: { decode: r4 } };
}
var Xe = We("utf8", "u", (t2) => "u" + new TextDecoder("utf8").decode(t2), (t2) => new TextEncoder().encode(t2.substring(1)));
var te = We("ascii", "a", (t2) => {
  let e3 = "a";
  for (let n6 = 0; n6 < t2.length; n6++)
    e3 += String.fromCharCode(t2[n6]);
  return e3;
}, (t2) => {
  t2 = t2.substring(1);
  const e3 = Le(t2.length);
  for (let n6 = 0; n6 < t2.length; n6++)
    e3[n6] = t2.charCodeAt(n6);
  return e3;
});
var Pe = { utf8: Xe, "utf-8": Xe, hex: Ke.base16, latin1: te, ascii: te, binary: te, ...Ke };
function ct(t2, e3 = "utf8") {
  const n6 = Pe[e3];
  if (!n6)
    throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t2.buffer, t2.byteOffset, t2.byteLength).toString("utf8") : n6.encoder.encode(t2).substring(1);
}
function rt(t2, e3 = "utf8") {
  const n6 = Pe[e3];
  if (!n6)
    throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t2, "utf-8")) : n6.decoder.decode(`${n6.prefix}${t2}`);
}
function lt(t2) {
  return safeJsonParse(ct(rt(t2, Dt), Gt));
}
function bt(t2) {
  return ct(rt(safeJsonStringify(t2), Gt), Dt);
}
function Qe(t2) {
  const e3 = rt(Wt, dt), n6 = Kt + ct(Oe([e3, t2]), dt);
  return [Yt, Jt, n6].join(Vt);
}
function en(t2) {
  return ct(t2, Dt);
}
function nn(t2) {
  return rt(t2, Dt);
}
function rn(t2) {
  return rt([bt(t2.header), bt(t2.payload)].join(ut), xt);
}
function on(t2) {
  return [bt(t2.header), bt(t2.payload), en(t2.signature)].join(ut);
}
function sn(t2) {
  const e3 = t2.split(ut), n6 = lt(e3[0]), r4 = lt(e3[1]), o6 = nn(e3[2]), s4 = rt(e3.slice(0, 2).join(ut), xt);
  return { header: n6, payload: r4, signature: o6, data: s4 };
}
function Po(t2 = he(Ne)) {
  const e3 = Rt.getPublicKey(t2);
  return { secretKey: Oe([t2, e3]), publicKey: e3 };
}
async function Qo(t2, e3, n6, r4, o6 = (0, import_time.fromMiliseconds)(Date.now())) {
  const s4 = { alg: jt, typ: Zt }, a4 = Qe(r4.publicKey), u4 = o6 + n6, i6 = { iss: a4, sub: t2, aud: e3, iat: o6, exp: u4 }, D3 = rn({ header: s4, payload: i6 }), c8 = Rt.sign(D3, r4.secretKey.slice(0, 32));
  return on({ header: s4, payload: i6, signature: c8 });
}

// node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}

// node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size4 = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size4));
  }
  return new Uint8Array(size4);
}

// node_modules/uint8arrays/esm/src/concat.js
function concat3(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}

// node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity3
});

// node_modules/multiformats/esm/vendor/base-x.js
function base2(ALPHABET2, name2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j6 = 0; j6 < BASE_MAP.length; j6++) {
    BASE_MAP[j6] = 255;
  }
  for (var i6 = 0; i6 < ALPHABET2.length; i6++) {
    var x7 = ALPHABET2.charAt(i6);
    var xc2 = x7.charCodeAt(0);
    if (BASE_MAP[xc2] !== 255) {
      throw new TypeError(x7 + " is ambiguous");
    }
    BASE_MAP[xc2] = i6;
  }
  var BASE = ALPHABET2.length;
  var LEADER = ALPHABET2.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode10(source) {
    if (source instanceof Uint8Array)
      ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size4 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size4);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i7 = 0;
      for (var it1 = size4 - 1; (carry !== 0 || i7 < length2) && it1 !== -1; it1--, i7++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i7;
      pbegin++;
    }
    var it22 = size4 - length2;
    while (it22 !== size4 && b58[it22] === 0) {
      it22++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it22 < size4; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size4 = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size4);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i7 = 0;
      for (var it3 = size4 - 1; (carry !== 0 || i7 < length2) && it3 !== -1; it3--, i7++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i7;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it4 = size4 - length2;
    while (it4 !== size4 && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size4 - it4));
    var j7 = zeroes;
    while (it4 !== size4) {
      vch[j7++] = b256[it4++];
    }
    return vch;
  }
  function decode9(string2) {
    var buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode10,
    decodeUnsafe,
    decode: decode9
  };
}
var src = base2;
var _brrp__multiformats_scope_baseX = src;
var base_x_default = _brrp__multiformats_scope_baseX;

// node_modules/multiformats/esm/src/bytes.js
var empty = new Uint8Array(0);
var equals = (aa2, bb) => {
  if (aa2 === bb)
    return true;
  if (aa2.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii2 = 0; ii2 < aa2.byteLength; ii2++) {
    if (aa2[ii2] !== bb[ii2]) {
      return false;
    }
  }
  return true;
};
var coerce = (o6) => {
  if (o6 instanceof Uint8Array && o6.constructor.name === "Uint8Array")
    return o6;
  if (o6 instanceof ArrayBuffer)
    return new Uint8Array(o6);
  if (ArrayBuffer.isView(o6)) {
    return new Uint8Array(o6.buffer, o6.byteOffset, o6.byteLength);
  }
  throw new Error("Unknown type, must be binary type");
};
var fromString3 = (str) => new TextEncoder().encode(str);
var toString2 = (b5) => new TextDecoder().decode(b5);

// node_modules/multiformats/esm/src/bases/base.js
var Encoder2 = class {
  constructor(name2, prefix, baseEncode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};
var Decoder2 = class {
  constructor(name2, prefix, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    if (prefix.codePointAt(0) === void 0) {
      throw new Error("Invalid prefix character");
    }
    this.prefixCodePoint = prefix.codePointAt(0);
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === "string") {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error("Can only multibase decode strings");
    }
  }
  or(decoder) {
    return or2(this, decoder);
  }
};
var ComposedDecoder = class {
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder) {
    return or2(this, decoder);
  }
  decode(input) {
    const prefix = input[0];
    const decoder = this.decoders[prefix];
    if (decoder) {
      return decoder.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
var or2 = (left, right) => new ComposedDecoder({
  ...left.decoders || { [left.prefix]: left },
  ...right.decoders || { [right.prefix]: right }
});
var Codec = class {
  constructor(name2, prefix, baseEncode, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder2(name2, prefix, baseEncode);
    this.decoder = new Decoder2(name2, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
var from6 = ({ name: name2, prefix, encode: encode10, decode: decode9 }) => new Codec(name2, prefix, encode10, decode9);
var baseX = ({ prefix, name: name2, alphabet: alphabet3 }) => {
  const { encode: encode10, decode: decode9 } = base_x_default(alphabet3, name2);
  return from6({
    prefix,
    name: name2,
    encode: encode10,
    decode: (text) => coerce(decode9(text))
  });
};
var decode4 = (string2, alphabet3, bitsPerChar, name2) => {
  const codes = {};
  for (let i6 = 0; i6 < alphabet3.length; ++i6) {
    codes[alphabet3[i6]] = i6;
  }
  let end = string2.length;
  while (string2[end - 1] === "=") {
    --end;
  }
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  let bits = 0;
  let buffer = 0;
  let written = 0;
  for (let i6 = 0; i6 < end; ++i6) {
    const value = codes[string2[i6]];
    if (value === void 0) {
      throw new SyntaxError(`Non-${name2} character`);
    }
    buffer = buffer << bitsPerChar | value;
    bits += bitsPerChar;
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 255 & buffer >> bits;
    }
  }
  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
    throw new SyntaxError("Unexpected end of data");
  }
  return out;
};
var encode6 = (data, alphabet3, bitsPerChar) => {
  const pad2 = alphabet3[alphabet3.length - 1] === "=";
  const mask = (1 << bitsPerChar) - 1;
  let out = "";
  let bits = 0;
  let buffer = 0;
  for (let i6 = 0; i6 < data.length; ++i6) {
    buffer = buffer << 8 | data[i6];
    bits += 8;
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet3[mask & buffer >> bits];
    }
  }
  if (bits) {
    out += alphabet3[mask & buffer << bitsPerChar - bits];
  }
  if (pad2) {
    while (out.length * bitsPerChar & 7) {
      out += "=";
    }
  }
  return out;
};
var rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet3 }) => {
  return from6({
    prefix,
    name: name2,
    encode(input) {
      return encode6(input, alphabet3, bitsPerChar);
    },
    decode(input) {
      return decode4(input, alphabet3, bitsPerChar, name2);
    }
  });
};

// node_modules/multiformats/esm/src/bases/identity.js
var identity3 = from6({
  prefix: "\0",
  name: "identity",
  encode: (buf) => toString2(buf),
  decode: (str) => fromString3(str)
});

// node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base22
});
var base22 = rfc4648({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
});

// node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var base8 = rfc4648({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
});

// node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var base10 = baseX({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
});

// node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base162,
  base16upper: () => base16upper
});
var base162 = rfc4648({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
});
var base16upper = rfc4648({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
});

// node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base322,
  base32hex: () => base32hex2,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var base322 = rfc4648({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
});
var base32upper = rfc4648({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
});
var base32pad = rfc4648({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
});
var base32padupper = rfc4648({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
});
var base32hex2 = rfc4648({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
});
var base32hexupper = rfc4648({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
});
var base32hexpad = rfc4648({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
});
var base32hexpadupper = rfc4648({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
});
var base32z = rfc4648({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
});

// node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var base36 = baseX({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
var base36upper = baseX({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base58.js
var base58_exports = {};
__export(base58_exports, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr2
});
var base58btc = baseX({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
var base58flickr2 = baseX({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base642,
  base64pad: () => base64pad,
  base64url: () => base64url2,
  base64urlpad: () => base64urlpad
});
var base642 = rfc4648({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
});
var base64pad = rfc4648({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
});
var base64url2 = rfc4648({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
});
var base64urlpad = rfc4648({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
});

// node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
var alphabet2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var alphabetBytesToChars = alphabet2.reduce((p5, c8, i6) => {
  p5[i6] = c8;
  return p5;
}, []);
var alphabetCharsToBytes = alphabet2.reduce((p5, c8, i6) => {
  p5[c8.codePointAt(0)] = i6;
  return p5;
}, []);
function encode7(data) {
  return data.reduce((p5, c8) => {
    p5 += alphabetBytesToChars[c8];
    return p5;
  }, "");
}
function decode5(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var base256emoji = from6({
  prefix: "🚀",
  name: "base256emoji",
  encode: encode7,
  decode: decode5
});

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha2566,
  sha512: () => sha5122
});

// node_modules/multiformats/esm/vendor/varint.js
var encode_1 = encode8;
var MSB = 128;
var REST = 127;
var MSBALL = ~REST;
var INT = Math.pow(2, 31);
function encode8(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT) {
    out[offset++] = num & 255 | MSB;
    num /= 128;
  }
  while (num & MSBALL) {
    out[offset++] = num & 255 | MSB;
    num >>>= 7;
  }
  out[offset] = num | 0;
  encode8.bytes = offset - oldOffset + 1;
  return out;
}
var decode6 = read;
var MSB$1 = 128;
var REST$1 = 127;
function read(buf, offset) {
  var res = 0, offset = offset || 0, shift = 0, counter = offset, b5, l8 = buf.length;
  do {
    if (counter >= l8) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b5 = buf[counter++];
    res += shift < 28 ? (b5 & REST$1) << shift : (b5 & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b5 >= MSB$1);
  read.bytes = counter - offset;
  return res;
}
var N1 = Math.pow(2, 7);
var N2 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
  encode: encode_1,
  decode: decode6,
  encodingLength: length
};
var _brrp_varint = varint;
var varint_default = _brrp_varint;

// node_modules/multiformats/esm/src/varint.js
var decode7 = (data, offset = 0) => {
  const code2 = varint_default.decode(data, offset);
  return [
    code2,
    varint_default.decode.bytes
  ];
};
var encodeTo = (int, target, offset = 0) => {
  varint_default.encode(int, target, offset);
  return target;
};
var encodingLength = (int) => {
  return varint_default.encodingLength(int);
};

// node_modules/multiformats/esm/src/hashes/digest.js
var create2 = (code2, digest2) => {
  const size4 = digest2.byteLength;
  const sizeOffset = encodingLength(code2);
  const digestOffset = sizeOffset + encodingLength(size4);
  const bytes = new Uint8Array(digestOffset + size4);
  encodeTo(code2, bytes, 0);
  encodeTo(size4, bytes, sizeOffset);
  bytes.set(digest2, digestOffset);
  return new Digest(code2, size4, digest2, bytes);
};
var decode8 = (multihash) => {
  const bytes = coerce(multihash);
  const [code2, sizeOffset] = decode7(bytes);
  const [size4, digestOffset] = decode7(bytes.subarray(sizeOffset));
  const digest2 = bytes.subarray(sizeOffset + digestOffset);
  if (digest2.byteLength !== size4) {
    throw new Error("Incorrect length");
  }
  return new Digest(code2, size4, digest2, bytes);
};
var equals2 = (a4, b5) => {
  if (a4 === b5) {
    return true;
  } else {
    return a4.code === b5.code && a4.size === b5.size && equals(a4.bytes, b5.bytes);
  }
};
var Digest = class {
  constructor(code2, size4, digest2, bytes) {
    this.code = code2;
    this.size = size4;
    this.digest = digest2;
    this.bytes = bytes;
  }
};

// node_modules/multiformats/esm/src/hashes/hasher.js
var from7 = ({ name: name2, code: code2, encode: encode10 }) => new Hasher(name2, code2, encode10);
var Hasher = class {
  constructor(name2, code2, encode10) {
    this.name = name2;
    this.code = code2;
    this.encode = encode10;
  }
  digest(input) {
    if (input instanceof Uint8Array) {
      const result = this.encode(input);
      return result instanceof Uint8Array ? create2(this.code, result) : result.then((digest2) => create2(this.code, digest2));
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
var sha2566 = from7({
  name: "sha2-256",
  code: 18,
  encode: sha("SHA-256")
});
var sha5122 = from7({
  name: "sha2-512",
  code: 19,
  encode: sha("SHA-512")
});

// node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity4
});
var code = 0;
var name = "identity";
var encode9 = coerce;
var digest = (input) => create2(code, encode9(input));
var identity4 = {
  code,
  name,
  encode: encode9,
  digest
};

// node_modules/multiformats/esm/src/codecs/json.js
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();

// node_modules/multiformats/esm/src/cid.js
var CID = class _CID {
  constructor(version2, code2, multihash, bytes) {
    this.code = code2;
    this.version = version2;
    this.multihash = multihash;
    this.bytes = bytes;
    this.byteOffset = bytes.byteOffset;
    this.byteLength = bytes.byteLength;
    this.asCID = this;
    this._baseCache = /* @__PURE__ */ new Map();
    Object.defineProperties(this, {
      byteOffset: hidden,
      byteLength: hidden,
      code: readonly,
      version: readonly,
      multihash: readonly,
      bytes: readonly,
      _baseCache: hidden,
      asCID: hidden
    });
  }
  toV0() {
    switch (this.version) {
      case 0: {
        return this;
      }
      default: {
        const { code: code2, multihash } = this;
        if (code2 !== DAG_PB_CODE) {
          throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        }
        if (multihash.code !== SHA_256_CODE) {
          throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        }
        return _CID.createV0(multihash);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: code2, digest: digest2 } = this.multihash;
        const multihash = create2(code2, digest2);
        return _CID.createV1(this.code, multihash);
      }
      case 1: {
        return this;
      }
      default: {
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
      }
    }
  }
  equals(other) {
    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
  }
  toString(base3) {
    const { bytes, version: version2, _baseCache } = this;
    switch (version2) {
      case 0:
        return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
      default:
        return toStringV1(bytes, _baseCache, base3 || base322.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(value) {
    deprecate2(/^0\.0/, IS_CID_DEPRECATION);
    return !!(value && (value[cidSymbol] || value.asCID === value));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(value) {
    if (value instanceof _CID) {
      return value;
    } else if (value != null && value.asCID === value) {
      const { version: version2, code: code2, multihash, bytes } = value;
      return new _CID(version2, code2, multihash, bytes || encodeCID(version2, code2, multihash.bytes));
    } else if (value != null && value[cidSymbol] === true) {
      const { version: version2, multihash, code: code2 } = value;
      const digest2 = decode8(multihash);
      return _CID.create(version2, code2, digest2);
    } else {
      return null;
    }
  }
  static create(version2, code2, digest2) {
    if (typeof code2 !== "number") {
      throw new Error("String codecs are no longer supported");
    }
    switch (version2) {
      case 0: {
        if (code2 !== DAG_PB_CODE) {
          throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
        } else {
          return new _CID(version2, code2, digest2, digest2.bytes);
        }
      }
      case 1: {
        const bytes = encodeCID(version2, code2, digest2.bytes);
        return new _CID(version2, code2, digest2, bytes);
      }
      default: {
        throw new Error("Invalid version");
      }
    }
  }
  static createV0(digest2) {
    return _CID.create(0, DAG_PB_CODE, digest2);
  }
  static createV1(code2, digest2) {
    return _CID.create(1, code2, digest2);
  }
  static decode(bytes) {
    const [cid, remainder] = _CID.decodeFirst(bytes);
    if (remainder.length) {
      throw new Error("Incorrect length");
    }
    return cid;
  }
  static decodeFirst(bytes) {
    const specs = _CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error("Incorrect length");
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
    return [
      cid,
      bytes.subarray(specs.size)
    ];
  }
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i6, length2] = decode7(initialBytes.subarray(offset));
      offset += length2;
      return i6;
    };
    let version2 = next();
    let codec = DAG_PB_CODE;
    if (version2 === 18) {
      version2 = 0;
      offset = 0;
    } else if (version2 === 1) {
      codec = next();
    }
    if (version2 !== 0 && version2 !== 1) {
      throw new RangeError(`Invalid CID version ${version2}`);
    }
    const prefixSize = offset;
    const multihashCode = next();
    const digestSize = next();
    const size4 = offset + digestSize;
    const multihashSize = size4 - prefixSize;
    return {
      version: version2,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size: size4
    };
  }
  static parse(source, base3) {
    const [prefix, bytes] = parseCIDtoBytes(source, base3);
    const cid = _CID.decode(bytes);
    cid._baseCache.set(prefix, source);
    return cid;
  }
};
var parseCIDtoBytes = (source, base3) => {
  switch (source[0]) {
    case "Q": {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(`${base58btc.prefix}${source}`)
      ];
    }
    case base58btc.prefix: {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(source)
      ];
    }
    case base322.prefix: {
      const decoder = base3 || base322;
      return [
        base322.prefix,
        decoder.decode(source)
      ];
    }
    default: {
      if (base3 == null) {
        throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      }
      return [
        source[0],
        base3.decode(source)
      ];
    }
  }
};
var toStringV0 = (bytes, cache, base3) => {
  const { prefix } = base3;
  if (prefix !== base58btc.prefix) {
    throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes).slice(1);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var toStringV1 = (bytes, cache, base3) => {
  const { prefix } = base3;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var DAG_PB_CODE = 112;
var SHA_256_CODE = 18;
var encodeCID = (version2, code2, multihash) => {
  const codeOffset = encodingLength(version2);
  const hashOffset = codeOffset + encodingLength(code2);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo(version2, bytes, 0);
  encodeTo(code2, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
};
var cidSymbol = Symbol.for("@ipld/js-cid/CID");
var readonly = {
  writable: false,
  configurable: false,
  enumerable: true
};
var hidden = {
  writable: false,
  enumerable: false,
  configurable: false
};
var version = "0.0.0-dev";
var deprecate2 = (range, message) => {
  if (range.test(version)) {
    console.warn(message);
  } else {
    throw new Error(message);
  }
};
var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

// node_modules/multiformats/esm/src/basics.js
var bases = {
  ...identity_exports,
  ...base2_exports,
  ...base8_exports,
  ...base10_exports,
  ...base16_exports,
  ...base32_exports,
  ...base36_exports,
  ...base58_exports,
  ...base64_exports,
  ...base256emoji_exports
};
var hashes = {
  ...sha2_browser_exports,
  ...identity_exports2
};

// node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode10, decode9) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode10
    },
    decoder: { decode: decode9 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder = new TextDecoder("utf8");
  return "u" + decoder.decode(buf);
}, (str) => {
  const encoder = new TextEncoder();
  return encoder.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i6 = 0; i6 < buf.length; i6++) {
    string2 += String.fromCharCode(buf[i6]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i6 = 0; i6 < str.length; i6++) {
    buf[i6] = str.charCodeAt(i6);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// node_modules/uint8arrays/esm/src/from-string.js
function fromString4(string2, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string2, "utf-8"));
  }
  return base3.decoder.decode(`${base3.prefix}${string2}`);
}

// node_modules/uint8arrays/esm/src/to-string.js
function toString3(array, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base3.encoder.encode(array).substring(1);
}

// node_modules/@walletconnect/relay-api/dist/index.es.js
var C = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };

// node_modules/@walletconnect/utils/dist/index.es.js
var import_blakejs = __toESM(require_blakejs());
var Ae2 = ":";
function Je2(t2) {
  const [e3, n6] = t2.split(Ae2);
  return { namespace: e3, reference: n6 };
}
function Ie2(t2, e3) {
  return t2.includes(":") ? [t2] : e3.chains || [];
}
var Qs = Object.defineProperty;
var ti = Object.defineProperties;
var ei = Object.getOwnPropertyDescriptors;
var ar2 = Object.getOwnPropertySymbols;
var ni = Object.prototype.hasOwnProperty;
var ri = Object.prototype.propertyIsEnumerable;
var en2 = (t2, e3, n6) => e3 in t2 ? Qs(t2, e3, { enumerable: true, configurable: true, writable: true, value: n6 }) : t2[e3] = n6;
var ur2 = (t2, e3) => {
  for (var n6 in e3 || (e3 = {}))
    ni.call(e3, n6) && en2(t2, n6, e3[n6]);
  if (ar2)
    for (var n6 of ar2(e3))
      ri.call(e3, n6) && en2(t2, n6, e3[n6]);
  return t2;
};
var oi = (t2, e3) => ti(t2, ei(e3));
var lr2 = (t2, e3, n6) => en2(t2, typeof e3 != "symbol" ? e3 + "" : e3, n6);
var dr2 = "ReactNative";
var et = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var pr2 = "js";
function rn2() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function At() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === dr2;
}
function ci() {
  return At() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function fi() {
  return At() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function Wt2() {
  return !rn2() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function Vt2() {
  return At() ? et.reactNative : rn2() ? et.node : Wt2() ? et.browser : et.unknown;
}
function ai() {
  var t2;
  try {
    return At() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t2 = global.Application) == null ? void 0 : t2.applicationId : void 0;
  } catch {
    return;
  }
}
function gr2(t2, e3) {
  const n6 = new URLSearchParams(t2);
  return Object.entries(e3).sort(([r4], [o6]) => r4.localeCompare(o6)).forEach(([r4, o6]) => {
    o6 != null && n6.set(r4, String(o6));
  }), n6.toString();
}
function ui(t2) {
  var e3, n6;
  const r4 = br2();
  try {
    return t2 != null && t2.url && r4.url && new URL(t2.url).host !== new URL(r4.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t2.url} differs from the actual page url:${r4.url}. This is probably unintended and can lead to issues.`), t2.url = r4.url), (e3 = t2 == null ? void 0 : t2.icons) != null && e3.length && t2.icons.length > 0 && (t2.icons = t2.icons.filter((o6) => o6 !== "")), oi(ur2(ur2({}, r4), t2), { url: (t2 == null ? void 0 : t2.url) || r4.url, name: (t2 == null ? void 0 : t2.name) || r4.name, description: (t2 == null ? void 0 : t2.description) || r4.description, icons: (n6 = t2 == null ? void 0 : t2.icons) != null && n6.length && t2.icons.length > 0 ? t2.icons : r4.icons });
  } catch (o6) {
    return console.warn("Error populating app metadata", o6), t2 || r4;
  }
}
function br2() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function yr2() {
  if (Vt2() === et.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n6, Version: r4 } = global.Platform;
    return [n6, r4].join("-");
  }
  const t2 = detect();
  if (t2 === null)
    return "unknown";
  const e3 = t2.os ? t2.os.replace(" ", "").toLowerCase() : "unknown";
  return t2.type === "browser" ? [e3, t2.name, t2.version].join("-") : [e3, t2.version].join("-");
}
function mr2() {
  var t2;
  const e3 = Vt2();
  return e3 === et.browser ? [e3, ((t2 = (0, import_window_getters.getLocation)()) == null ? void 0 : t2.host) || "unknown"].join(":") : e3;
}
function wr2(t2, e3, n6) {
  const r4 = yr2(), o6 = mr2();
  return [[t2, e3].join("-"), [pr2, n6].join("-"), r4, o6].join("/");
}
function di({ protocol: t2, version: e3, relayUrl: n6, sdkVersion: r4, auth: o6, projectId: s4, useOnCloseEvent: i6, bundleId: c8, packageName: f11 }) {
  const u4 = n6.split("?"), a4 = wr2(t2, e3, r4), l8 = { auth: o6, ua: a4, projectId: s4, useOnCloseEvent: i6 || void 0, packageName: f11 || void 0, bundleId: c8 || void 0 }, d8 = gr2(u4[1] || "", l8);
  return u4[0] + "?" + d8;
}
function It2(t2, e3) {
  return t2.filter((n6) => e3.includes(n6)).length === t2.length;
}
function bi(t2) {
  return Object.fromEntries(t2.entries());
}
function yi(t2) {
  return new Map(Object.entries(t2));
}
function xi(t2 = import_time2.FIVE_MINUTES, e3) {
  const n6 = (0, import_time2.toMiliseconds)(t2 || import_time2.FIVE_MINUTES);
  let r4, o6, s4, i6;
  return { resolve: (c8) => {
    s4 && r4 && (clearTimeout(s4), r4(c8), i6 = Promise.resolve(c8));
  }, reject: (c8) => {
    s4 && o6 && (clearTimeout(s4), o6(c8));
  }, done: () => new Promise((c8, f11) => {
    if (i6)
      return c8(i6);
    s4 = setTimeout(() => {
      const u4 = new Error(e3);
      i6 = Promise.reject(u4), f11(u4);
    }, n6), r4 = c8, o6 = f11;
  }) };
}
function Ei(t2, e3, n6) {
  return new Promise(async (r4, o6) => {
    const s4 = setTimeout(() => o6(new Error(n6)), e3);
    try {
      const i6 = await t2;
      r4(i6);
    } catch (i6) {
      o6(i6);
    }
    clearTimeout(s4);
  });
}
function on2(t2, e3) {
  if (typeof e3 == "string" && e3.startsWith(`${t2}:`))
    return e3;
  if (t2.toLowerCase() === "topic") {
    if (typeof e3 != "string")
      throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e3}`;
  } else if (t2.toLowerCase() === "id") {
    if (typeof e3 != "number")
      throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e3}`;
  }
  throw new Error(`Unknown expirer target type: ${t2}`);
}
function Bi(t2) {
  return on2("topic", t2);
}
function Ai(t2) {
  return on2("id", t2);
}
function Ii(t2) {
  const [e3, n6] = t2.split(":"), r4 = { id: void 0, topic: void 0 };
  if (e3 === "topic" && typeof n6 == "string")
    r4.topic = n6;
  else if (e3 === "id" && Number.isInteger(Number(n6)))
    r4.id = Number(n6);
  else
    throw new Error(`Invalid target, expected id:number or topic:string, got ${e3}:${n6}`);
  return r4;
}
function Si(t2, e3) {
  return (0, import_time2.fromMiliseconds)((e3 || Date.now()) + (0, import_time2.toMiliseconds)(t2));
}
function Oi(t2) {
  return Date.now() >= (0, import_time2.toMiliseconds)(t2);
}
function Ni(t2, e3) {
  return `${t2}${e3 ? `:${e3}` : ""}`;
}
function ut2(t2 = [], e3 = []) {
  return [.../* @__PURE__ */ new Set([...t2, ...e3])];
}
async function Ui({ id: t2, topic: e3, wcDeepLink: n6 }) {
  var r4;
  try {
    if (!n6)
      return;
    const o6 = typeof n6 == "string" ? JSON.parse(n6) : n6, s4 = o6 == null ? void 0 : o6.href;
    if (typeof s4 != "string")
      return;
    const i6 = Br2(s4, t2, e3), c8 = Vt2();
    if (c8 === et.browser) {
      if (!((r4 = (0, import_window_getters.getDocument)()) != null && r4.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      Ar2(i6);
    } else
      c8 === et.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i6);
  } catch (o6) {
    console.error(o6);
  }
}
function Br2(t2, e3, n6) {
  const r4 = `requestId=${e3}&sessionTopic=${n6}`;
  t2.endsWith("/") && (t2 = t2.slice(0, -1));
  let o6 = `${t2}`;
  if (t2.startsWith("https://t.me")) {
    const s4 = t2.includes("?") ? "&startapp=" : "?startapp=";
    o6 = `${o6}${s4}${Or2(r4, true)}`;
  } else
    o6 = `${o6}/wc?${r4}`;
  return o6;
}
function Ar2(t2) {
  let e3 = "_self";
  Sr2() ? e3 = "_top" : (Ir2() || t2.startsWith("https://") || t2.startsWith("http://")) && (e3 = "_blank"), window.open(t2, e3, "noreferrer noopener");
}
async function _i(t2, e3) {
  let n6 = "";
  try {
    if (Wt2() && (n6 = localStorage.getItem(e3), n6))
      return n6;
    n6 = await t2.getItem(e3);
  } catch (r4) {
    console.error(r4);
  }
  return n6;
}
function Ri(t2, e3) {
  if (!t2.includes(e3))
    return null;
  const n6 = t2.split(/([&,?,=])/), r4 = n6.indexOf(e3);
  return n6[r4 + 2];
}
function $i() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t2) => {
    const e3 = Math.random() * 16 | 0;
    return (t2 === "x" ? e3 : e3 & 3 | 8).toString(16);
  });
}
function Ti() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function Ir2() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function Sr2() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function Or2(t2, e3 = false) {
  const n6 = Buffer.from(t2).toString("base64");
  return e3 ? n6.replace(/[=]/g, "") : n6;
}
function cn(t2) {
  return Buffer.from(t2, "base64").toString("utf-8");
}
function Ci(t2) {
  return new Promise((e3) => setTimeout(e3, t2));
}
var ji = class {
  constructor({ limit: e3 }) {
    lr2(this, "limit"), lr2(this, "set"), this.limit = e3, this.set = /* @__PURE__ */ new Set();
  }
  add(e3) {
    if (!this.set.has(e3)) {
      if (this.set.size >= this.limit) {
        const n6 = this.set.values().next().value;
        n6 && this.set.delete(n6);
      }
      this.set.add(e3);
    }
  }
  has(e3) {
    return this.set.has(e3);
  }
};
var Oe2 = BigInt(2 ** 32 - 1);
var Nr2 = BigInt(32);
function Ur2(t2, e3 = false) {
  return e3 ? { h: Number(t2 & Oe2), l: Number(t2 >> Nr2 & Oe2) } : { h: Number(t2 >> Nr2 & Oe2) | 0, l: Number(t2 & Oe2) | 0 };
}
function _r2(t2, e3 = false) {
  const n6 = t2.length;
  let r4 = new Uint32Array(n6), o6 = new Uint32Array(n6);
  for (let s4 = 0; s4 < n6; s4++) {
    const { h: i6, l: c8 } = Ur2(t2[s4], e3);
    [r4[s4], o6[s4]] = [i6, c8];
  }
  return [r4, o6];
}
var Rr2 = (t2, e3, n6) => t2 >>> n6;
var $r2 = (t2, e3, n6) => t2 << 32 - n6 | e3 >>> n6;
var St2 = (t2, e3, n6) => t2 >>> n6 | e3 << 32 - n6;
var Ot2 = (t2, e3, n6) => t2 << 32 - n6 | e3 >>> n6;
var de2 = (t2, e3, n6) => t2 << 64 - n6 | e3 >>> n6 - 32;
var he2 = (t2, e3, n6) => t2 >>> n6 - 32 | e3 << 64 - n6;
var Li = (t2, e3) => e3;
var ki = (t2, e3) => t2;
var Pi = (t2, e3, n6) => t2 << n6 | e3 >>> 32 - n6;
var Hi = (t2, e3, n6) => e3 << n6 | t2 >>> 32 - n6;
var Di = (t2, e3, n6) => e3 << n6 - 32 | t2 >>> 64 - n6;
var Vi = (t2, e3, n6) => t2 << n6 - 32 | e3 >>> 64 - n6;
function dt2(t2, e3, n6, r4) {
  const o6 = (e3 >>> 0) + (r4 >>> 0);
  return { h: t2 + n6 + (o6 / 2 ** 32 | 0) | 0, l: o6 | 0 };
}
var fn = (t2, e3, n6) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0);
var an = (t2, e3, n6, r4) => e3 + n6 + r4 + (t2 / 2 ** 32 | 0) | 0;
var Mi = (t2, e3, n6, r4) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0) + (r4 >>> 0);
var Ki = (t2, e3, n6, r4, o6) => e3 + n6 + r4 + o6 + (t2 / 2 ** 32 | 0) | 0;
var qi = (t2, e3, n6, r4, o6) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0) + (r4 >>> 0) + (o6 >>> 0);
var Fi = (t2, e3, n6, r4, o6, s4) => e3 + n6 + r4 + o6 + s4 + (t2 / 2 ** 32 | 0) | 0;
var Xt2 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function Ne2(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function mt(t2) {
  if (!Number.isSafeInteger(t2) || t2 < 0)
    throw new Error("positive integer expected, got " + t2);
}
function ht2(t2, ...e3) {
  if (!Ne2(t2))
    throw new Error("Uint8Array expected");
  if (e3.length > 0 && !e3.includes(t2.length))
    throw new Error("Uint8Array expected of length " + e3 + ", got length=" + t2.length);
}
function Ue2(t2) {
  if (typeof t2 != "function" || typeof t2.create != "function")
    throw new Error("Hash should be wrapped by utils.createHasher");
  mt(t2.outputLen), mt(t2.blockLen);
}
function Nt2(t2, e3 = true) {
  if (t2.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e3 && t2.finished)
    throw new Error("Hash#digest() has already been called");
}
function un(t2, e3) {
  ht2(t2);
  const n6 = e3.outputLen;
  if (t2.length < n6)
    throw new Error("digestInto() expects output buffer of length at least " + n6);
}
function pe2(t2) {
  return new Uint32Array(t2.buffer, t2.byteOffset, Math.floor(t2.byteLength / 4));
}
function lt2(...t2) {
  for (let e3 = 0; e3 < t2.length; e3++)
    t2[e3].fill(0);
}
function ln(t2) {
  return new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
}
function bt2(t2, e3) {
  return t2 << 32 - e3 | t2 >>> e3;
}
var Tr2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Cr2(t2) {
  return t2 << 24 & 4278190080 | t2 << 8 & 16711680 | t2 >>> 8 & 65280 | t2 >>> 24 & 255;
}
var wt2 = Tr2 ? (t2) => t2 : (t2) => Cr2(t2);
function Zi(t2) {
  for (let e3 = 0; e3 < t2.length; e3++)
    t2[e3] = Cr2(t2[e3]);
  return t2;
}
var Ut2 = Tr2 ? (t2) => t2 : Zi;
var jr2 = typeof Uint8Array.from([]).toHex == "function" && typeof Uint8Array.fromHex == "function";
var Gi = Array.from({ length: 256 }, (t2, e3) => e3.toString(16).padStart(2, "0"));
function Jt2(t2) {
  if (ht2(t2), jr2)
    return t2.toHex();
  let e3 = "";
  for (let n6 = 0; n6 < t2.length; n6++)
    e3 += Gi[t2[n6]];
  return e3;
}
var vt2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Lr2(t2) {
  if (t2 >= vt2._0 && t2 <= vt2._9)
    return t2 - vt2._0;
  if (t2 >= vt2.A && t2 <= vt2.F)
    return t2 - (vt2.A - 10);
  if (t2 >= vt2.a && t2 <= vt2.f)
    return t2 - (vt2.a - 10);
}
function _e2(t2) {
  if (typeof t2 != "string")
    throw new Error("hex string expected, got " + typeof t2);
  if (jr2)
    return Uint8Array.fromHex(t2);
  const e3 = t2.length, n6 = e3 / 2;
  if (e3 % 2)
    throw new Error("hex string expected, got unpadded hex of length " + e3);
  const r4 = new Uint8Array(n6);
  for (let o6 = 0, s4 = 0; o6 < n6; o6++, s4 += 2) {
    const i6 = Lr2(t2.charCodeAt(s4)), c8 = Lr2(t2.charCodeAt(s4 + 1));
    if (i6 === void 0 || c8 === void 0) {
      const f11 = t2[s4] + t2[s4 + 1];
      throw new Error('hex string expected, got non-hex character "' + f11 + '" at index ' + s4);
    }
    r4[o6] = i6 * 16 + c8;
  }
  return r4;
}
function kr2(t2) {
  if (typeof t2 != "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t2));
}
function pt(t2) {
  return typeof t2 == "string" && (t2 = kr2(t2)), ht2(t2), t2;
}
function _t2(...t2) {
  let e3 = 0;
  for (let r4 = 0; r4 < t2.length; r4++) {
    const o6 = t2[r4];
    ht2(o6), e3 += o6.length;
  }
  const n6 = new Uint8Array(e3);
  for (let r4 = 0, o6 = 0; r4 < t2.length; r4++) {
    const s4 = t2[r4];
    n6.set(s4, o6), o6 += s4.length;
  }
  return n6;
}
var Re2 = class {
};
function ge2(t2) {
  const e3 = (r4) => t2().update(pt(r4)).digest(), n6 = t2();
  return e3.outputLen = n6.outputLen, e3.blockLen = n6.blockLen, e3.create = () => t2(), e3;
}
function zi(t2) {
  const e3 = (r4, o6) => t2(o6).update(pt(r4)).digest(), n6 = t2({});
  return e3.outputLen = n6.outputLen, e3.blockLen = n6.blockLen, e3.create = (r4) => t2(r4), e3;
}
function Mt2(t2 = 32) {
  if (Xt2 && typeof Xt2.getRandomValues == "function")
    return Xt2.getRandomValues(new Uint8Array(t2));
  if (Xt2 && typeof Xt2.randomBytes == "function")
    return Uint8Array.from(Xt2.randomBytes(t2));
  throw new Error("crypto.getRandomValues must be defined");
}
var Yi = BigInt(0);
var be2 = BigInt(1);
var Wi = BigInt(2);
var Xi = BigInt(7);
var Ji = BigInt(256);
var Qi = BigInt(113);
var Pr2 = [];
var Hr2 = [];
var Dr2 = [];
for (let t2 = 0, e3 = be2, n6 = 1, r4 = 0; t2 < 24; t2++) {
  [n6, r4] = [r4, (2 * n6 + 3 * r4) % 5], Pr2.push(2 * (5 * r4 + n6)), Hr2.push((t2 + 1) * (t2 + 2) / 2 % 64);
  let o6 = Yi;
  for (let s4 = 0; s4 < 7; s4++)
    e3 = (e3 << be2 ^ (e3 >> Xi) * Qi) % Ji, e3 & Wi && (o6 ^= be2 << (be2 << BigInt(s4)) - be2);
  Dr2.push(o6);
}
var Vr2 = _r2(Dr2, true);
var tc = Vr2[0];
var ec = Vr2[1];
var Mr2 = (t2, e3, n6) => n6 > 32 ? Di(t2, e3, n6) : Pi(t2, e3, n6);
var Kr2 = (t2, e3, n6) => n6 > 32 ? Vi(t2, e3, n6) : Hi(t2, e3, n6);
function nc(t2, e3 = 24) {
  const n6 = new Uint32Array(10);
  for (let r4 = 24 - e3; r4 < 24; r4++) {
    for (let i6 = 0; i6 < 10; i6++)
      n6[i6] = t2[i6] ^ t2[i6 + 10] ^ t2[i6 + 20] ^ t2[i6 + 30] ^ t2[i6 + 40];
    for (let i6 = 0; i6 < 10; i6 += 2) {
      const c8 = (i6 + 8) % 10, f11 = (i6 + 2) % 10, u4 = n6[f11], a4 = n6[f11 + 1], l8 = Mr2(u4, a4, 1) ^ n6[c8], d8 = Kr2(u4, a4, 1) ^ n6[c8 + 1];
      for (let h6 = 0; h6 < 50; h6 += 10)
        t2[i6 + h6] ^= l8, t2[i6 + h6 + 1] ^= d8;
    }
    let o6 = t2[2], s4 = t2[3];
    for (let i6 = 0; i6 < 24; i6++) {
      const c8 = Hr2[i6], f11 = Mr2(o6, s4, c8), u4 = Kr2(o6, s4, c8), a4 = Pr2[i6];
      o6 = t2[a4], s4 = t2[a4 + 1], t2[a4] = f11, t2[a4 + 1] = u4;
    }
    for (let i6 = 0; i6 < 50; i6 += 10) {
      for (let c8 = 0; c8 < 10; c8++)
        n6[c8] = t2[i6 + c8];
      for (let c8 = 0; c8 < 10; c8++)
        t2[i6 + c8] ^= ~n6[(c8 + 2) % 10] & n6[(c8 + 4) % 10];
    }
    t2[0] ^= tc[r4], t2[1] ^= ec[r4];
  }
  lt2(n6);
}
var Jn2 = class _Jn extends Re2 {
  constructor(e3, n6, r4, o6 = false, s4 = 24) {
    if (super(), this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, this.enableXOF = false, this.blockLen = e3, this.suffix = n6, this.outputLen = r4, this.enableXOF = o6, this.rounds = s4, mt(r4), !(0 < e3 && e3 < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200), this.state32 = pe2(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    Ut2(this.state32), nc(this.state32, this.rounds), Ut2(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e3) {
    Nt2(this), e3 = pt(e3), ht2(e3);
    const { blockLen: n6, state: r4 } = this, o6 = e3.length;
    for (let s4 = 0; s4 < o6; ) {
      const i6 = Math.min(n6 - this.pos, o6 - s4);
      for (let c8 = 0; c8 < i6; c8++)
        r4[this.pos++] ^= e3[s4++];
      this.pos === n6 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state: e3, suffix: n6, pos: r4, blockLen: o6 } = this;
    e3[r4] ^= n6, (n6 & 128) !== 0 && r4 === o6 - 1 && this.keccak(), e3[o6 - 1] ^= 128, this.keccak();
  }
  writeInto(e3) {
    Nt2(this, false), ht2(e3), this.finish();
    const n6 = this.state, { blockLen: r4 } = this;
    for (let o6 = 0, s4 = e3.length; o6 < s4; ) {
      this.posOut >= r4 && this.keccak();
      const i6 = Math.min(r4 - this.posOut, s4 - o6);
      e3.set(n6.subarray(this.posOut, this.posOut + i6), o6), this.posOut += i6, o6 += i6;
    }
    return e3;
  }
  xofInto(e3) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(e3);
  }
  xof(e3) {
    return mt(e3), this.xofInto(new Uint8Array(e3));
  }
  digestInto(e3) {
    if (un(e3, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(e3), this.destroy(), e3;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, lt2(this.state);
  }
  _cloneInto(e3) {
    const { blockLen: n6, suffix: r4, outputLen: o6, rounds: s4, enableXOF: i6 } = this;
    return e3 || (e3 = new _Jn(n6, r4, o6, i6, s4)), e3.state32.set(this.state32), e3.pos = this.pos, e3.posOut = this.posOut, e3.finished = this.finished, e3.rounds = s4, e3.suffix = r4, e3.outputLen = o6, e3.enableXOF = i6, e3.destroyed = this.destroyed, e3;
  }
};
var rc = (t2, e3, n6) => ge2(() => new Jn2(e3, t2, n6));
var oc = rc(1, 136, 256 / 8);
function sc(t2, e3, n6, r4) {
  if (typeof t2.setBigUint64 == "function")
    return t2.setBigUint64(e3, n6, r4);
  const o6 = BigInt(32), s4 = BigInt(4294967295), i6 = Number(n6 >> o6 & s4), c8 = Number(n6 & s4), f11 = r4 ? 4 : 0, u4 = r4 ? 0 : 4;
  t2.setUint32(e3 + f11, i6, r4), t2.setUint32(e3 + u4, c8, r4);
}
function ic(t2, e3, n6) {
  return t2 & e3 ^ ~t2 & n6;
}
function cc(t2, e3, n6) {
  return t2 & e3 ^ t2 & n6 ^ e3 & n6;
}
var qr2 = class extends Re2 {
  constructor(e3, n6, r4, o6) {
    super(), this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.blockLen = e3, this.outputLen = n6, this.padOffset = r4, this.isLE = o6, this.buffer = new Uint8Array(e3), this.view = ln(this.buffer);
  }
  update(e3) {
    Nt2(this), e3 = pt(e3), ht2(e3);
    const { view: n6, buffer: r4, blockLen: o6 } = this, s4 = e3.length;
    for (let i6 = 0; i6 < s4; ) {
      const c8 = Math.min(o6 - this.pos, s4 - i6);
      if (c8 === o6) {
        const f11 = ln(e3);
        for (; o6 <= s4 - i6; i6 += o6)
          this.process(f11, i6);
        continue;
      }
      r4.set(e3.subarray(i6, i6 + c8), this.pos), this.pos += c8, i6 += c8, this.pos === o6 && (this.process(n6, 0), this.pos = 0);
    }
    return this.length += e3.length, this.roundClean(), this;
  }
  digestInto(e3) {
    Nt2(this), un(e3, this), this.finished = true;
    const { buffer: n6, view: r4, blockLen: o6, isLE: s4 } = this;
    let { pos: i6 } = this;
    n6[i6++] = 128, lt2(this.buffer.subarray(i6)), this.padOffset > o6 - i6 && (this.process(r4, 0), i6 = 0);
    for (let l8 = i6; l8 < o6; l8++)
      n6[l8] = 0;
    sc(r4, o6 - 8, BigInt(this.length * 8), s4), this.process(r4, 0);
    const c8 = ln(e3), f11 = this.outputLen;
    if (f11 % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u4 = f11 / 4, a4 = this.get();
    if (u4 > a4.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l8 = 0; l8 < u4; l8++)
      c8.setUint32(4 * l8, a4[l8], s4);
  }
  digest() {
    const { buffer: e3, outputLen: n6 } = this;
    this.digestInto(e3);
    const r4 = e3.slice(0, n6);
    return this.destroy(), r4;
  }
  _cloneInto(e3) {
    e3 || (e3 = new this.constructor()), e3.set(...this.get());
    const { blockLen: n6, buffer: r4, length: o6, finished: s4, destroyed: i6, pos: c8 } = this;
    return e3.destroyed = i6, e3.finished = s4, e3.length = o6, e3.pos = c8, o6 % n6 && e3.buffer.set(r4), e3;
  }
  clone() {
    return this._cloneInto();
  }
};
var Rt2 = Uint32Array.from([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var X = Uint32Array.from([3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428]);
var J2 = Uint32Array.from([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209]);
var fc = Uint32Array.from([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var $t2 = new Uint32Array(64);
var ac = class extends qr2 {
  constructor(e3 = 32) {
    super(64, e3, 8, false), this.A = Rt2[0] | 0, this.B = Rt2[1] | 0, this.C = Rt2[2] | 0, this.D = Rt2[3] | 0, this.E = Rt2[4] | 0, this.F = Rt2[5] | 0, this.G = Rt2[6] | 0, this.H = Rt2[7] | 0;
  }
  get() {
    const { A: e3, B: n6, C: r4, D: o6, E: s4, F: i6, G: c8, H: f11 } = this;
    return [e3, n6, r4, o6, s4, i6, c8, f11];
  }
  set(e3, n6, r4, o6, s4, i6, c8, f11) {
    this.A = e3 | 0, this.B = n6 | 0, this.C = r4 | 0, this.D = o6 | 0, this.E = s4 | 0, this.F = i6 | 0, this.G = c8 | 0, this.H = f11 | 0;
  }
  process(e3, n6) {
    for (let l8 = 0; l8 < 16; l8++, n6 += 4)
      $t2[l8] = e3.getUint32(n6, false);
    for (let l8 = 16; l8 < 64; l8++) {
      const d8 = $t2[l8 - 15], h6 = $t2[l8 - 2], y6 = bt2(d8, 7) ^ bt2(d8, 18) ^ d8 >>> 3, m6 = bt2(h6, 17) ^ bt2(h6, 19) ^ h6 >>> 10;
      $t2[l8] = m6 + $t2[l8 - 7] + y6 + $t2[l8 - 16] | 0;
    }
    let { A: r4, B: o6, C: s4, D: i6, E: c8, F: f11, G: u4, H: a4 } = this;
    for (let l8 = 0; l8 < 64; l8++) {
      const d8 = bt2(c8, 6) ^ bt2(c8, 11) ^ bt2(c8, 25), h6 = a4 + d8 + ic(c8, f11, u4) + fc[l8] + $t2[l8] | 0, m6 = (bt2(r4, 2) ^ bt2(r4, 13) ^ bt2(r4, 22)) + cc(r4, o6, s4) | 0;
      a4 = u4, u4 = f11, f11 = c8, c8 = i6 + h6 | 0, i6 = s4, s4 = o6, o6 = r4, r4 = h6 + m6 | 0;
    }
    r4 = r4 + this.A | 0, o6 = o6 + this.B | 0, s4 = s4 + this.C | 0, i6 = i6 + this.D | 0, c8 = c8 + this.E | 0, f11 = f11 + this.F | 0, u4 = u4 + this.G | 0, a4 = a4 + this.H | 0, this.set(r4, o6, s4, i6, c8, f11, u4, a4);
  }
  roundClean() {
    lt2($t2);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), lt2(this.buffer);
  }
};
var Fr2 = _r2(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t2) => BigInt(t2)));
var uc = Fr2[0];
var lc = Fr2[1];
var Tt2 = new Uint32Array(80);
var Ct = new Uint32Array(80);
var dn = class extends qr2 {
  constructor(e3 = 64) {
    super(128, e3, 16, false), this.Ah = J2[0] | 0, this.Al = J2[1] | 0, this.Bh = J2[2] | 0, this.Bl = J2[3] | 0, this.Ch = J2[4] | 0, this.Cl = J2[5] | 0, this.Dh = J2[6] | 0, this.Dl = J2[7] | 0, this.Eh = J2[8] | 0, this.El = J2[9] | 0, this.Fh = J2[10] | 0, this.Fl = J2[11] | 0, this.Gh = J2[12] | 0, this.Gl = J2[13] | 0, this.Hh = J2[14] | 0, this.Hl = J2[15] | 0;
  }
  get() {
    const { Ah: e3, Al: n6, Bh: r4, Bl: o6, Ch: s4, Cl: i6, Dh: c8, Dl: f11, Eh: u4, El: a4, Fh: l8, Fl: d8, Gh: h6, Gl: y6, Hh: m6, Hl: v11 } = this;
    return [e3, n6, r4, o6, s4, i6, c8, f11, u4, a4, l8, d8, h6, y6, m6, v11];
  }
  set(e3, n6, r4, o6, s4, i6, c8, f11, u4, a4, l8, d8, h6, y6, m6, v11) {
    this.Ah = e3 | 0, this.Al = n6 | 0, this.Bh = r4 | 0, this.Bl = o6 | 0, this.Ch = s4 | 0, this.Cl = i6 | 0, this.Dh = c8 | 0, this.Dl = f11 | 0, this.Eh = u4 | 0, this.El = a4 | 0, this.Fh = l8 | 0, this.Fl = d8 | 0, this.Gh = h6 | 0, this.Gl = y6 | 0, this.Hh = m6 | 0, this.Hl = v11 | 0;
  }
  process(e3, n6) {
    for (let R4 = 0; R4 < 16; R4++, n6 += 4)
      Tt2[R4] = e3.getUint32(n6), Ct[R4] = e3.getUint32(n6 += 4);
    for (let R4 = 16; R4 < 80; R4++) {
      const Z2 = Tt2[R4 - 15] | 0, H3 = Ct[R4 - 15] | 0, j6 = St2(Z2, H3, 1) ^ St2(Z2, H3, 8) ^ Rr2(Z2, H3, 7), L5 = Ot2(Z2, H3, 1) ^ Ot2(Z2, H3, 8) ^ $r2(Z2, H3, 7), k6 = Tt2[R4 - 2] | 0, O7 = Ct[R4 - 2] | 0, T7 = St2(k6, O7, 19) ^ de2(k6, O7, 61) ^ Rr2(k6, O7, 6), C7 = Ot2(k6, O7, 19) ^ he2(k6, O7, 61) ^ $r2(k6, O7, 6), _6 = Mi(L5, C7, Ct[R4 - 7], Ct[R4 - 16]), p5 = Ki(_6, j6, T7, Tt2[R4 - 7], Tt2[R4 - 16]);
      Tt2[R4] = p5 | 0, Ct[R4] = _6 | 0;
    }
    let { Ah: r4, Al: o6, Bh: s4, Bl: i6, Ch: c8, Cl: f11, Dh: u4, Dl: a4, Eh: l8, El: d8, Fh: h6, Fl: y6, Gh: m6, Gl: v11, Hh: U4, Hl: F4 } = this;
    for (let R4 = 0; R4 < 80; R4++) {
      const Z2 = St2(l8, d8, 14) ^ St2(l8, d8, 18) ^ de2(l8, d8, 41), H3 = Ot2(l8, d8, 14) ^ Ot2(l8, d8, 18) ^ he2(l8, d8, 41), j6 = l8 & h6 ^ ~l8 & m6, L5 = d8 & y6 ^ ~d8 & v11, k6 = qi(F4, H3, L5, lc[R4], Ct[R4]), O7 = Fi(k6, U4, Z2, j6, uc[R4], Tt2[R4]), T7 = k6 | 0, C7 = St2(r4, o6, 28) ^ de2(r4, o6, 34) ^ de2(r4, o6, 39), _6 = Ot2(r4, o6, 28) ^ he2(r4, o6, 34) ^ he2(r4, o6, 39), p5 = r4 & s4 ^ r4 & c8 ^ s4 & c8, b5 = o6 & i6 ^ o6 & f11 ^ i6 & f11;
      U4 = m6 | 0, F4 = v11 | 0, m6 = h6 | 0, v11 = y6 | 0, h6 = l8 | 0, y6 = d8 | 0, { h: l8, l: d8 } = dt2(u4 | 0, a4 | 0, O7 | 0, T7 | 0), u4 = c8 | 0, a4 = f11 | 0, c8 = s4 | 0, f11 = i6 | 0, s4 = r4 | 0, i6 = o6 | 0;
      const g7 = fn(T7, _6, b5);
      r4 = an(g7, O7, C7, p5), o6 = g7 | 0;
    }
    ({ h: r4, l: o6 } = dt2(this.Ah | 0, this.Al | 0, r4 | 0, o6 | 0)), { h: s4, l: i6 } = dt2(this.Bh | 0, this.Bl | 0, s4 | 0, i6 | 0), { h: c8, l: f11 } = dt2(this.Ch | 0, this.Cl | 0, c8 | 0, f11 | 0), { h: u4, l: a4 } = dt2(this.Dh | 0, this.Dl | 0, u4 | 0, a4 | 0), { h: l8, l: d8 } = dt2(this.Eh | 0, this.El | 0, l8 | 0, d8 | 0), { h: h6, l: y6 } = dt2(this.Fh | 0, this.Fl | 0, h6 | 0, y6 | 0), { h: m6, l: v11 } = dt2(this.Gh | 0, this.Gl | 0, m6 | 0, v11 | 0), { h: U4, l: F4 } = dt2(this.Hh | 0, this.Hl | 0, U4 | 0, F4 | 0), this.set(r4, o6, s4, i6, c8, f11, u4, a4, l8, d8, h6, y6, m6, v11, U4, F4);
  }
  roundClean() {
    lt2(Tt2, Ct);
  }
  destroy() {
    lt2(this.buffer), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var dc = class extends dn {
  constructor() {
    super(48), this.Ah = X[0] | 0, this.Al = X[1] | 0, this.Bh = X[2] | 0, this.Bl = X[3] | 0, this.Ch = X[4] | 0, this.Cl = X[5] | 0, this.Dh = X[6] | 0, this.Dl = X[7] | 0, this.Eh = X[8] | 0, this.El = X[9] | 0, this.Fh = X[10] | 0, this.Fl = X[11] | 0, this.Gh = X[12] | 0, this.Gl = X[13] | 0, this.Hh = X[14] | 0, this.Hl = X[15] | 0;
  }
};
var Q2 = Uint32Array.from([573645204, 4230739756, 2673172387, 3360449730, 596883563, 1867755857, 2520282905, 1497426621, 2519219938, 2827943907, 3193839141, 1401305490, 721525244, 746961066, 246885852, 2177182882]);
var hc = class extends dn {
  constructor() {
    super(32), this.Ah = Q2[0] | 0, this.Al = Q2[1] | 0, this.Bh = Q2[2] | 0, this.Bl = Q2[3] | 0, this.Ch = Q2[4] | 0, this.Cl = Q2[5] | 0, this.Dh = Q2[6] | 0, this.Dl = Q2[7] | 0, this.Eh = Q2[8] | 0, this.El = Q2[9] | 0, this.Fh = Q2[10] | 0, this.Fl = Q2[11] | 0, this.Gh = Q2[12] | 0, this.Gl = Q2[13] | 0, this.Hh = Q2[14] | 0, this.Hl = Q2[15] | 0;
  }
};
var $e2 = ge2(() => new ac());
var pc = ge2(() => new dn());
var gc = ge2(() => new dc());
var bc = ge2(() => new hc());
var yc = Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]);
var z = Uint32Array.from([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]);
var S = new Uint32Array(32);
function jt2(t2, e3, n6, r4, o6, s4) {
  const i6 = o6[s4], c8 = o6[s4 + 1];
  let f11 = S[2 * t2], u4 = S[2 * t2 + 1], a4 = S[2 * e3], l8 = S[2 * e3 + 1], d8 = S[2 * n6], h6 = S[2 * n6 + 1], y6 = S[2 * r4], m6 = S[2 * r4 + 1], v11 = fn(f11, a4, i6);
  u4 = an(v11, u4, l8, c8), f11 = v11 | 0, { Dh: m6, Dl: y6 } = { Dh: m6 ^ u4, Dl: y6 ^ f11 }, { Dh: m6, Dl: y6 } = { Dh: Li(m6, y6), Dl: ki(m6) }, { h: h6, l: d8 } = dt2(h6, d8, m6, y6), { Bh: l8, Bl: a4 } = { Bh: l8 ^ h6, Bl: a4 ^ d8 }, { Bh: l8, Bl: a4 } = { Bh: St2(l8, a4, 24), Bl: Ot2(l8, a4, 24) }, S[2 * t2] = f11, S[2 * t2 + 1] = u4, S[2 * e3] = a4, S[2 * e3 + 1] = l8, S[2 * n6] = d8, S[2 * n6 + 1] = h6, S[2 * r4] = y6, S[2 * r4 + 1] = m6;
}
function Lt2(t2, e3, n6, r4, o6, s4) {
  const i6 = o6[s4], c8 = o6[s4 + 1];
  let f11 = S[2 * t2], u4 = S[2 * t2 + 1], a4 = S[2 * e3], l8 = S[2 * e3 + 1], d8 = S[2 * n6], h6 = S[2 * n6 + 1], y6 = S[2 * r4], m6 = S[2 * r4 + 1], v11 = fn(f11, a4, i6);
  u4 = an(v11, u4, l8, c8), f11 = v11 | 0, { Dh: m6, Dl: y6 } = { Dh: m6 ^ u4, Dl: y6 ^ f11 }, { Dh: m6, Dl: y6 } = { Dh: St2(m6, y6, 16), Dl: Ot2(m6, y6, 16) }, { h: h6, l: d8 } = dt2(h6, d8, m6, y6), { Bh: l8, Bl: a4 } = { Bh: l8 ^ h6, Bl: a4 ^ d8 }, { Bh: l8, Bl: a4 } = { Bh: de2(l8, a4, 63), Bl: he2(l8, a4, 63) }, S[2 * t2] = f11, S[2 * t2 + 1] = u4, S[2 * e3] = a4, S[2 * e3 + 1] = l8, S[2 * n6] = d8, S[2 * n6 + 1] = h6, S[2 * r4] = y6, S[2 * r4 + 1] = m6;
}
function mc(t2, e3 = {}, n6, r4, o6) {
  if (mt(n6), t2 < 0 || t2 > n6)
    throw new Error("outputLen bigger than keyLen");
  const { key: s4, salt: i6, personalization: c8 } = e3;
  if (s4 !== void 0 && (s4.length < 1 || s4.length > n6))
    throw new Error("key length must be undefined or 1.." + n6);
  if (i6 !== void 0 && i6.length !== r4)
    throw new Error("salt must be undefined or " + r4);
  if (c8 !== void 0 && c8.length !== o6)
    throw new Error("personalization must be undefined or " + o6);
}
var wc = class extends Re2 {
  constructor(e3, n6) {
    super(), this.finished = false, this.destroyed = false, this.length = 0, this.pos = 0, mt(e3), mt(n6), this.blockLen = e3, this.outputLen = n6, this.buffer = new Uint8Array(e3), this.buffer32 = pe2(this.buffer);
  }
  update(e3) {
    Nt2(this), e3 = pt(e3), ht2(e3);
    const { blockLen: n6, buffer: r4, buffer32: o6 } = this, s4 = e3.length, i6 = e3.byteOffset, c8 = e3.buffer;
    for (let f11 = 0; f11 < s4; ) {
      this.pos === n6 && (Ut2(o6), this.compress(o6, 0, false), Ut2(o6), this.pos = 0);
      const u4 = Math.min(n6 - this.pos, s4 - f11), a4 = i6 + f11;
      if (u4 === n6 && !(a4 % 4) && f11 + u4 < s4) {
        const l8 = new Uint32Array(c8, a4, Math.floor((s4 - f11) / 4));
        Ut2(l8);
        for (let d8 = 0; f11 + n6 < s4; d8 += o6.length, f11 += n6)
          this.length += n6, this.compress(l8, d8, false);
        Ut2(l8);
        continue;
      }
      r4.set(e3.subarray(f11, f11 + u4), this.pos), this.pos += u4, this.length += u4, f11 += u4;
    }
    return this;
  }
  digestInto(e3) {
    Nt2(this), un(e3, this);
    const { pos: n6, buffer32: r4 } = this;
    this.finished = true, lt2(this.buffer.subarray(n6)), Ut2(r4), this.compress(r4, 0, true), Ut2(r4);
    const o6 = pe2(e3);
    this.get().forEach((s4, i6) => o6[i6] = wt2(s4));
  }
  digest() {
    const { buffer: e3, outputLen: n6 } = this;
    this.digestInto(e3);
    const r4 = e3.slice(0, n6);
    return this.destroy(), r4;
  }
  _cloneInto(e3) {
    const { buffer: n6, length: r4, finished: o6, destroyed: s4, outputLen: i6, pos: c8 } = this;
    return e3 || (e3 = new this.constructor({ dkLen: i6 })), e3.set(...this.get()), e3.buffer.set(n6), e3.destroyed = s4, e3.finished = o6, e3.length = r4, e3.pos = c8, e3.outputLen = i6, e3;
  }
  clone() {
    return this._cloneInto();
  }
};
var vc = class extends wc {
  constructor(e3 = {}) {
    const n6 = e3.dkLen === void 0 ? 64 : e3.dkLen;
    super(128, n6), this.v0l = z[0] | 0, this.v0h = z[1] | 0, this.v1l = z[2] | 0, this.v1h = z[3] | 0, this.v2l = z[4] | 0, this.v2h = z[5] | 0, this.v3l = z[6] | 0, this.v3h = z[7] | 0, this.v4l = z[8] | 0, this.v4h = z[9] | 0, this.v5l = z[10] | 0, this.v5h = z[11] | 0, this.v6l = z[12] | 0, this.v6h = z[13] | 0, this.v7l = z[14] | 0, this.v7h = z[15] | 0, mc(n6, e3, 64, 16, 16);
    let { key: r4, personalization: o6, salt: s4 } = e3, i6 = 0;
    if (r4 !== void 0 && (r4 = pt(r4), i6 = r4.length), this.v0l ^= this.outputLen | i6 << 8 | 65536 | 1 << 24, s4 !== void 0) {
      s4 = pt(s4);
      const c8 = pe2(s4);
      this.v4l ^= wt2(c8[0]), this.v4h ^= wt2(c8[1]), this.v5l ^= wt2(c8[2]), this.v5h ^= wt2(c8[3]);
    }
    if (o6 !== void 0) {
      o6 = pt(o6);
      const c8 = pe2(o6);
      this.v6l ^= wt2(c8[0]), this.v6h ^= wt2(c8[1]), this.v7l ^= wt2(c8[2]), this.v7h ^= wt2(c8[3]);
    }
    if (r4 !== void 0) {
      const c8 = new Uint8Array(this.blockLen);
      c8.set(r4), this.update(c8);
    }
  }
  get() {
    let { v0l: e3, v0h: n6, v1l: r4, v1h: o6, v2l: s4, v2h: i6, v3l: c8, v3h: f11, v4l: u4, v4h: a4, v5l: l8, v5h: d8, v6l: h6, v6h: y6, v7l: m6, v7h: v11 } = this;
    return [e3, n6, r4, o6, s4, i6, c8, f11, u4, a4, l8, d8, h6, y6, m6, v11];
  }
  set(e3, n6, r4, o6, s4, i6, c8, f11, u4, a4, l8, d8, h6, y6, m6, v11) {
    this.v0l = e3 | 0, this.v0h = n6 | 0, this.v1l = r4 | 0, this.v1h = o6 | 0, this.v2l = s4 | 0, this.v2h = i6 | 0, this.v3l = c8 | 0, this.v3h = f11 | 0, this.v4l = u4 | 0, this.v4h = a4 | 0, this.v5l = l8 | 0, this.v5h = d8 | 0, this.v6l = h6 | 0, this.v6h = y6 | 0, this.v7l = m6 | 0, this.v7h = v11 | 0;
  }
  compress(e3, n6, r4) {
    this.get().forEach((f11, u4) => S[u4] = f11), S.set(z, 16);
    let { h: o6, l: s4 } = Ur2(BigInt(this.length));
    S[24] = z[8] ^ s4, S[25] = z[9] ^ o6, r4 && (S[28] = ~S[28], S[29] = ~S[29]);
    let i6 = 0;
    const c8 = yc;
    for (let f11 = 0; f11 < 12; f11++)
      jt2(0, 4, 8, 12, e3, n6 + 2 * c8[i6++]), Lt2(0, 4, 8, 12, e3, n6 + 2 * c8[i6++]), jt2(1, 5, 9, 13, e3, n6 + 2 * c8[i6++]), Lt2(1, 5, 9, 13, e3, n6 + 2 * c8[i6++]), jt2(2, 6, 10, 14, e3, n6 + 2 * c8[i6++]), Lt2(2, 6, 10, 14, e3, n6 + 2 * c8[i6++]), jt2(3, 7, 11, 15, e3, n6 + 2 * c8[i6++]), Lt2(3, 7, 11, 15, e3, n6 + 2 * c8[i6++]), jt2(0, 5, 10, 15, e3, n6 + 2 * c8[i6++]), Lt2(0, 5, 10, 15, e3, n6 + 2 * c8[i6++]), jt2(1, 6, 11, 12, e3, n6 + 2 * c8[i6++]), Lt2(1, 6, 11, 12, e3, n6 + 2 * c8[i6++]), jt2(2, 7, 8, 13, e3, n6 + 2 * c8[i6++]), Lt2(2, 7, 8, 13, e3, n6 + 2 * c8[i6++]), jt2(3, 4, 9, 14, e3, n6 + 2 * c8[i6++]), Lt2(3, 4, 9, 14, e3, n6 + 2 * c8[i6++]);
    this.v0l ^= S[0] ^ S[16], this.v0h ^= S[1] ^ S[17], this.v1l ^= S[2] ^ S[18], this.v1h ^= S[3] ^ S[19], this.v2l ^= S[4] ^ S[20], this.v2h ^= S[5] ^ S[21], this.v3l ^= S[6] ^ S[22], this.v3h ^= S[7] ^ S[23], this.v4l ^= S[8] ^ S[24], this.v4h ^= S[9] ^ S[25], this.v5l ^= S[10] ^ S[26], this.v5h ^= S[11] ^ S[27], this.v6l ^= S[12] ^ S[28], this.v6h ^= S[13] ^ S[29], this.v7l ^= S[14] ^ S[30], this.v7h ^= S[15] ^ S[31], lt2(S);
  }
  destroy() {
    this.destroyed = true, lt2(this.buffer32), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var xc = zi((t2) => new vc(t2));
var Ec = "https://rpc.walletconnect.org/v1";
function hn(t2) {
  const e3 = `Ethereum Signed Message:
${t2.length}`, n6 = new TextEncoder().encode(e3 + t2);
  return "0x" + Buffer.from(oc(n6)).toString("hex");
}
async function Zr2(t2, e3, n6, r4, o6, s4) {
  switch (n6.t) {
    case "eip191":
      return await Gr2(t2, e3, n6.s);
    case "eip1271":
      return await zr2(t2, e3, n6.s, r4, o6, s4);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n6.t}`);
  }
}
async function Gr2(t2, e3, n6) {
  return (await recoverAddress({ hash: hn(e3), signature: n6 })).toLowerCase() === t2.toLowerCase();
}
async function zr2(t2, e3, n6, r4, o6, s4) {
  const i6 = Je2(r4);
  if (!i6.namespace || !i6.reference)
    throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r4}`);
  try {
    const c8 = "0x1626ba7e", f11 = "0000000000000000000000000000000000000000000000000000000000000040", u4 = n6.substring(2), a4 = (u4.length / 2).toString(16).padStart(64, "0"), l8 = (e3.startsWith("0x") ? e3 : hn(e3)).substring(2), d8 = c8 + l8 + f11 + a4 + u4, h6 = await fetch(`${s4 || Ec}/?chainId=${r4}&projectId=${o6}`, { headers: { "Content-Type": "application/json" }, method: "POST", body: JSON.stringify({ id: Bc(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t2, data: d8 }, "latest"] }) }), { result: y6 } = await h6.json();
    return y6 ? y6.slice(0, c8.length).toLowerCase() === c8.toLowerCase() : false;
  } catch (c8) {
    return console.error("isValidEip1271Signature: ", c8), false;
  }
}
function Bc() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function Ac(t2) {
  const e3 = atob(t2), n6 = new Uint8Array(e3.length);
  for (let i6 = 0; i6 < e3.length; i6++)
    n6[i6] = e3.charCodeAt(i6);
  const r4 = n6[0];
  if (r4 === 0)
    throw new Error("No signatures found");
  const o6 = 1 + r4 * 64;
  if (n6.length < o6)
    throw new Error("Transaction data too short for claimed signature count");
  if (n6.length < 100)
    throw new Error("Transaction too short");
  const s4 = Buffer.from(t2, "base64").slice(1, 65);
  return esm_default2.encode(s4);
}
function Ic(t2) {
  const e3 = new Uint8Array(Buffer.from(t2, "base64")), n6 = Array.from("TransactionData::").map((s4) => s4.charCodeAt(0)), r4 = new Uint8Array(n6.length + e3.length);
  r4.set(n6), r4.set(e3, n6.length);
  const o6 = xc(r4, { dkLen: 32 });
  return esm_default2.encode(o6);
}
function Sc(t2) {
  const e3 = new Uint8Array($e2(Yr2(t2)));
  return esm_default2.encode(e3);
}
function Yr2(t2) {
  if (t2 instanceof Uint8Array)
    return t2;
  if (Array.isArray(t2))
    return new Uint8Array(t2);
  if (typeof t2 == "object" && t2 != null && t2.data)
    return new Uint8Array(Object.values(t2.data));
  if (typeof t2 == "object" && t2)
    return new Uint8Array(Object.values(t2));
  throw new Error("getNearUint8ArrayFromBytes: Unexpected result type from bytes array");
}
function Oc(t2) {
  const e3 = Buffer.from(t2, "base64"), n6 = decode3(e3).txn;
  if (!n6)
    throw new Error("Invalid signed transaction: missing 'txn' field");
  const r4 = encode5(n6), o6 = Buffer.from("TX"), s4 = Buffer.concat([o6, Buffer.from(r4)]), i6 = bc(s4);
  return base32.encode(i6).replace(/=+$/, "");
}
function pn(t2) {
  const e3 = [];
  let n6 = BigInt(t2);
  for (; n6 >= BigInt(128); )
    e3.push(Number(n6 & BigInt(127) | BigInt(128))), n6 >>= BigInt(7);
  return e3.push(Number(n6)), Buffer.from(e3);
}
function Nc(t2) {
  const e3 = Buffer.from(t2.signed.bodyBytes, "base64"), n6 = Buffer.from(t2.signed.authInfoBytes, "base64"), r4 = Buffer.from(t2.signature.signature, "base64"), o6 = [];
  o6.push(Buffer.from([10])), o6.push(pn(e3.length)), o6.push(e3), o6.push(Buffer.from([18])), o6.push(pn(n6.length)), o6.push(n6), o6.push(Buffer.from([26])), o6.push(pn(r4.length)), o6.push(r4);
  const s4 = Buffer.concat(o6), i6 = $e2(s4);
  return Buffer.from(i6).toString("hex").toUpperCase();
}
function Uc(t2) {
  var e3, n6;
  const r4 = [];
  try {
    if (typeof t2 == "string")
      return r4.push(t2), r4;
    if (typeof t2 != "object")
      return r4;
    t2 != null && t2.id && r4.push(t2.id);
    const o6 = (n6 = (e3 = t2 == null ? void 0 : t2.capabilities) == null ? void 0 : e3.caip345) == null ? void 0 : n6.transactionHashes;
    o6 && r4.push(...o6);
  } catch (o6) {
    console.warn("getWalletSendCallsHashes failed: ", o6);
  }
  return r4;
}
var _c = Object.defineProperty;
var Rc = Object.defineProperties;
var $c = Object.getOwnPropertyDescriptors;
var Wr2 = Object.getOwnPropertySymbols;
var Tc = Object.prototype.hasOwnProperty;
var Cc = Object.prototype.propertyIsEnumerable;
var Xr2 = (t2, e3, n6) => e3 in t2 ? _c(t2, e3, { enumerable: true, configurable: true, writable: true, value: n6 }) : t2[e3] = n6;
var gn2 = (t2, e3) => {
  for (var n6 in e3 || (e3 = {}))
    Tc.call(e3, n6) && Xr2(t2, n6, e3[n6]);
  if (Wr2)
    for (var n6 of Wr2(e3))
      Cc.call(e3, n6) && Xr2(t2, n6, e3[n6]);
  return t2;
};
var Jr2 = (t2, e3) => Rc(t2, $c(e3));
var jc = "did:pkh:";
var Te2 = (t2) => t2 == null ? void 0 : t2.split(":");
var Qr2 = (t2) => {
  const e3 = t2 && Te2(t2);
  if (e3)
    return t2.includes(jc) ? e3[3] : e3[1];
};
var to2 = (t2) => {
  const e3 = t2 && Te2(t2);
  if (e3)
    return e3[2] + ":" + e3[3];
};
var bn2 = (t2) => {
  const e3 = t2 && Te2(t2);
  if (e3)
    return e3.pop();
};
async function Lc(t2) {
  const { cacao: e3, projectId: n6 } = t2, { s: r4, p: o6 } = e3, s4 = eo2(o6, o6.iss), i6 = bn2(o6.iss);
  return await Zr2(i6, s4, r4, to2(o6.iss), n6);
}
var eo2 = (t2, e3) => {
  const n6 = `${t2.domain} wants you to sign in with your Ethereum account:`, r4 = bn2(e3);
  if (!t2.aud && !t2.uri)
    throw new Error("Either `aud` or `uri` is required to construct the message");
  let o6 = t2.statement || void 0;
  const s4 = `URI: ${t2.aud || t2.uri}`, i6 = `Version: ${t2.version}`, c8 = `Chain ID: ${Qr2(e3)}`, f11 = `Nonce: ${t2.nonce}`, u4 = `Issued At: ${t2.iat}`, a4 = t2.exp ? `Expiration Time: ${t2.exp}` : void 0, l8 = t2.nbf ? `Not Before: ${t2.nbf}` : void 0, d8 = t2.requestId ? `Request ID: ${t2.requestId}` : void 0, h6 = t2.resources ? `Resources:${t2.resources.map((m6) => `
- ${m6}`).join("")}` : void 0, y6 = je2(t2.resources);
  if (y6) {
    const m6 = kt2(y6);
    o6 = wn(o6, m6);
  }
  return [n6, r4, "", o6, "", s4, i6, c8, f11, u4, a4, l8, d8, h6].filter((m6) => m6 != null).join(`
`);
};
function so2(t2) {
  return Buffer.from(JSON.stringify(t2)).toString("base64");
}
function io2(t2) {
  return JSON.parse(Buffer.from(t2, "base64").toString("utf-8"));
}
function yt2(t2) {
  if (!t2)
    throw new Error("No recap provided, value is undefined");
  if (!t2.att)
    throw new Error("No `att` property found");
  const e3 = Object.keys(t2.att);
  if (!(e3 != null && e3.length))
    throw new Error("No resources found in `att` property");
  e3.forEach((n6) => {
    const r4 = t2.att[n6];
    if (Array.isArray(r4))
      throw new Error(`Resource must be an object: ${n6}`);
    if (typeof r4 != "object")
      throw new Error(`Resource must be an object: ${n6}`);
    if (!Object.keys(r4).length)
      throw new Error(`Resource object is empty: ${n6}`);
    Object.keys(r4).forEach((o6) => {
      const s4 = r4[o6];
      if (!Array.isArray(s4))
        throw new Error(`Ability limits ${o6} must be an array of objects, found: ${s4}`);
      if (!s4.length)
        throw new Error(`Value of ${o6} is empty array, must be an array with objects`);
      s4.forEach((i6) => {
        if (typeof i6 != "object")
          throw new Error(`Ability limits (${o6}) must be an array of objects, found: ${i6}`);
      });
    });
  });
}
function co2(t2, e3, n6, r4 = {}) {
  return n6 == null ? void 0 : n6.sort((o6, s4) => o6.localeCompare(s4)), { att: { [t2]: yn2(e3, n6, r4) } };
}
function yn2(t2, e3, n6 = {}) {
  e3 = e3 == null ? void 0 : e3.sort((o6, s4) => o6.localeCompare(s4));
  const r4 = e3.map((o6) => ({ [`${t2}/${o6}`]: [n6] }));
  return Object.assign({}, ...r4);
}
function Ce2(t2) {
  return yt2(t2), `urn:recap:${so2(t2).replace(/=/g, "")}`;
}
function kt2(t2) {
  const e3 = io2(t2.replace("urn:recap:", ""));
  return yt2(e3), e3;
}
function Vc(t2, e3, n6) {
  const r4 = co2(t2, e3, n6);
  return Ce2(r4);
}
function mn2(t2) {
  return t2 && t2.includes("urn:recap:");
}
function Mc(t2, e3) {
  const n6 = kt2(t2), r4 = kt2(e3), o6 = ao2(n6, r4);
  return Ce2(o6);
}
function ao2(t2, e3) {
  yt2(t2), yt2(e3);
  const n6 = Object.keys(t2.att).concat(Object.keys(e3.att)).sort((o6, s4) => o6.localeCompare(s4)), r4 = { att: {} };
  return n6.forEach((o6) => {
    var s4, i6;
    Object.keys(((s4 = t2.att) == null ? void 0 : s4[o6]) || {}).concat(Object.keys(((i6 = e3.att) == null ? void 0 : i6[o6]) || {})).sort((c8, f11) => c8.localeCompare(f11)).forEach((c8) => {
      var f11, u4;
      r4.att[o6] = Jr2(gn2({}, r4.att[o6]), { [c8]: ((f11 = t2.att[o6]) == null ? void 0 : f11[c8]) || ((u4 = e3.att[o6]) == null ? void 0 : u4[c8]) });
    });
  }), r4;
}
function wn(t2 = "", e3) {
  yt2(e3);
  const n6 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t2.includes(n6))
    return t2;
  const r4 = [];
  let o6 = 0;
  Object.keys(e3.att).forEach((c8) => {
    const f11 = Object.keys(e3.att[c8]).map((l8) => ({ ability: l8.split("/")[0], action: l8.split("/")[1] }));
    f11.sort((l8, d8) => l8.action.localeCompare(d8.action));
    const u4 = {};
    f11.forEach((l8) => {
      u4[l8.ability] || (u4[l8.ability] = []), u4[l8.ability].push(l8.action);
    });
    const a4 = Object.keys(u4).map((l8) => (o6++, `(${o6}) '${l8}': '${u4[l8].join("', '")}' for '${c8}'.`));
    r4.push(a4.join(", ").replace(".,", "."));
  });
  const s4 = r4.join(" "), i6 = `${n6}${s4}`;
  return `${t2 ? t2 + " " : ""}${i6}`;
}
function Kc(t2) {
  var e3;
  const n6 = kt2(t2);
  yt2(n6);
  const r4 = (e3 = n6.att) == null ? void 0 : e3.eip155;
  return r4 ? Object.keys(r4).map((o6) => o6.split("/")[1]) : [];
}
function qc(t2) {
  const e3 = kt2(t2);
  yt2(e3);
  const n6 = [];
  return Object.values(e3.att).forEach((r4) => {
    Object.values(r4).forEach((o6) => {
      var s4;
      (s4 = o6 == null ? void 0 : o6[0]) != null && s4.chains && n6.push(o6[0].chains);
    });
  }), [...new Set(n6.flat())];
}
function je2(t2) {
  if (!t2)
    return;
  const e3 = t2 == null ? void 0 : t2[t2.length - 1];
  return mn2(e3) ? e3 : void 0;
}
function lo2(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function vn2(t2) {
  if (typeof t2 != "boolean")
    throw new Error(`boolean expected, not ${t2}`);
}
function xn2(t2) {
  if (!Number.isSafeInteger(t2) || t2 < 0)
    throw new Error("positive integer expected, got " + t2);
}
function ot(t2, ...e3) {
  if (!lo2(t2))
    throw new Error("Uint8Array expected");
  if (e3.length > 0 && !e3.includes(t2.length))
    throw new Error("Uint8Array expected of length " + e3 + ", got length=" + t2.length);
}
function ho2(t2, e3 = true) {
  if (t2.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e3 && t2.finished)
    throw new Error("Hash#digest() has already been called");
}
function Fc(t2, e3) {
  ot(t2);
  const n6 = e3.outputLen;
  if (t2.length < n6)
    throw new Error("digestInto() expects output buffer of length at least " + n6);
}
function Pt2(t2) {
  return new Uint32Array(t2.buffer, t2.byteOffset, Math.floor(t2.byteLength / 4));
}
function Qt2(...t2) {
  for (let e3 = 0; e3 < t2.length; e3++)
    t2[e3].fill(0);
}
function Zc(t2) {
  return new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
}
var Gc = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function zc(t2) {
  if (typeof t2 != "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t2));
}
function En2(t2) {
  if (typeof t2 == "string")
    t2 = zc(t2);
  else if (lo2(t2))
    t2 = Bn2(t2);
  else
    throw new Error("Uint8Array expected, got " + typeof t2);
  return t2;
}
function Yc(t2, e3) {
  if (e3 == null || typeof e3 != "object")
    throw new Error("options must be defined");
  return Object.assign(t2, e3);
}
function Wc(t2, e3) {
  if (t2.length !== e3.length)
    return false;
  let n6 = 0;
  for (let r4 = 0; r4 < t2.length; r4++)
    n6 |= t2[r4] ^ e3[r4];
  return n6 === 0;
}
var Xc = (t2, e3) => {
  function n6(r4, ...o6) {
    if (ot(r4), !Gc)
      throw new Error("Non little-endian hardware is not yet supported");
    if (t2.nonceLength !== void 0) {
      const a4 = o6[0];
      if (!a4)
        throw new Error("nonce / iv required");
      t2.varSizeNonce ? ot(a4) : ot(a4, t2.nonceLength);
    }
    const s4 = t2.tagLength;
    s4 && o6[1] !== void 0 && ot(o6[1]);
    const i6 = e3(r4, ...o6), c8 = (a4, l8) => {
      if (l8 !== void 0) {
        if (a4 !== 2)
          throw new Error("cipher output not supported");
        ot(l8);
      }
    };
    let f11 = false;
    return { encrypt(a4, l8) {
      if (f11)
        throw new Error("cannot encrypt() twice with same key + nonce");
      return f11 = true, ot(a4), c8(i6.encrypt.length, l8), i6.encrypt(a4, l8);
    }, decrypt(a4, l8) {
      if (ot(a4), s4 && a4.length < s4)
        throw new Error("invalid ciphertext length: smaller than tagLength=" + s4);
      return c8(i6.decrypt.length, l8), i6.decrypt(a4, l8);
    } };
  }
  return Object.assign(n6, t2), n6;
};
function po2(t2, e3, n6 = true) {
  if (e3 === void 0)
    return new Uint8Array(t2);
  if (e3.length !== t2)
    throw new Error("invalid output length, expected " + t2 + ", got: " + e3.length);
  if (n6 && !Qc(e3))
    throw new Error("invalid output, must be aligned");
  return e3;
}
function go2(t2, e3, n6, r4) {
  if (typeof t2.setBigUint64 == "function")
    return t2.setBigUint64(e3, n6, r4);
  const o6 = BigInt(32), s4 = BigInt(4294967295), i6 = Number(n6 >> o6 & s4), c8 = Number(n6 & s4), f11 = r4 ? 4 : 0, u4 = r4 ? 0 : 4;
  t2.setUint32(e3 + f11, i6, r4), t2.setUint32(e3 + u4, c8, r4);
}
function Jc(t2, e3, n6) {
  vn2(n6);
  const r4 = new Uint8Array(16), o6 = Zc(r4);
  return go2(o6, 0, BigInt(e3), n6), go2(o6, 8, BigInt(t2), n6), r4;
}
function Qc(t2) {
  return t2.byteOffset % 4 === 0;
}
function Bn2(t2) {
  return Uint8Array.from(t2);
}
var bo2 = (t2) => Uint8Array.from(t2.split("").map((e3) => e3.charCodeAt(0)));
var tf = bo2("expand 16-byte k");
var ef = bo2("expand 32-byte k");
var nf = Pt2(tf);
var rf = Pt2(ef);
function K4(t2, e3) {
  return t2 << e3 | t2 >>> 32 - e3;
}
function An2(t2) {
  return t2.byteOffset % 4 === 0;
}
var Le2 = 64;
var of = 16;
var yo2 = 2 ** 32 - 1;
var mo2 = new Uint32Array();
function sf(t2, e3, n6, r4, o6, s4, i6, c8) {
  const f11 = o6.length, u4 = new Uint8Array(Le2), a4 = Pt2(u4), l8 = An2(o6) && An2(s4), d8 = l8 ? Pt2(o6) : mo2, h6 = l8 ? Pt2(s4) : mo2;
  for (let y6 = 0; y6 < f11; i6++) {
    if (t2(e3, n6, r4, a4, i6, c8), i6 >= yo2)
      throw new Error("arx: counter overflow");
    const m6 = Math.min(Le2, f11 - y6);
    if (l8 && m6 === Le2) {
      const v11 = y6 / 4;
      if (y6 % 4 !== 0)
        throw new Error("arx: invalid block position");
      for (let U4 = 0, F4; U4 < of; U4++)
        F4 = v11 + U4, h6[F4] = d8[F4] ^ a4[U4];
      y6 += Le2;
      continue;
    }
    for (let v11 = 0, U4; v11 < m6; v11++)
      U4 = y6 + v11, s4[U4] = o6[U4] ^ u4[v11];
    y6 += m6;
  }
}
function cf(t2, e3) {
  const { allowShortKeys: n6, extendNonceFn: r4, counterLength: o6, counterRight: s4, rounds: i6 } = Yc({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e3);
  if (typeof t2 != "function")
    throw new Error("core must be a function");
  return xn2(o6), xn2(i6), vn2(s4), vn2(n6), (c8, f11, u4, a4, l8 = 0) => {
    ot(c8), ot(f11), ot(u4);
    const d8 = u4.length;
    if (a4 === void 0 && (a4 = new Uint8Array(d8)), ot(a4), xn2(l8), l8 < 0 || l8 >= yo2)
      throw new Error("arx: counter overflow");
    if (a4.length < d8)
      throw new Error(`arx: output (${a4.length}) is shorter than data (${d8})`);
    const h6 = [];
    let y6 = c8.length, m6, v11;
    if (y6 === 32)
      h6.push(m6 = Bn2(c8)), v11 = rf;
    else if (y6 === 16 && n6)
      m6 = new Uint8Array(32), m6.set(c8), m6.set(c8, 16), v11 = nf, h6.push(m6);
    else
      throw new Error(`arx: invalid 32-byte key, got length=${y6}`);
    An2(f11) || h6.push(f11 = Bn2(f11));
    const U4 = Pt2(m6);
    if (r4) {
      if (f11.length !== 24)
        throw new Error("arx: extended nonce must be 24 bytes");
      r4(v11, U4, Pt2(f11.subarray(0, 16)), U4), f11 = f11.subarray(16);
    }
    const F4 = 16 - o6;
    if (F4 !== f11.length)
      throw new Error(`arx: nonce must be ${F4} or 16 bytes`);
    if (F4 !== 12) {
      const Z2 = new Uint8Array(12);
      Z2.set(f11, s4 ? 0 : 12 - f11.length), f11 = Z2, h6.push(f11);
    }
    const R4 = Pt2(f11);
    return sf(t2, v11, U4, R4, u4, a4, l8, i6), Qt2(...h6), a4;
  };
}
var W2 = (t2, e3) => t2[e3++] & 255 | (t2[e3++] & 255) << 8;
var ff = class {
  constructor(e3) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e3 = En2(e3), ot(e3, 32);
    const n6 = W2(e3, 0), r4 = W2(e3, 2), o6 = W2(e3, 4), s4 = W2(e3, 6), i6 = W2(e3, 8), c8 = W2(e3, 10), f11 = W2(e3, 12), u4 = W2(e3, 14);
    this.r[0] = n6 & 8191, this.r[1] = (n6 >>> 13 | r4 << 3) & 8191, this.r[2] = (r4 >>> 10 | o6 << 6) & 7939, this.r[3] = (o6 >>> 7 | s4 << 9) & 8191, this.r[4] = (s4 >>> 4 | i6 << 12) & 255, this.r[5] = i6 >>> 1 & 8190, this.r[6] = (i6 >>> 14 | c8 << 2) & 8191, this.r[7] = (c8 >>> 11 | f11 << 5) & 8065, this.r[8] = (f11 >>> 8 | u4 << 8) & 8191, this.r[9] = u4 >>> 5 & 127;
    for (let a4 = 0; a4 < 8; a4++)
      this.pad[a4] = W2(e3, 16 + 2 * a4);
  }
  process(e3, n6, r4 = false) {
    const o6 = r4 ? 0 : 2048, { h: s4, r: i6 } = this, c8 = i6[0], f11 = i6[1], u4 = i6[2], a4 = i6[3], l8 = i6[4], d8 = i6[5], h6 = i6[6], y6 = i6[7], m6 = i6[8], v11 = i6[9], U4 = W2(e3, n6 + 0), F4 = W2(e3, n6 + 2), R4 = W2(e3, n6 + 4), Z2 = W2(e3, n6 + 6), H3 = W2(e3, n6 + 8), j6 = W2(e3, n6 + 10), L5 = W2(e3, n6 + 12), k6 = W2(e3, n6 + 14);
    let O7 = s4[0] + (U4 & 8191), T7 = s4[1] + ((U4 >>> 13 | F4 << 3) & 8191), C7 = s4[2] + ((F4 >>> 10 | R4 << 6) & 8191), _6 = s4[3] + ((R4 >>> 7 | Z2 << 9) & 8191), p5 = s4[4] + ((Z2 >>> 4 | H3 << 12) & 8191), b5 = s4[5] + (H3 >>> 1 & 8191), g7 = s4[6] + ((H3 >>> 14 | j6 << 2) & 8191), x7 = s4[7] + ((j6 >>> 11 | L5 << 5) & 8191), E6 = s4[8] + ((L5 >>> 8 | k6 << 8) & 8191), A5 = s4[9] + (k6 >>> 5 | o6), w6 = 0, B5 = w6 + O7 * c8 + T7 * (5 * v11) + C7 * (5 * m6) + _6 * (5 * y6) + p5 * (5 * h6);
    w6 = B5 >>> 13, B5 &= 8191, B5 += b5 * (5 * d8) + g7 * (5 * l8) + x7 * (5 * a4) + E6 * (5 * u4) + A5 * (5 * f11), w6 += B5 >>> 13, B5 &= 8191;
    let I4 = w6 + O7 * f11 + T7 * c8 + C7 * (5 * v11) + _6 * (5 * m6) + p5 * (5 * y6);
    w6 = I4 >>> 13, I4 &= 8191, I4 += b5 * (5 * h6) + g7 * (5 * d8) + x7 * (5 * l8) + E6 * (5 * a4) + A5 * (5 * u4), w6 += I4 >>> 13, I4 &= 8191;
    let N14 = w6 + O7 * u4 + T7 * f11 + C7 * c8 + _6 * (5 * v11) + p5 * (5 * m6);
    w6 = N14 >>> 13, N14 &= 8191, N14 += b5 * (5 * y6) + g7 * (5 * h6) + x7 * (5 * d8) + E6 * (5 * l8) + A5 * (5 * a4), w6 += N14 >>> 13, N14 &= 8191;
    let D3 = w6 + O7 * a4 + T7 * u4 + C7 * f11 + _6 * c8 + p5 * (5 * v11);
    w6 = D3 >>> 13, D3 &= 8191, D3 += b5 * (5 * m6) + g7 * (5 * y6) + x7 * (5 * h6) + E6 * (5 * d8) + A5 * (5 * l8), w6 += D3 >>> 13, D3 &= 8191;
    let P7 = w6 + O7 * l8 + T7 * a4 + C7 * u4 + _6 * f11 + p5 * c8;
    w6 = P7 >>> 13, P7 &= 8191, P7 += b5 * (5 * v11) + g7 * (5 * m6) + x7 * (5 * y6) + E6 * (5 * h6) + A5 * (5 * d8), w6 += P7 >>> 13, P7 &= 8191;
    let $4 = w6 + O7 * d8 + T7 * l8 + C7 * a4 + _6 * u4 + p5 * f11;
    w6 = $4 >>> 13, $4 &= 8191, $4 += b5 * c8 + g7 * (5 * v11) + x7 * (5 * m6) + E6 * (5 * y6) + A5 * (5 * h6), w6 += $4 >>> 13, $4 &= 8191;
    let V4 = w6 + O7 * h6 + T7 * d8 + C7 * l8 + _6 * a4 + p5 * u4;
    w6 = V4 >>> 13, V4 &= 8191, V4 += b5 * f11 + g7 * c8 + x7 * (5 * v11) + E6 * (5 * m6) + A5 * (5 * y6), w6 += V4 >>> 13, V4 &= 8191;
    let q3 = w6 + O7 * y6 + T7 * h6 + C7 * d8 + _6 * l8 + p5 * a4;
    w6 = q3 >>> 13, q3 &= 8191, q3 += b5 * u4 + g7 * f11 + x7 * c8 + E6 * (5 * v11) + A5 * (5 * m6), w6 += q3 >>> 13, q3 &= 8191;
    let G6 = w6 + O7 * m6 + T7 * y6 + C7 * h6 + _6 * d8 + p5 * l8;
    w6 = G6 >>> 13, G6 &= 8191, G6 += b5 * a4 + g7 * u4 + x7 * f11 + E6 * c8 + A5 * (5 * v11), w6 += G6 >>> 13, G6 &= 8191;
    let M7 = w6 + O7 * v11 + T7 * m6 + C7 * y6 + _6 * h6 + p5 * d8;
    w6 = M7 >>> 13, M7 &= 8191, M7 += b5 * l8 + g7 * a4 + x7 * u4 + E6 * f11 + A5 * c8, w6 += M7 >>> 13, M7 &= 8191, w6 = (w6 << 2) + w6 | 0, w6 = w6 + B5 | 0, B5 = w6 & 8191, w6 = w6 >>> 13, I4 += w6, s4[0] = B5, s4[1] = I4, s4[2] = N14, s4[3] = D3, s4[4] = P7, s4[5] = $4, s4[6] = V4, s4[7] = q3, s4[8] = G6, s4[9] = M7;
  }
  finalize() {
    const { h: e3, pad: n6 } = this, r4 = new Uint16Array(10);
    let o6 = e3[1] >>> 13;
    e3[1] &= 8191;
    for (let c8 = 2; c8 < 10; c8++)
      e3[c8] += o6, o6 = e3[c8] >>> 13, e3[c8] &= 8191;
    e3[0] += o6 * 5, o6 = e3[0] >>> 13, e3[0] &= 8191, e3[1] += o6, o6 = e3[1] >>> 13, e3[1] &= 8191, e3[2] += o6, r4[0] = e3[0] + 5, o6 = r4[0] >>> 13, r4[0] &= 8191;
    for (let c8 = 1; c8 < 10; c8++)
      r4[c8] = e3[c8] + o6, o6 = r4[c8] >>> 13, r4[c8] &= 8191;
    r4[9] -= 8192;
    let s4 = (o6 ^ 1) - 1;
    for (let c8 = 0; c8 < 10; c8++)
      r4[c8] &= s4;
    s4 = ~s4;
    for (let c8 = 0; c8 < 10; c8++)
      e3[c8] = e3[c8] & s4 | r4[c8];
    e3[0] = (e3[0] | e3[1] << 13) & 65535, e3[1] = (e3[1] >>> 3 | e3[2] << 10) & 65535, e3[2] = (e3[2] >>> 6 | e3[3] << 7) & 65535, e3[3] = (e3[3] >>> 9 | e3[4] << 4) & 65535, e3[4] = (e3[4] >>> 12 | e3[5] << 1 | e3[6] << 14) & 65535, e3[5] = (e3[6] >>> 2 | e3[7] << 11) & 65535, e3[6] = (e3[7] >>> 5 | e3[8] << 8) & 65535, e3[7] = (e3[8] >>> 8 | e3[9] << 5) & 65535;
    let i6 = e3[0] + n6[0];
    e3[0] = i6 & 65535;
    for (let c8 = 1; c8 < 8; c8++)
      i6 = (e3[c8] + n6[c8] | 0) + (i6 >>> 16) | 0, e3[c8] = i6 & 65535;
    Qt2(r4);
  }
  update(e3) {
    ho2(this), e3 = En2(e3), ot(e3);
    const { buffer: n6, blockLen: r4 } = this, o6 = e3.length;
    for (let s4 = 0; s4 < o6; ) {
      const i6 = Math.min(r4 - this.pos, o6 - s4);
      if (i6 === r4) {
        for (; r4 <= o6 - s4; s4 += r4)
          this.process(e3, s4);
        continue;
      }
      n6.set(e3.subarray(s4, s4 + i6), this.pos), this.pos += i6, s4 += i6, this.pos === r4 && (this.process(n6, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Qt2(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e3) {
    ho2(this), Fc(e3, this), this.finished = true;
    const { buffer: n6, h: r4 } = this;
    let { pos: o6 } = this;
    if (o6) {
      for (n6[o6++] = 1; o6 < 16; o6++)
        n6[o6] = 0;
      this.process(n6, 0, true);
    }
    this.finalize();
    let s4 = 0;
    for (let i6 = 0; i6 < 8; i6++)
      e3[s4++] = r4[i6] >>> 0, e3[s4++] = r4[i6] >>> 8;
    return e3;
  }
  digest() {
    const { buffer: e3, outputLen: n6 } = this;
    this.digestInto(e3);
    const r4 = e3.slice(0, n6);
    return this.destroy(), r4;
  }
};
function af(t2) {
  const e3 = (r4, o6) => t2(o6).update(En2(r4)).digest(), n6 = t2(new Uint8Array(32));
  return e3.outputLen = n6.outputLen, e3.blockLen = n6.blockLen, e3.create = (r4) => t2(r4), e3;
}
var uf = af((t2) => new ff(t2));
function lf(t2, e3, n6, r4, o6, s4 = 20) {
  let i6 = t2[0], c8 = t2[1], f11 = t2[2], u4 = t2[3], a4 = e3[0], l8 = e3[1], d8 = e3[2], h6 = e3[3], y6 = e3[4], m6 = e3[5], v11 = e3[6], U4 = e3[7], F4 = o6, R4 = n6[0], Z2 = n6[1], H3 = n6[2], j6 = i6, L5 = c8, k6 = f11, O7 = u4, T7 = a4, C7 = l8, _6 = d8, p5 = h6, b5 = y6, g7 = m6, x7 = v11, E6 = U4, A5 = F4, w6 = R4, B5 = Z2, I4 = H3;
  for (let D3 = 0; D3 < s4; D3 += 2)
    j6 = j6 + T7 | 0, A5 = K4(A5 ^ j6, 16), b5 = b5 + A5 | 0, T7 = K4(T7 ^ b5, 12), j6 = j6 + T7 | 0, A5 = K4(A5 ^ j6, 8), b5 = b5 + A5 | 0, T7 = K4(T7 ^ b5, 7), L5 = L5 + C7 | 0, w6 = K4(w6 ^ L5, 16), g7 = g7 + w6 | 0, C7 = K4(C7 ^ g7, 12), L5 = L5 + C7 | 0, w6 = K4(w6 ^ L5, 8), g7 = g7 + w6 | 0, C7 = K4(C7 ^ g7, 7), k6 = k6 + _6 | 0, B5 = K4(B5 ^ k6, 16), x7 = x7 + B5 | 0, _6 = K4(_6 ^ x7, 12), k6 = k6 + _6 | 0, B5 = K4(B5 ^ k6, 8), x7 = x7 + B5 | 0, _6 = K4(_6 ^ x7, 7), O7 = O7 + p5 | 0, I4 = K4(I4 ^ O7, 16), E6 = E6 + I4 | 0, p5 = K4(p5 ^ E6, 12), O7 = O7 + p5 | 0, I4 = K4(I4 ^ O7, 8), E6 = E6 + I4 | 0, p5 = K4(p5 ^ E6, 7), j6 = j6 + C7 | 0, I4 = K4(I4 ^ j6, 16), x7 = x7 + I4 | 0, C7 = K4(C7 ^ x7, 12), j6 = j6 + C7 | 0, I4 = K4(I4 ^ j6, 8), x7 = x7 + I4 | 0, C7 = K4(C7 ^ x7, 7), L5 = L5 + _6 | 0, A5 = K4(A5 ^ L5, 16), E6 = E6 + A5 | 0, _6 = K4(_6 ^ E6, 12), L5 = L5 + _6 | 0, A5 = K4(A5 ^ L5, 8), E6 = E6 + A5 | 0, _6 = K4(_6 ^ E6, 7), k6 = k6 + p5 | 0, w6 = K4(w6 ^ k6, 16), b5 = b5 + w6 | 0, p5 = K4(p5 ^ b5, 12), k6 = k6 + p5 | 0, w6 = K4(w6 ^ k6, 8), b5 = b5 + w6 | 0, p5 = K4(p5 ^ b5, 7), O7 = O7 + T7 | 0, B5 = K4(B5 ^ O7, 16), g7 = g7 + B5 | 0, T7 = K4(T7 ^ g7, 12), O7 = O7 + T7 | 0, B5 = K4(B5 ^ O7, 8), g7 = g7 + B5 | 0, T7 = K4(T7 ^ g7, 7);
  let N14 = 0;
  r4[N14++] = i6 + j6 | 0, r4[N14++] = c8 + L5 | 0, r4[N14++] = f11 + k6 | 0, r4[N14++] = u4 + O7 | 0, r4[N14++] = a4 + T7 | 0, r4[N14++] = l8 + C7 | 0, r4[N14++] = d8 + _6 | 0, r4[N14++] = h6 + p5 | 0, r4[N14++] = y6 + b5 | 0, r4[N14++] = m6 + g7 | 0, r4[N14++] = v11 + x7 | 0, r4[N14++] = U4 + E6 | 0, r4[N14++] = F4 + A5 | 0, r4[N14++] = R4 + w6 | 0, r4[N14++] = Z2 + B5 | 0, r4[N14++] = H3 + I4 | 0;
}
var df = cf(lf, { counterRight: false, counterLength: 4, allowShortKeys: false });
var hf = new Uint8Array(16);
var wo2 = (t2, e3) => {
  t2.update(e3);
  const n6 = e3.length % 16;
  n6 && t2.update(hf.subarray(n6));
};
var pf = new Uint8Array(32);
function vo2(t2, e3, n6, r4, o6) {
  const s4 = t2(e3, n6, pf), i6 = uf.create(s4);
  o6 && wo2(i6, o6), wo2(i6, r4);
  const c8 = Jc(r4.length, o6 ? o6.length : 0, true);
  i6.update(c8);
  const f11 = i6.digest();
  return Qt2(s4, c8), f11;
}
var gf = (t2) => (e3, n6, r4) => ({ encrypt(s4, i6) {
  const c8 = s4.length;
  i6 = po2(c8 + 16, i6, false), i6.set(s4);
  const f11 = i6.subarray(0, -16);
  t2(e3, n6, f11, f11, 1);
  const u4 = vo2(t2, e3, n6, f11, r4);
  return i6.set(u4, c8), Qt2(u4), i6;
}, decrypt(s4, i6) {
  i6 = po2(s4.length - 16, i6, false);
  const c8 = s4.subarray(0, -16), f11 = s4.subarray(-16), u4 = vo2(t2, e3, n6, c8, r4);
  if (!Wc(f11, u4))
    throw new Error("invalid tag");
  return i6.set(s4.subarray(0, -16)), t2(e3, n6, i6, i6, 1), Qt2(u4), i6;
} });
var xo2 = Xc({ blockSize: 64, nonceLength: 12, tagLength: 16 }, gf(df));
var Eo2 = class extends Re2 {
  constructor(e3, n6) {
    super(), this.finished = false, this.destroyed = false, Ue2(e3);
    const r4 = pt(n6);
    if (this.iHash = e3.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o6 = this.blockLen, s4 = new Uint8Array(o6);
    s4.set(r4.length > o6 ? e3.create().update(r4).digest() : r4);
    for (let i6 = 0; i6 < s4.length; i6++)
      s4[i6] ^= 54;
    this.iHash.update(s4), this.oHash = e3.create();
    for (let i6 = 0; i6 < s4.length; i6++)
      s4[i6] ^= 106;
    this.oHash.update(s4), lt2(s4);
  }
  update(e3) {
    return Nt2(this), this.iHash.update(e3), this;
  }
  digestInto(e3) {
    Nt2(this), ht2(e3, this.outputLen), this.finished = true, this.iHash.digestInto(e3), this.oHash.update(e3), this.oHash.digestInto(e3), this.destroy();
  }
  digest() {
    const e3 = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e3), e3;
  }
  _cloneInto(e3) {
    e3 || (e3 = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n6, iHash: r4, finished: o6, destroyed: s4, blockLen: i6, outputLen: c8 } = this;
    return e3 = e3, e3.finished = o6, e3.destroyed = s4, e3.blockLen = i6, e3.outputLen = c8, e3.oHash = n6._cloneInto(e3.oHash), e3.iHash = r4._cloneInto(e3.iHash), e3;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var ke2 = (t2, e3, n6) => new Eo2(t2, e3).update(n6).digest();
ke2.create = (t2, e3) => new Eo2(t2, e3);
function bf(t2, e3, n6) {
  return Ue2(t2), n6 === void 0 && (n6 = new Uint8Array(t2.outputLen)), ke2(t2, pt(n6), pt(e3));
}
var In2 = Uint8Array.from([0]);
var Bo2 = Uint8Array.of();
function yf(t2, e3, n6, r4 = 32) {
  Ue2(t2), mt(r4);
  const o6 = t2.outputLen;
  if (r4 > 255 * o6)
    throw new Error("Length should be <= 255*HashLen");
  const s4 = Math.ceil(r4 / o6);
  n6 === void 0 && (n6 = Bo2);
  const i6 = new Uint8Array(s4 * o6), c8 = ke2.create(t2, e3), f11 = c8._cloneInto(), u4 = new Uint8Array(c8.outputLen);
  for (let a4 = 0; a4 < s4; a4++)
    In2[0] = a4 + 1, f11.update(a4 === 0 ? Bo2 : u4).update(n6).update(In2).digestInto(u4), i6.set(u4, o6 * a4), c8._cloneInto(f11);
  return c8.destroy(), f11.destroy(), lt2(u4, In2), i6.slice(0, r4);
}
var mf = (t2, e3, n6, r4, o6) => yf(t2, bf(t2, e3, n6), r4, o6);
var Pe2 = $e2;
var Sn2 = BigInt(0);
var On2 = BigInt(1);
function He2(t2, e3 = "") {
  if (typeof t2 != "boolean") {
    const n6 = e3 && `"${e3}"`;
    throw new Error(n6 + "expected boolean, got type=" + typeof t2);
  }
  return t2;
}
function Kt2(t2, e3, n6 = "") {
  const r4 = Ne2(t2), o6 = t2 == null ? void 0 : t2.length, s4 = e3 !== void 0;
  if (!r4 || s4 && o6 !== e3) {
    const i6 = n6 && `"${n6}" `, c8 = s4 ? ` of length ${e3}` : "", f11 = r4 ? `length=${o6}` : `type=${typeof t2}`;
    throw new Error(i6 + "expected Uint8Array" + c8 + ", got " + f11);
  }
  return t2;
}
function De2(t2) {
  const e3 = t2.toString(16);
  return e3.length & 1 ? "0" + e3 : e3;
}
function Ao2(t2) {
  if (typeof t2 != "string")
    throw new Error("hex string expected, got " + typeof t2);
  return t2 === "" ? Sn2 : BigInt("0x" + t2);
}
function Ve2(t2) {
  return Ao2(Jt2(t2));
}
function Me2(t2) {
  return ht2(t2), Ao2(Jt2(Uint8Array.from(t2).reverse()));
}
function Nn2(t2, e3) {
  return _e2(t2.toString(16).padStart(e3 * 2, "0"));
}
function Un2(t2, e3) {
  return Nn2(t2, e3).reverse();
}
function tt(t2, e3, n6) {
  let r4;
  if (typeof e3 == "string")
    try {
      r4 = _e2(e3);
    } catch (s4) {
      throw new Error(t2 + " must be hex string or Uint8Array, cause: " + s4);
    }
  else if (Ne2(e3))
    r4 = Uint8Array.from(e3);
  else
    throw new Error(t2 + " must be hex string or Uint8Array");
  const o6 = r4.length;
  if (typeof n6 == "number" && o6 !== n6)
    throw new Error(t2 + " of length " + n6 + " expected, got " + o6);
  return r4;
}
var _n2 = (t2) => typeof t2 == "bigint" && Sn2 <= t2;
function wf(t2, e3, n6) {
  return _n2(t2) && _n2(e3) && _n2(n6) && e3 <= t2 && t2 < n6;
}
function Rn2(t2, e3, n6, r4) {
  if (!wf(e3, n6, r4))
    throw new Error("expected valid " + t2 + ": " + n6 + " <= n < " + r4 + ", got " + e3);
}
function Io2(t2) {
  let e3;
  for (e3 = 0; t2 > Sn2; t2 >>= On2, e3 += 1)
    ;
  return e3;
}
var ye2 = (t2) => (On2 << BigInt(t2)) - On2;
function vf(t2, e3, n6) {
  if (typeof t2 != "number" || t2 < 2)
    throw new Error("hashLen must be a number");
  if (typeof e3 != "number" || e3 < 2)
    throw new Error("qByteLen must be a number");
  if (typeof n6 != "function")
    throw new Error("hmacFn must be a function");
  const r4 = (h6) => new Uint8Array(h6), o6 = (h6) => Uint8Array.of(h6);
  let s4 = r4(t2), i6 = r4(t2), c8 = 0;
  const f11 = () => {
    s4.fill(1), i6.fill(0), c8 = 0;
  }, u4 = (...h6) => n6(i6, s4, ...h6), a4 = (h6 = r4(0)) => {
    i6 = u4(o6(0), h6), s4 = u4(), h6.length !== 0 && (i6 = u4(o6(1), h6), s4 = u4());
  }, l8 = () => {
    if (c8++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let h6 = 0;
    const y6 = [];
    for (; h6 < e3; ) {
      s4 = u4();
      const m6 = s4.slice();
      y6.push(m6), h6 += s4.length;
    }
    return _t2(...y6);
  };
  return (h6, y6) => {
    f11(), a4(h6);
    let m6;
    for (; !(m6 = y6(l8())); )
      a4();
    return f11(), m6;
  };
}
function Ke2(t2, e3, n6 = {}) {
  if (!t2 || typeof t2 != "object")
    throw new Error("expected valid options object");
  function r4(o6, s4, i6) {
    const c8 = t2[o6];
    if (i6 && c8 === void 0)
      return;
    const f11 = typeof c8;
    if (f11 !== s4 || c8 === null)
      throw new Error(`param "${o6}" is invalid: expected ${s4}, got ${f11}`);
  }
  Object.entries(e3).forEach(([o6, s4]) => r4(o6, s4, false)), Object.entries(n6).forEach(([o6, s4]) => r4(o6, s4, true));
}
function So2(t2) {
  const e3 = /* @__PURE__ */ new WeakMap();
  return (n6, ...r4) => {
    const o6 = e3.get(n6);
    if (o6 !== void 0)
      return o6;
    const s4 = t2(n6, ...r4);
    return e3.set(n6, s4), s4;
  };
}
var st = BigInt(0);
var nt2 = BigInt(1);
var qt2 = BigInt(2);
var Oo2 = BigInt(3);
var No2 = BigInt(4);
var Uo2 = BigInt(5);
var xf = BigInt(7);
var _o2 = BigInt(8);
var Ef = BigInt(9);
var Ro2 = BigInt(16);
function ct2(t2, e3) {
  const n6 = t2 % e3;
  return n6 >= st ? n6 : e3 + n6;
}
function gt2(t2, e3, n6) {
  let r4 = t2;
  for (; e3-- > st; )
    r4 *= r4, r4 %= n6;
  return r4;
}
function $o2(t2, e3) {
  if (t2 === st)
    throw new Error("invert: expected non-zero number");
  if (e3 <= st)
    throw new Error("invert: expected positive modulus, got " + e3);
  let n6 = ct2(t2, e3), r4 = e3, o6 = st, s4 = nt2;
  for (; n6 !== st; ) {
    const c8 = r4 / n6, f11 = r4 % n6, u4 = o6 - s4 * c8;
    r4 = n6, n6 = f11, o6 = s4, s4 = u4;
  }
  if (r4 !== nt2)
    throw new Error("invert: does not exist");
  return ct2(o6, e3);
}
function $n2(t2, e3, n6) {
  if (!t2.eql(t2.sqr(e3), n6))
    throw new Error("Cannot find square root");
}
function To2(t2, e3) {
  const n6 = (t2.ORDER + nt2) / No2, r4 = t2.pow(e3, n6);
  return $n2(t2, r4, e3), r4;
}
function Bf(t2, e3) {
  const n6 = (t2.ORDER - Uo2) / _o2, r4 = t2.mul(e3, qt2), o6 = t2.pow(r4, n6), s4 = t2.mul(e3, o6), i6 = t2.mul(t2.mul(s4, qt2), o6), c8 = t2.mul(s4, t2.sub(i6, t2.ONE));
  return $n2(t2, c8, e3), c8;
}
function Af(t2) {
  const e3 = Ht2(t2), n6 = Co2(t2), r4 = n6(e3, e3.neg(e3.ONE)), o6 = n6(e3, r4), s4 = n6(e3, e3.neg(r4)), i6 = (t2 + xf) / Ro2;
  return (c8, f11) => {
    let u4 = c8.pow(f11, i6), a4 = c8.mul(u4, r4);
    const l8 = c8.mul(u4, o6), d8 = c8.mul(u4, s4), h6 = c8.eql(c8.sqr(a4), f11), y6 = c8.eql(c8.sqr(l8), f11);
    u4 = c8.cmov(u4, a4, h6), a4 = c8.cmov(d8, l8, y6);
    const m6 = c8.eql(c8.sqr(a4), f11), v11 = c8.cmov(u4, a4, m6);
    return $n2(c8, v11, f11), v11;
  };
}
function Co2(t2) {
  if (t2 < Oo2)
    throw new Error("sqrt is not defined for small field");
  let e3 = t2 - nt2, n6 = 0;
  for (; e3 % qt2 === st; )
    e3 /= qt2, n6++;
  let r4 = qt2;
  const o6 = Ht2(t2);
  for (; Lo2(o6, r4) === 1; )
    if (r4++ > 1e3)
      throw new Error("Cannot find square root: probably non-prime P");
  if (n6 === 1)
    return To2;
  let s4 = o6.pow(r4, e3);
  const i6 = (e3 + nt2) / qt2;
  return function(f11, u4) {
    if (f11.is0(u4))
      return u4;
    if (Lo2(f11, u4) !== 1)
      throw new Error("Cannot find square root");
    let a4 = n6, l8 = f11.mul(f11.ONE, s4), d8 = f11.pow(u4, e3), h6 = f11.pow(u4, i6);
    for (; !f11.eql(d8, f11.ONE); ) {
      if (f11.is0(d8))
        return f11.ZERO;
      let y6 = 1, m6 = f11.sqr(d8);
      for (; !f11.eql(m6, f11.ONE); )
        if (y6++, m6 = f11.sqr(m6), y6 === a4)
          throw new Error("Cannot find square root");
      const v11 = nt2 << BigInt(a4 - y6 - 1), U4 = f11.pow(l8, v11);
      a4 = y6, l8 = f11.sqr(U4), d8 = f11.mul(d8, l8), h6 = f11.mul(h6, U4);
    }
    return h6;
  };
}
function If(t2) {
  return t2 % No2 === Oo2 ? To2 : t2 % _o2 === Uo2 ? Bf : t2 % Ro2 === Ef ? Af(t2) : Co2(t2);
}
var Sf = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function Of(t2) {
  const e3 = { ORDER: "bigint", MASK: "bigint", BYTES: "number", BITS: "number" }, n6 = Sf.reduce((r4, o6) => (r4[o6] = "function", r4), e3);
  return Ke2(t2, n6), t2;
}
function Nf(t2, e3, n6) {
  if (n6 < st)
    throw new Error("invalid exponent, negatives unsupported");
  if (n6 === st)
    return t2.ONE;
  if (n6 === nt2)
    return e3;
  let r4 = t2.ONE, o6 = e3;
  for (; n6 > st; )
    n6 & nt2 && (r4 = t2.mul(r4, o6)), o6 = t2.sqr(o6), n6 >>= nt2;
  return r4;
}
function jo2(t2, e3, n6 = false) {
  const r4 = new Array(e3.length).fill(n6 ? t2.ZERO : void 0), o6 = e3.reduce((i6, c8, f11) => t2.is0(c8) ? i6 : (r4[f11] = i6, t2.mul(i6, c8)), t2.ONE), s4 = t2.inv(o6);
  return e3.reduceRight((i6, c8, f11) => t2.is0(c8) ? i6 : (r4[f11] = t2.mul(i6, r4[f11]), t2.mul(i6, c8)), s4), r4;
}
function Lo2(t2, e3) {
  const n6 = (t2.ORDER - nt2) / qt2, r4 = t2.pow(e3, n6), o6 = t2.eql(r4, t2.ONE), s4 = t2.eql(r4, t2.ZERO), i6 = t2.eql(r4, t2.neg(t2.ONE));
  if (!o6 && !s4 && !i6)
    throw new Error("invalid Legendre symbol result");
  return o6 ? 1 : s4 ? 0 : -1;
}
function ko2(t2, e3) {
  e3 !== void 0 && mt(e3);
  const n6 = e3 !== void 0 ? e3 : t2.toString(2).length, r4 = Math.ceil(n6 / 8);
  return { nBitLength: n6, nByteLength: r4 };
}
function Ht2(t2, e3, n6 = false, r4 = {}) {
  if (t2 <= st)
    throw new Error("invalid field: expected ORDER > 0, got " + t2);
  let o6, s4, i6 = false, c8;
  if (typeof e3 == "object" && e3 != null) {
    if (r4.sqrt || n6)
      throw new Error("cannot specify opts in two arguments");
    const d8 = e3;
    d8.BITS && (o6 = d8.BITS), d8.sqrt && (s4 = d8.sqrt), typeof d8.isLE == "boolean" && (n6 = d8.isLE), typeof d8.modFromBytes == "boolean" && (i6 = d8.modFromBytes), c8 = d8.allowedLengths;
  } else
    typeof e3 == "number" && (o6 = e3), r4.sqrt && (s4 = r4.sqrt);
  const { nBitLength: f11, nByteLength: u4 } = ko2(t2, o6);
  if (u4 > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a4;
  const l8 = Object.freeze({ ORDER: t2, isLE: n6, BITS: f11, BYTES: u4, MASK: ye2(f11), ZERO: st, ONE: nt2, allowedLengths: c8, create: (d8) => ct2(d8, t2), isValid: (d8) => {
    if (typeof d8 != "bigint")
      throw new Error("invalid field element: expected bigint, got " + typeof d8);
    return st <= d8 && d8 < t2;
  }, is0: (d8) => d8 === st, isValidNot0: (d8) => !l8.is0(d8) && l8.isValid(d8), isOdd: (d8) => (d8 & nt2) === nt2, neg: (d8) => ct2(-d8, t2), eql: (d8, h6) => d8 === h6, sqr: (d8) => ct2(d8 * d8, t2), add: (d8, h6) => ct2(d8 + h6, t2), sub: (d8, h6) => ct2(d8 - h6, t2), mul: (d8, h6) => ct2(d8 * h6, t2), pow: (d8, h6) => Nf(l8, d8, h6), div: (d8, h6) => ct2(d8 * $o2(h6, t2), t2), sqrN: (d8) => d8 * d8, addN: (d8, h6) => d8 + h6, subN: (d8, h6) => d8 - h6, mulN: (d8, h6) => d8 * h6, inv: (d8) => $o2(d8, t2), sqrt: s4 || ((d8) => (a4 || (a4 = If(t2)), a4(l8, d8))), toBytes: (d8) => n6 ? Un2(d8, u4) : Nn2(d8, u4), fromBytes: (d8, h6 = true) => {
    if (c8) {
      if (!c8.includes(d8.length) || d8.length > u4)
        throw new Error("Field.fromBytes: expected " + c8 + " bytes, got " + d8.length);
      const m6 = new Uint8Array(u4);
      m6.set(d8, n6 ? 0 : m6.length - d8.length), d8 = m6;
    }
    if (d8.length !== u4)
      throw new Error("Field.fromBytes: expected " + u4 + " bytes, got " + d8.length);
    let y6 = n6 ? Me2(d8) : Ve2(d8);
    if (i6 && (y6 = ct2(y6, t2)), !h6 && !l8.isValid(y6))
      throw new Error("invalid field element: outside of range 0..ORDER");
    return y6;
  }, invertBatch: (d8) => jo2(l8, d8), cmov: (d8, h6, y6) => y6 ? h6 : d8 });
  return Object.freeze(l8);
}
function Po2(t2) {
  if (typeof t2 != "bigint")
    throw new Error("field order must be bigint");
  const e3 = t2.toString(2).length;
  return Math.ceil(e3 / 8);
}
function Ho2(t2) {
  const e3 = Po2(t2);
  return e3 + Math.ceil(e3 / 2);
}
function Uf(t2, e3, n6 = false) {
  const r4 = t2.length, o6 = Po2(e3), s4 = Ho2(e3);
  if (r4 < 16 || r4 < s4 || r4 > 1024)
    throw new Error("expected " + s4 + "-1024 bytes of input, got " + r4);
  const i6 = n6 ? Me2(t2) : Ve2(t2), c8 = ct2(i6, e3 - nt2) + nt2;
  return n6 ? Un2(c8, o6) : Nn2(c8, o6);
}
var te2 = BigInt(0);
var Ft2 = BigInt(1);
function qe2(t2, e3) {
  const n6 = e3.negate();
  return t2 ? n6 : e3;
}
function Tn2(t2, e3) {
  const n6 = jo2(t2.Fp, e3.map((r4) => r4.Z));
  return e3.map((r4, o6) => t2.fromAffine(r4.toAffine(n6[o6])));
}
function Do2(t2, e3) {
  if (!Number.isSafeInteger(t2) || t2 <= 0 || t2 > e3)
    throw new Error("invalid window size, expected [1.." + e3 + "], got W=" + t2);
}
function Cn2(t2, e3) {
  Do2(t2, e3);
  const n6 = Math.ceil(e3 / t2) + 1, r4 = 2 ** (t2 - 1), o6 = 2 ** t2, s4 = ye2(t2), i6 = BigInt(t2);
  return { windows: n6, windowSize: r4, mask: s4, maxNumber: o6, shiftBy: i6 };
}
function Vo2(t2, e3, n6) {
  const { windowSize: r4, mask: o6, maxNumber: s4, shiftBy: i6 } = n6;
  let c8 = Number(t2 & o6), f11 = t2 >> i6;
  c8 > r4 && (c8 -= s4, f11 += Ft2);
  const u4 = e3 * r4, a4 = u4 + Math.abs(c8) - 1, l8 = c8 === 0, d8 = c8 < 0, h6 = e3 % 2 !== 0;
  return { nextN: f11, offset: a4, isZero: l8, isNeg: d8, isNegF: h6, offsetF: u4 };
}
function _f(t2, e3) {
  if (!Array.isArray(t2))
    throw new Error("array expected");
  t2.forEach((n6, r4) => {
    if (!(n6 instanceof e3))
      throw new Error("invalid point at index " + r4);
  });
}
function Rf(t2, e3) {
  if (!Array.isArray(t2))
    throw new Error("array of scalars expected");
  t2.forEach((n6, r4) => {
    if (!e3.isValid(n6))
      throw new Error("invalid scalar at index " + r4);
  });
}
var jn2 = /* @__PURE__ */ new WeakMap();
var Mo2 = /* @__PURE__ */ new WeakMap();
function Ln2(t2) {
  return Mo2.get(t2) || 1;
}
function Ko2(t2) {
  if (t2 !== te2)
    throw new Error("invalid wNAF");
}
var $f = class {
  constructor(e3, n6) {
    this.BASE = e3.BASE, this.ZERO = e3.ZERO, this.Fn = e3.Fn, this.bits = n6;
  }
  _unsafeLadder(e3, n6, r4 = this.ZERO) {
    let o6 = e3;
    for (; n6 > te2; )
      n6 & Ft2 && (r4 = r4.add(o6)), o6 = o6.double(), n6 >>= Ft2;
    return r4;
  }
  precomputeWindow(e3, n6) {
    const { windows: r4, windowSize: o6 } = Cn2(n6, this.bits), s4 = [];
    let i6 = e3, c8 = i6;
    for (let f11 = 0; f11 < r4; f11++) {
      c8 = i6, s4.push(c8);
      for (let u4 = 1; u4 < o6; u4++)
        c8 = c8.add(i6), s4.push(c8);
      i6 = c8.double();
    }
    return s4;
  }
  wNAF(e3, n6, r4) {
    if (!this.Fn.isValid(r4))
      throw new Error("invalid scalar");
    let o6 = this.ZERO, s4 = this.BASE;
    const i6 = Cn2(e3, this.bits);
    for (let c8 = 0; c8 < i6.windows; c8++) {
      const { nextN: f11, offset: u4, isZero: a4, isNeg: l8, isNegF: d8, offsetF: h6 } = Vo2(r4, c8, i6);
      r4 = f11, a4 ? s4 = s4.add(qe2(d8, n6[h6])) : o6 = o6.add(qe2(l8, n6[u4]));
    }
    return Ko2(r4), { p: o6, f: s4 };
  }
  wNAFUnsafe(e3, n6, r4, o6 = this.ZERO) {
    const s4 = Cn2(e3, this.bits);
    for (let i6 = 0; i6 < s4.windows && r4 !== te2; i6++) {
      const { nextN: c8, offset: f11, isZero: u4, isNeg: a4 } = Vo2(r4, i6, s4);
      if (r4 = c8, !u4) {
        const l8 = n6[f11];
        o6 = o6.add(a4 ? l8.negate() : l8);
      }
    }
    return Ko2(r4), o6;
  }
  getPrecomputes(e3, n6, r4) {
    let o6 = jn2.get(n6);
    return o6 || (o6 = this.precomputeWindow(n6, e3), e3 !== 1 && (typeof r4 == "function" && (o6 = r4(o6)), jn2.set(n6, o6))), o6;
  }
  cached(e3, n6, r4) {
    const o6 = Ln2(e3);
    return this.wNAF(o6, this.getPrecomputes(o6, e3, r4), n6);
  }
  unsafe(e3, n6, r4, o6) {
    const s4 = Ln2(e3);
    return s4 === 1 ? this._unsafeLadder(e3, n6, o6) : this.wNAFUnsafe(s4, this.getPrecomputes(s4, e3, r4), n6, o6);
  }
  createCache(e3, n6) {
    Do2(n6, this.bits), Mo2.set(e3, n6), jn2.delete(e3);
  }
  hasCache(e3) {
    return Ln2(e3) !== 1;
  }
};
function Tf(t2, e3, n6, r4) {
  let o6 = e3, s4 = t2.ZERO, i6 = t2.ZERO;
  for (; n6 > te2 || r4 > te2; )
    n6 & Ft2 && (s4 = s4.add(o6)), r4 & Ft2 && (i6 = i6.add(o6)), o6 = o6.double(), n6 >>= Ft2, r4 >>= Ft2;
  return { p1: s4, p2: i6 };
}
function Cf(t2, e3, n6, r4) {
  _f(n6, t2), Rf(r4, e3);
  const o6 = n6.length, s4 = r4.length;
  if (o6 !== s4)
    throw new Error("arrays of points and scalars must have equal length");
  const i6 = t2.ZERO, c8 = Io2(BigInt(o6));
  let f11 = 1;
  c8 > 12 ? f11 = c8 - 3 : c8 > 4 ? f11 = c8 - 2 : c8 > 0 && (f11 = 2);
  const u4 = ye2(f11), a4 = new Array(Number(u4) + 1).fill(i6), l8 = Math.floor((e3.BITS - 1) / f11) * f11;
  let d8 = i6;
  for (let h6 = l8; h6 >= 0; h6 -= f11) {
    a4.fill(i6);
    for (let m6 = 0; m6 < s4; m6++) {
      const v11 = r4[m6], U4 = Number(v11 >> BigInt(h6) & u4);
      a4[U4] = a4[U4].add(n6[m6]);
    }
    let y6 = i6;
    for (let m6 = a4.length - 1, v11 = i6; m6 > 0; m6--)
      v11 = v11.add(a4[m6]), y6 = y6.add(v11);
    if (d8 = d8.add(y6), h6 !== 0)
      for (let m6 = 0; m6 < f11; m6++)
        d8 = d8.double();
  }
  return d8;
}
function qo2(t2, e3, n6) {
  if (e3) {
    if (e3.ORDER !== t2)
      throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    return Of(e3), e3;
  } else
    return Ht2(t2, { isLE: n6 });
}
function jf(t2, e3, n6 = {}, r4) {
  if (r4 === void 0 && (r4 = t2 === "edwards"), !e3 || typeof e3 != "object")
    throw new Error(`expected valid ${t2} CURVE object`);
  for (const f11 of ["p", "n", "h"]) {
    const u4 = e3[f11];
    if (!(typeof u4 == "bigint" && u4 > te2))
      throw new Error(`CURVE.${f11} must be positive bigint`);
  }
  const o6 = qo2(e3.p, n6.Fp, r4), s4 = qo2(e3.n, n6.Fn, r4), c8 = ["Gx", "Gy", "a", t2 === "weierstrass" ? "b" : "d"];
  for (const f11 of c8)
    if (!o6.isValid(e3[f11]))
      throw new Error(`CURVE.${f11} must be valid field element of CURVE.Fp`);
  return e3 = Object.freeze(Object.assign({}, e3)), { CURVE: e3, Fp: o6, Fn: s4 };
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8), kr2("HashToScalar-");
var me2 = BigInt(0);
var ee = BigInt(1);
var Fe = BigInt(2);
function Lf(t2) {
  return Ke2(t2, { adjustScalarBytes: "function", powPminus2: "function" }), Object.freeze({ ...t2 });
}
function kf(t2) {
  const e3 = Lf(t2), { P: n6, type: r4, adjustScalarBytes: o6, powPminus2: s4, randomBytes: i6 } = e3, c8 = r4 === "x25519";
  if (!c8 && r4 !== "x448")
    throw new Error("invalid type");
  const f11 = i6 || Mt2, u4 = c8 ? 255 : 448, a4 = c8 ? 32 : 56, l8 = BigInt(c8 ? 9 : 5), d8 = BigInt(c8 ? 121665 : 39081), h6 = c8 ? Fe ** BigInt(254) : Fe ** BigInt(447), y6 = c8 ? BigInt(8) * Fe ** BigInt(251) - ee : BigInt(4) * Fe ** BigInt(445) - ee, m6 = h6 + y6 + ee, v11 = (p5) => ct2(p5, n6), U4 = F4(l8);
  function F4(p5) {
    return Un2(v11(p5), a4);
  }
  function R4(p5) {
    const b5 = tt("u coordinate", p5, a4);
    return c8 && (b5[31] &= 127), v11(Me2(b5));
  }
  function Z2(p5) {
    return Me2(o6(tt("scalar", p5, a4)));
  }
  function H3(p5, b5) {
    const g7 = k6(R4(b5), Z2(p5));
    if (g7 === me2)
      throw new Error("invalid private or public key received");
    return F4(g7);
  }
  function j6(p5) {
    return H3(p5, U4);
  }
  function L5(p5, b5, g7) {
    const x7 = v11(p5 * (b5 - g7));
    return b5 = v11(b5 - x7), g7 = v11(g7 + x7), { x_2: b5, x_3: g7 };
  }
  function k6(p5, b5) {
    Rn2("u", p5, me2, n6), Rn2("scalar", b5, h6, m6);
    const g7 = b5, x7 = p5;
    let E6 = ee, A5 = me2, w6 = p5, B5 = ee, I4 = me2;
    for (let D3 = BigInt(u4 - 1); D3 >= me2; D3--) {
      const P7 = g7 >> D3 & ee;
      I4 ^= P7, { x_2: E6, x_3: w6 } = L5(I4, E6, w6), { x_2: A5, x_3: B5 } = L5(I4, A5, B5), I4 = P7;
      const $4 = E6 + A5, V4 = v11($4 * $4), q3 = E6 - A5, G6 = v11(q3 * q3), M7 = V4 - G6, Y2 = w6 + B5, Yt4 = w6 - B5, ce3 = v11(Yt4 * $4), fe5 = v11(Y2 * q3), Qn3 = ce3 + fe5, tr2 = ce3 - fe5;
      w6 = v11(Qn3 * Qn3), B5 = v11(x7 * v11(tr2 * tr2)), E6 = v11(V4 * G6), A5 = v11(M7 * (V4 + v11(d8 * M7)));
    }
    ({ x_2: E6, x_3: w6 } = L5(I4, E6, w6)), { x_2: A5, x_3: B5 } = L5(I4, A5, B5);
    const N14 = s4(A5);
    return v11(E6 * N14);
  }
  const O7 = { secretKey: a4, publicKey: a4, seed: a4 }, T7 = (p5 = f11(a4)) => (ht2(p5, O7.seed), p5);
  function C7(p5) {
    const b5 = T7(p5);
    return { secretKey: b5, publicKey: j6(b5) };
  }
  return { keygen: C7, getSharedSecret: (p5, b5) => H3(p5, b5), getPublicKey: (p5) => j6(p5), scalarMult: H3, scalarMultBase: j6, utils: { randomSecretKey: T7, randomPrivateKey: T7 }, GuBytes: U4.slice(), lengths: O7 };
}
var Pf = BigInt(1);
var Fo2 = BigInt(2);
var Hf = BigInt(3);
var Df = BigInt(5);
var Vf = BigInt(8);
var Zo2 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed");
var Mf = { p: Zo2, n: BigInt("0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed"), h: Vf, a: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec"), d: BigInt("0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3"), Gx: BigInt("0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a"), Gy: BigInt("0x6666666666666666666666666666666666666666666666666666666666666658") };
function Kf(t2) {
  const e3 = BigInt(10), n6 = BigInt(20), r4 = BigInt(40), o6 = BigInt(80), s4 = Zo2, c8 = t2 * t2 % s4 * t2 % s4, f11 = gt2(c8, Fo2, s4) * c8 % s4, u4 = gt2(f11, Pf, s4) * t2 % s4, a4 = gt2(u4, Df, s4) * u4 % s4, l8 = gt2(a4, e3, s4) * a4 % s4, d8 = gt2(l8, n6, s4) * l8 % s4, h6 = gt2(d8, r4, s4) * d8 % s4, y6 = gt2(h6, o6, s4) * h6 % s4, m6 = gt2(y6, o6, s4) * h6 % s4, v11 = gt2(m6, e3, s4) * a4 % s4;
  return { pow_p_5_8: gt2(v11, Fo2, s4) * t2 % s4, b2: c8 };
}
function qf(t2) {
  return t2[0] &= 248, t2[31] &= 127, t2[31] |= 64, t2;
}
var Ff = Ht2(Mf.p, { isLE: true });
var kn2 = (() => {
  const t2 = Ff.ORDER;
  return kf({ P: t2, type: "x25519", powPminus2: (e3) => {
    const { pow_p_5_8: n6, b2: r4 } = Kf(e3);
    return ct2(gt2(n6, Hf, t2) * r4, t2);
  }, adjustScalarBytes: qf });
})();
var Go2 = (t2, e3) => (t2 + (t2 >= 0 ? e3 : -e3) / zo2) / e3;
function Zf(t2, e3, n6) {
  const [[r4, o6], [s4, i6]] = e3, c8 = Go2(i6 * t2, n6), f11 = Go2(-o6 * t2, n6);
  let u4 = t2 - c8 * r4 - f11 * s4, a4 = -c8 * o6 - f11 * i6;
  const l8 = u4 < Et2, d8 = a4 < Et2;
  l8 && (u4 = -u4), d8 && (a4 = -a4);
  const h6 = ye2(Math.ceil(Io2(n6) / 2)) + ne;
  if (u4 < Et2 || u4 >= h6 || a4 < Et2 || a4 >= h6)
    throw new Error("splitScalar (endomorphism): failed, k=" + t2);
  return { k1neg: l8, k1: u4, k2neg: d8, k2: a4 };
}
function Pn2(t2) {
  if (!["compact", "recovered", "der"].includes(t2))
    throw new Error('Signature format must be "compact", "recovered", or "der"');
  return t2;
}
function Hn2(t2, e3) {
  const n6 = {};
  for (let r4 of Object.keys(e3))
    n6[r4] = t2[r4] === void 0 ? e3[r4] : t2[r4];
  return He2(n6.lowS, "lowS"), He2(n6.prehash, "prehash"), n6.format !== void 0 && Pn2(n6.format), n6;
}
var Gf = class extends Error {
  constructor(e3 = "") {
    super(e3);
  }
};
var xt2 = { Err: Gf, _tlv: { encode: (t2, e3) => {
  const { Err: n6 } = xt2;
  if (t2 < 0 || t2 > 256)
    throw new n6("tlv.encode: wrong tag");
  if (e3.length & 1)
    throw new n6("tlv.encode: unpadded data");
  const r4 = e3.length / 2, o6 = De2(r4);
  if (o6.length / 2 & 128)
    throw new n6("tlv.encode: long form length too big");
  const s4 = r4 > 127 ? De2(o6.length / 2 | 128) : "";
  return De2(t2) + s4 + o6 + e3;
}, decode(t2, e3) {
  const { Err: n6 } = xt2;
  let r4 = 0;
  if (t2 < 0 || t2 > 256)
    throw new n6("tlv.encode: wrong tag");
  if (e3.length < 2 || e3[r4++] !== t2)
    throw new n6("tlv.decode: wrong tlv");
  const o6 = e3[r4++], s4 = !!(o6 & 128);
  let i6 = 0;
  if (!s4)
    i6 = o6;
  else {
    const f11 = o6 & 127;
    if (!f11)
      throw new n6("tlv.decode(long): indefinite length not supported");
    if (f11 > 4)
      throw new n6("tlv.decode(long): byte length is too big");
    const u4 = e3.subarray(r4, r4 + f11);
    if (u4.length !== f11)
      throw new n6("tlv.decode: length bytes not complete");
    if (u4[0] === 0)
      throw new n6("tlv.decode(long): zero leftmost byte");
    for (const a4 of u4)
      i6 = i6 << 8 | a4;
    if (r4 += f11, i6 < 128)
      throw new n6("tlv.decode(long): not minimal encoding");
  }
  const c8 = e3.subarray(r4, r4 + i6);
  if (c8.length !== i6)
    throw new n6("tlv.decode: wrong value length");
  return { v: c8, l: e3.subarray(r4 + i6) };
} }, _int: { encode(t2) {
  const { Err: e3 } = xt2;
  if (t2 < Et2)
    throw new e3("integer: negative integers are not allowed");
  let n6 = De2(t2);
  if (Number.parseInt(n6[0], 16) & 8 && (n6 = "00" + n6), n6.length & 1)
    throw new e3("unexpected DER parsing assertion: unpadded hex");
  return n6;
}, decode(t2) {
  const { Err: e3 } = xt2;
  if (t2[0] & 128)
    throw new e3("invalid signature integer: negative");
  if (t2[0] === 0 && !(t2[1] & 128))
    throw new e3("invalid signature integer: unnecessary leading zero");
  return Ve2(t2);
} }, toSig(t2) {
  const { Err: e3, _int: n6, _tlv: r4 } = xt2, o6 = tt("signature", t2), { v: s4, l: i6 } = r4.decode(48, o6);
  if (i6.length)
    throw new e3("invalid signature: left bytes after parsing");
  const { v: c8, l: f11 } = r4.decode(2, s4), { v: u4, l: a4 } = r4.decode(2, f11);
  if (a4.length)
    throw new e3("invalid signature: left bytes after parsing");
  return { r: n6.decode(c8), s: n6.decode(u4) };
}, hexFromSig(t2) {
  const { _tlv: e3, _int: n6 } = xt2, r4 = e3.encode(2, n6.encode(t2.r)), o6 = e3.encode(2, n6.encode(t2.s)), s4 = r4 + o6;
  return e3.encode(48, s4);
} };
var Et2 = BigInt(0);
var ne = BigInt(1);
var zo2 = BigInt(2);
var Ze2 = BigInt(3);
var zf = BigInt(4);
function re(t2, e3) {
  const { BYTES: n6 } = t2;
  let r4;
  if (typeof e3 == "bigint")
    r4 = e3;
  else {
    let o6 = tt("private key", e3);
    try {
      r4 = t2.fromBytes(o6);
    } catch {
      throw new Error(`invalid private key: expected ui8a of size ${n6}, got ${typeof e3}`);
    }
  }
  if (!t2.isValidNot0(r4))
    throw new Error("invalid private key: out of range [1..N-1]");
  return r4;
}
function Yf(t2, e3 = {}) {
  const n6 = jf("weierstrass", t2, e3), { Fp: r4, Fn: o6 } = n6;
  let s4 = n6.CURVE;
  const { h: i6, n: c8 } = s4;
  Ke2(e3, {}, { allowInfinityPoint: "boolean", clearCofactor: "function", isTorsionFree: "function", fromBytes: "function", toBytes: "function", endo: "object", wrapPrivateKey: "boolean" });
  const { endo: f11 } = e3;
  if (f11 && (!r4.is0(s4.a) || typeof f11.beta != "bigint" || !Array.isArray(f11.basises)))
    throw new Error('invalid endo: expected "beta": bigint and "basises": array');
  const u4 = Wo2(r4, o6);
  function a4() {
    if (!r4.isOdd)
      throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function l8(_6, p5, b5) {
    const { x: g7, y: x7 } = p5.toAffine(), E6 = r4.toBytes(g7);
    if (He2(b5, "isCompressed"), b5) {
      a4();
      const A5 = !r4.isOdd(x7);
      return _t2(Yo2(A5), E6);
    } else
      return _t2(Uint8Array.of(4), E6, r4.toBytes(x7));
  }
  function d8(_6) {
    Kt2(_6, void 0, "Point");
    const { publicKey: p5, publicKeyUncompressed: b5 } = u4, g7 = _6.length, x7 = _6[0], E6 = _6.subarray(1);
    if (g7 === p5 && (x7 === 2 || x7 === 3)) {
      const A5 = r4.fromBytes(E6);
      if (!r4.isValid(A5))
        throw new Error("bad point: is not on curve, wrong x");
      const w6 = m6(A5);
      let B5;
      try {
        B5 = r4.sqrt(w6);
      } catch (D3) {
        const P7 = D3 instanceof Error ? ": " + D3.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + P7);
      }
      a4();
      const I4 = r4.isOdd(B5);
      return (x7 & 1) === 1 !== I4 && (B5 = r4.neg(B5)), { x: A5, y: B5 };
    } else if (g7 === b5 && x7 === 4) {
      const A5 = r4.BYTES, w6 = r4.fromBytes(E6.subarray(0, A5)), B5 = r4.fromBytes(E6.subarray(A5, A5 * 2));
      if (!v11(w6, B5))
        throw new Error("bad point: is not on curve");
      return { x: w6, y: B5 };
    } else
      throw new Error(`bad point: got length ${g7}, expected compressed=${p5} or uncompressed=${b5}`);
  }
  const h6 = e3.toBytes || l8, y6 = e3.fromBytes || d8;
  function m6(_6) {
    const p5 = r4.sqr(_6), b5 = r4.mul(p5, _6);
    return r4.add(r4.add(b5, r4.mul(_6, s4.a)), s4.b);
  }
  function v11(_6, p5) {
    const b5 = r4.sqr(p5), g7 = m6(_6);
    return r4.eql(b5, g7);
  }
  if (!v11(s4.Gx, s4.Gy))
    throw new Error("bad curve params: generator point");
  const U4 = r4.mul(r4.pow(s4.a, Ze2), zf), F4 = r4.mul(r4.sqr(s4.b), BigInt(27));
  if (r4.is0(r4.add(U4, F4)))
    throw new Error("bad curve params: a or b");
  function R4(_6, p5, b5 = false) {
    if (!r4.isValid(p5) || b5 && r4.is0(p5))
      throw new Error(`bad point coordinate ${_6}`);
    return p5;
  }
  function Z2(_6) {
    if (!(_6 instanceof O7))
      throw new Error("ProjectivePoint expected");
  }
  function H3(_6) {
    if (!f11 || !f11.basises)
      throw new Error("no endo");
    return Zf(_6, f11.basises, o6.ORDER);
  }
  const j6 = So2((_6, p5) => {
    const { X: b5, Y: g7, Z: x7 } = _6;
    if (r4.eql(x7, r4.ONE))
      return { x: b5, y: g7 };
    const E6 = _6.is0();
    p5 == null && (p5 = E6 ? r4.ONE : r4.inv(x7));
    const A5 = r4.mul(b5, p5), w6 = r4.mul(g7, p5), B5 = r4.mul(x7, p5);
    if (E6)
      return { x: r4.ZERO, y: r4.ZERO };
    if (!r4.eql(B5, r4.ONE))
      throw new Error("invZ was invalid");
    return { x: A5, y: w6 };
  }), L5 = So2((_6) => {
    if (_6.is0()) {
      if (e3.allowInfinityPoint && !r4.is0(_6.Y))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x: p5, y: b5 } = _6.toAffine();
    if (!r4.isValid(p5) || !r4.isValid(b5))
      throw new Error("bad point: x or y not field elements");
    if (!v11(p5, b5))
      throw new Error("bad point: equation left != right");
    if (!_6.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  function k6(_6, p5, b5, g7, x7) {
    return b5 = new O7(r4.mul(b5.X, _6), b5.Y, b5.Z), p5 = qe2(g7, p5), b5 = qe2(x7, b5), p5.add(b5);
  }
  class O7 {
    constructor(p5, b5, g7) {
      this.X = R4("x", p5), this.Y = R4("y", b5, true), this.Z = R4("z", g7), Object.freeze(this);
    }
    static CURVE() {
      return s4;
    }
    static fromAffine(p5) {
      const { x: b5, y: g7 } = p5 || {};
      if (!p5 || !r4.isValid(b5) || !r4.isValid(g7))
        throw new Error("invalid affine point");
      if (p5 instanceof O7)
        throw new Error("projective point not allowed");
      return r4.is0(b5) && r4.is0(g7) ? O7.ZERO : new O7(b5, g7, r4.ONE);
    }
    static fromBytes(p5) {
      const b5 = O7.fromAffine(y6(Kt2(p5, void 0, "point")));
      return b5.assertValidity(), b5;
    }
    static fromHex(p5) {
      return O7.fromBytes(tt("pointHex", p5));
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    precompute(p5 = 8, b5 = true) {
      return C7.createCache(this, p5), b5 || this.multiply(Ze2), this;
    }
    assertValidity() {
      L5(this);
    }
    hasEvenY() {
      const { y: p5 } = this.toAffine();
      if (!r4.isOdd)
        throw new Error("Field doesn't support isOdd");
      return !r4.isOdd(p5);
    }
    equals(p5) {
      Z2(p5);
      const { X: b5, Y: g7, Z: x7 } = this, { X: E6, Y: A5, Z: w6 } = p5, B5 = r4.eql(r4.mul(b5, w6), r4.mul(E6, x7)), I4 = r4.eql(r4.mul(g7, w6), r4.mul(A5, x7));
      return B5 && I4;
    }
    negate() {
      return new O7(this.X, r4.neg(this.Y), this.Z);
    }
    double() {
      const { a: p5, b: b5 } = s4, g7 = r4.mul(b5, Ze2), { X: x7, Y: E6, Z: A5 } = this;
      let w6 = r4.ZERO, B5 = r4.ZERO, I4 = r4.ZERO, N14 = r4.mul(x7, x7), D3 = r4.mul(E6, E6), P7 = r4.mul(A5, A5), $4 = r4.mul(x7, E6);
      return $4 = r4.add($4, $4), I4 = r4.mul(x7, A5), I4 = r4.add(I4, I4), w6 = r4.mul(p5, I4), B5 = r4.mul(g7, P7), B5 = r4.add(w6, B5), w6 = r4.sub(D3, B5), B5 = r4.add(D3, B5), B5 = r4.mul(w6, B5), w6 = r4.mul($4, w6), I4 = r4.mul(g7, I4), P7 = r4.mul(p5, P7), $4 = r4.sub(N14, P7), $4 = r4.mul(p5, $4), $4 = r4.add($4, I4), I4 = r4.add(N14, N14), N14 = r4.add(I4, N14), N14 = r4.add(N14, P7), N14 = r4.mul(N14, $4), B5 = r4.add(B5, N14), P7 = r4.mul(E6, A5), P7 = r4.add(P7, P7), N14 = r4.mul(P7, $4), w6 = r4.sub(w6, N14), I4 = r4.mul(P7, D3), I4 = r4.add(I4, I4), I4 = r4.add(I4, I4), new O7(w6, B5, I4);
    }
    add(p5) {
      Z2(p5);
      const { X: b5, Y: g7, Z: x7 } = this, { X: E6, Y: A5, Z: w6 } = p5;
      let B5 = r4.ZERO, I4 = r4.ZERO, N14 = r4.ZERO;
      const D3 = s4.a, P7 = r4.mul(s4.b, Ze2);
      let $4 = r4.mul(b5, E6), V4 = r4.mul(g7, A5), q3 = r4.mul(x7, w6), G6 = r4.add(b5, g7), M7 = r4.add(E6, A5);
      G6 = r4.mul(G6, M7), M7 = r4.add($4, V4), G6 = r4.sub(G6, M7), M7 = r4.add(b5, x7);
      let Y2 = r4.add(E6, w6);
      return M7 = r4.mul(M7, Y2), Y2 = r4.add($4, q3), M7 = r4.sub(M7, Y2), Y2 = r4.add(g7, x7), B5 = r4.add(A5, w6), Y2 = r4.mul(Y2, B5), B5 = r4.add(V4, q3), Y2 = r4.sub(Y2, B5), N14 = r4.mul(D3, M7), B5 = r4.mul(P7, q3), N14 = r4.add(B5, N14), B5 = r4.sub(V4, N14), N14 = r4.add(V4, N14), I4 = r4.mul(B5, N14), V4 = r4.add($4, $4), V4 = r4.add(V4, $4), q3 = r4.mul(D3, q3), M7 = r4.mul(P7, M7), V4 = r4.add(V4, q3), q3 = r4.sub($4, q3), q3 = r4.mul(D3, q3), M7 = r4.add(M7, q3), $4 = r4.mul(V4, M7), I4 = r4.add(I4, $4), $4 = r4.mul(Y2, M7), B5 = r4.mul(G6, B5), B5 = r4.sub(B5, $4), $4 = r4.mul(G6, V4), N14 = r4.mul(Y2, N14), N14 = r4.add(N14, $4), new O7(B5, I4, N14);
    }
    subtract(p5) {
      return this.add(p5.negate());
    }
    is0() {
      return this.equals(O7.ZERO);
    }
    multiply(p5) {
      const { endo: b5 } = e3;
      if (!o6.isValidNot0(p5))
        throw new Error("invalid scalar: out of range");
      let g7, x7;
      const E6 = (A5) => C7.cached(this, A5, (w6) => Tn2(O7, w6));
      if (b5) {
        const { k1neg: A5, k1: w6, k2neg: B5, k2: I4 } = H3(p5), { p: N14, f: D3 } = E6(w6), { p: P7, f: $4 } = E6(I4);
        x7 = D3.add($4), g7 = k6(b5.beta, N14, P7, A5, B5);
      } else {
        const { p: A5, f: w6 } = E6(p5);
        g7 = A5, x7 = w6;
      }
      return Tn2(O7, [g7, x7])[0];
    }
    multiplyUnsafe(p5) {
      const { endo: b5 } = e3, g7 = this;
      if (!o6.isValid(p5))
        throw new Error("invalid scalar: out of range");
      if (p5 === Et2 || g7.is0())
        return O7.ZERO;
      if (p5 === ne)
        return g7;
      if (C7.hasCache(this))
        return this.multiply(p5);
      if (b5) {
        const { k1neg: x7, k1: E6, k2neg: A5, k2: w6 } = H3(p5), { p1: B5, p2: I4 } = Tf(O7, g7, E6, w6);
        return k6(b5.beta, B5, I4, x7, A5);
      } else
        return C7.unsafe(g7, p5);
    }
    multiplyAndAddUnsafe(p5, b5, g7) {
      const x7 = this.multiplyUnsafe(b5).add(p5.multiplyUnsafe(g7));
      return x7.is0() ? void 0 : x7;
    }
    toAffine(p5) {
      return j6(this, p5);
    }
    isTorsionFree() {
      const { isTorsionFree: p5 } = e3;
      return i6 === ne ? true : p5 ? p5(O7, this) : C7.unsafe(this, c8).is0();
    }
    clearCofactor() {
      const { clearCofactor: p5 } = e3;
      return i6 === ne ? this : p5 ? p5(O7, this) : this.multiplyUnsafe(i6);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i6).is0();
    }
    toBytes(p5 = true) {
      return He2(p5, "isCompressed"), this.assertValidity(), h6(O7, this, p5);
    }
    toHex(p5 = true) {
      return Jt2(this.toBytes(p5));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
    get px() {
      return this.X;
    }
    get py() {
      return this.X;
    }
    get pz() {
      return this.Z;
    }
    toRawBytes(p5 = true) {
      return this.toBytes(p5);
    }
    _setWindowSize(p5) {
      this.precompute(p5);
    }
    static normalizeZ(p5) {
      return Tn2(O7, p5);
    }
    static msm(p5, b5) {
      return Cf(O7, o6, p5, b5);
    }
    static fromPrivateKey(p5) {
      return O7.BASE.multiply(re(o6, p5));
    }
  }
  O7.BASE = new O7(s4.Gx, s4.Gy, r4.ONE), O7.ZERO = new O7(r4.ZERO, r4.ONE, r4.ZERO), O7.Fp = r4, O7.Fn = o6;
  const T7 = o6.BITS, C7 = new $f(O7, e3.endo ? Math.ceil(T7 / 2) : T7);
  return O7.BASE.precompute(8), O7;
}
function Yo2(t2) {
  return Uint8Array.of(t2 ? 2 : 3);
}
function Wo2(t2, e3) {
  return { secretKey: e3.BYTES, publicKey: 1 + t2.BYTES, publicKeyUncompressed: 1 + 2 * t2.BYTES, publicKeyHasPrefix: true, signature: 2 * e3.BYTES };
}
function Wf(t2, e3 = {}) {
  const { Fn: n6 } = t2, r4 = e3.randomBytes || Mt2, o6 = Object.assign(Wo2(t2.Fp, n6), { seed: Ho2(n6.ORDER) });
  function s4(h6) {
    try {
      return !!re(n6, h6);
    } catch {
      return false;
    }
  }
  function i6(h6, y6) {
    const { publicKey: m6, publicKeyUncompressed: v11 } = o6;
    try {
      const U4 = h6.length;
      return y6 === true && U4 !== m6 || y6 === false && U4 !== v11 ? false : !!t2.fromBytes(h6);
    } catch {
      return false;
    }
  }
  function c8(h6 = r4(o6.seed)) {
    return Uf(Kt2(h6, o6.seed, "seed"), n6.ORDER);
  }
  function f11(h6, y6 = true) {
    return t2.BASE.multiply(re(n6, h6)).toBytes(y6);
  }
  function u4(h6) {
    const y6 = c8(h6);
    return { secretKey: y6, publicKey: f11(y6) };
  }
  function a4(h6) {
    if (typeof h6 == "bigint")
      return false;
    if (h6 instanceof t2)
      return true;
    const { secretKey: y6, publicKey: m6, publicKeyUncompressed: v11 } = o6;
    if (n6.allowedLengths || y6 === m6)
      return;
    const U4 = tt("key", h6).length;
    return U4 === m6 || U4 === v11;
  }
  function l8(h6, y6, m6 = true) {
    if (a4(h6) === true)
      throw new Error("first arg must be private key");
    if (a4(y6) === false)
      throw new Error("second arg must be public key");
    const v11 = re(n6, h6);
    return t2.fromHex(y6).multiply(v11).toBytes(m6);
  }
  return Object.freeze({ getPublicKey: f11, getSharedSecret: l8, keygen: u4, Point: t2, utils: { isValidSecretKey: s4, isValidPublicKey: i6, randomSecretKey: c8, isValidPrivateKey: s4, randomPrivateKey: c8, normPrivateKeyToScalar: (h6) => re(n6, h6), precompute(h6 = 8, y6 = t2.BASE) {
    return y6.precompute(h6, false);
  } }, lengths: o6 });
}
function Xf(t2, e3, n6 = {}) {
  Ue2(e3), Ke2(n6, {}, { hmac: "function", lowS: "boolean", randomBytes: "function", bits2int: "function", bits2int_modN: "function" });
  const r4 = n6.randomBytes || Mt2, o6 = n6.hmac || ((b5, ...g7) => ke2(e3, b5, _t2(...g7))), { Fp: s4, Fn: i6 } = t2, { ORDER: c8, BITS: f11 } = i6, { keygen: u4, getPublicKey: a4, getSharedSecret: l8, utils: d8, lengths: h6 } = Wf(t2, n6), y6 = { prehash: false, lowS: typeof n6.lowS == "boolean" ? n6.lowS : false, format: void 0, extraEntropy: false }, m6 = "compact";
  function v11(b5) {
    const g7 = c8 >> ne;
    return b5 > g7;
  }
  function U4(b5, g7) {
    if (!i6.isValidNot0(g7))
      throw new Error(`invalid signature ${b5}: out of range 1..Point.Fn.ORDER`);
    return g7;
  }
  function F4(b5, g7) {
    Pn2(g7);
    const x7 = h6.signature, E6 = g7 === "compact" ? x7 : g7 === "recovered" ? x7 + 1 : void 0;
    return Kt2(b5, E6, `${g7} signature`);
  }
  class R4 {
    constructor(g7, x7, E6) {
      this.r = U4("r", g7), this.s = U4("s", x7), E6 != null && (this.recovery = E6), Object.freeze(this);
    }
    static fromBytes(g7, x7 = m6) {
      F4(g7, x7);
      let E6;
      if (x7 === "der") {
        const { r: I4, s: N14 } = xt2.toSig(Kt2(g7));
        return new R4(I4, N14);
      }
      x7 === "recovered" && (E6 = g7[0], x7 = "compact", g7 = g7.subarray(1));
      const A5 = i6.BYTES, w6 = g7.subarray(0, A5), B5 = g7.subarray(A5, A5 * 2);
      return new R4(i6.fromBytes(w6), i6.fromBytes(B5), E6);
    }
    static fromHex(g7, x7) {
      return this.fromBytes(_e2(g7), x7);
    }
    addRecoveryBit(g7) {
      return new R4(this.r, this.s, g7);
    }
    recoverPublicKey(g7) {
      const x7 = s4.ORDER, { r: E6, s: A5, recovery: w6 } = this;
      if (w6 == null || ![0, 1, 2, 3].includes(w6))
        throw new Error("recovery id invalid");
      if (c8 * zo2 < x7 && w6 > 1)
        throw new Error("recovery id is ambiguous for h>1 curve");
      const I4 = w6 === 2 || w6 === 3 ? E6 + c8 : E6;
      if (!s4.isValid(I4))
        throw new Error("recovery id 2 or 3 invalid");
      const N14 = s4.toBytes(I4), D3 = t2.fromBytes(_t2(Yo2((w6 & 1) === 0), N14)), P7 = i6.inv(I4), $4 = H3(tt("msgHash", g7)), V4 = i6.create(-$4 * P7), q3 = i6.create(A5 * P7), G6 = t2.BASE.multiplyUnsafe(V4).add(D3.multiplyUnsafe(q3));
      if (G6.is0())
        throw new Error("point at infinify");
      return G6.assertValidity(), G6;
    }
    hasHighS() {
      return v11(this.s);
    }
    toBytes(g7 = m6) {
      if (Pn2(g7), g7 === "der")
        return _e2(xt2.hexFromSig(this));
      const x7 = i6.toBytes(this.r), E6 = i6.toBytes(this.s);
      if (g7 === "recovered") {
        if (this.recovery == null)
          throw new Error("recovery bit must be present");
        return _t2(Uint8Array.of(this.recovery), x7, E6);
      }
      return _t2(x7, E6);
    }
    toHex(g7) {
      return Jt2(this.toBytes(g7));
    }
    assertValidity() {
    }
    static fromCompact(g7) {
      return R4.fromBytes(tt("sig", g7), "compact");
    }
    static fromDER(g7) {
      return R4.fromBytes(tt("sig", g7), "der");
    }
    normalizeS() {
      return this.hasHighS() ? new R4(this.r, i6.neg(this.s), this.recovery) : this;
    }
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return Jt2(this.toBytes("der"));
    }
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return Jt2(this.toBytes("compact"));
    }
  }
  const Z2 = n6.bits2int || function(g7) {
    if (g7.length > 8192)
      throw new Error("input is too large");
    const x7 = Ve2(g7), E6 = g7.length * 8 - f11;
    return E6 > 0 ? x7 >> BigInt(E6) : x7;
  }, H3 = n6.bits2int_modN || function(g7) {
    return i6.create(Z2(g7));
  }, j6 = ye2(f11);
  function L5(b5) {
    return Rn2("num < 2^" + f11, b5, Et2, j6), i6.toBytes(b5);
  }
  function k6(b5, g7) {
    return Kt2(b5, void 0, "message"), g7 ? Kt2(e3(b5), void 0, "prehashed message") : b5;
  }
  function O7(b5, g7, x7) {
    if (["recovered", "canonical"].some((V4) => V4 in x7))
      throw new Error("sign() legacy options not supported");
    const { lowS: E6, prehash: A5, extraEntropy: w6 } = Hn2(x7, y6);
    b5 = k6(b5, A5);
    const B5 = H3(b5), I4 = re(i6, g7), N14 = [L5(I4), L5(B5)];
    if (w6 != null && w6 !== false) {
      const V4 = w6 === true ? r4(h6.secretKey) : w6;
      N14.push(tt("extraEntropy", V4));
    }
    const D3 = _t2(...N14), P7 = B5;
    function $4(V4) {
      const q3 = Z2(V4);
      if (!i6.isValidNot0(q3))
        return;
      const G6 = i6.inv(q3), M7 = t2.BASE.multiply(q3).toAffine(), Y2 = i6.create(M7.x);
      if (Y2 === Et2)
        return;
      const Yt4 = i6.create(G6 * i6.create(P7 + Y2 * I4));
      if (Yt4 === Et2)
        return;
      let ce3 = (M7.x === Y2 ? 0 : 2) | Number(M7.y & ne), fe5 = Yt4;
      return E6 && v11(Yt4) && (fe5 = i6.neg(Yt4), ce3 ^= 1), new R4(Y2, fe5, ce3);
    }
    return { seed: D3, k2sig: $4 };
  }
  function T7(b5, g7, x7 = {}) {
    b5 = tt("message", b5);
    const { seed: E6, k2sig: A5 } = O7(b5, g7, x7);
    return vf(e3.outputLen, i6.BYTES, o6)(E6, A5);
  }
  function C7(b5) {
    let g7;
    const x7 = typeof b5 == "string" || Ne2(b5), E6 = !x7 && b5 !== null && typeof b5 == "object" && typeof b5.r == "bigint" && typeof b5.s == "bigint";
    if (!x7 && !E6)
      throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    if (E6)
      g7 = new R4(b5.r, b5.s);
    else if (x7) {
      try {
        g7 = R4.fromBytes(tt("sig", b5), "der");
      } catch (A5) {
        if (!(A5 instanceof xt2.Err))
          throw A5;
      }
      if (!g7)
        try {
          g7 = R4.fromBytes(tt("sig", b5), "compact");
        } catch {
          return false;
        }
    }
    return g7 || false;
  }
  function _6(b5, g7, x7, E6 = {}) {
    const { lowS: A5, prehash: w6, format: B5 } = Hn2(E6, y6);
    if (x7 = tt("publicKey", x7), g7 = k6(tt("message", g7), w6), "strict" in E6)
      throw new Error("options.strict was renamed to lowS");
    const I4 = B5 === void 0 ? C7(b5) : R4.fromBytes(tt("sig", b5), B5);
    if (I4 === false)
      return false;
    try {
      const N14 = t2.fromBytes(x7);
      if (A5 && I4.hasHighS())
        return false;
      const { r: D3, s: P7 } = I4, $4 = H3(g7), V4 = i6.inv(P7), q3 = i6.create($4 * V4), G6 = i6.create(D3 * V4), M7 = t2.BASE.multiplyUnsafe(q3).add(N14.multiplyUnsafe(G6));
      return M7.is0() ? false : i6.create(M7.x) === D3;
    } catch {
      return false;
    }
  }
  function p5(b5, g7, x7 = {}) {
    const { prehash: E6 } = Hn2(x7, y6);
    return g7 = k6(g7, E6), R4.fromBytes(b5, "recovered").recoverPublicKey(g7).toBytes();
  }
  return Object.freeze({ keygen: u4, getPublicKey: a4, getSharedSecret: l8, utils: d8, lengths: h6, Point: t2, sign: T7, verify: _6, recoverPublicKey: p5, Signature: R4, hash: e3 });
}
function Jf(t2) {
  const e3 = { a: t2.a, b: t2.b, p: t2.Fp.ORDER, n: t2.n, h: t2.h, Gx: t2.Gx, Gy: t2.Gy }, n6 = t2.Fp;
  let r4 = t2.allowedPrivateKeyLengths ? Array.from(new Set(t2.allowedPrivateKeyLengths.map((i6) => Math.ceil(i6 / 2)))) : void 0;
  const o6 = Ht2(e3.n, { BITS: t2.nBitLength, allowedLengths: r4, modFromBytes: t2.wrapPrivateKey }), s4 = { Fp: n6, Fn: o6, allowInfinityPoint: t2.allowInfinityPoint, endo: t2.endo, isTorsionFree: t2.isTorsionFree, clearCofactor: t2.clearCofactor, fromBytes: t2.fromBytes, toBytes: t2.toBytes };
  return { CURVE: e3, curveOpts: s4 };
}
function Qf(t2) {
  const { CURVE: e3, curveOpts: n6 } = Jf(t2), r4 = { hmac: t2.hmac, randomBytes: t2.randomBytes, lowS: t2.lowS, bits2int: t2.bits2int, bits2int_modN: t2.bits2int_modN };
  return { CURVE: e3, curveOpts: n6, hash: t2.hash, ecdsaOpts: r4 };
}
function ta(t2, e3) {
  const n6 = e3.Point;
  return Object.assign({}, e3, { ProjectivePoint: n6, CURVE: Object.assign({}, t2, ko2(n6.Fn.ORDER, n6.Fn.BITS)) });
}
function ea(t2) {
  const { CURVE: e3, curveOpts: n6, hash: r4, ecdsaOpts: o6 } = Qf(t2), s4 = Yf(e3, n6), i6 = Xf(s4, r4, o6);
  return ta(t2, i6);
}
function Dn(t2, e3) {
  const n6 = (r4) => ea({ ...t2, hash: r4 });
  return { ...n6(e3), create: n6 };
}
var Xo = { p: BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"), n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), h: BigInt(1), a: BigInt("0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc"), b: BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5") };
var Jo2 = { p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"), n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"), h: BigInt(1), a: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc"), b: BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef"), Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"), Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f") };
var Qo2 = { p: BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"), h: BigInt(1), a: BigInt("0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"), b: BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00"), Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"), Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650") };
var na = Ht2(Xo.p);
var ra = Ht2(Jo2.p);
var oa = Ht2(Qo2.p);
var sa = Dn({ ...Xo, Fp: na, lowS: false }, $e2);
Dn({ ...Jo2, Fp: ra, lowS: false }, gc), Dn({ ...Qo2, Fp: oa, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, pc);
var ia = sa;
var Vn2 = "base10";
var rt2 = "base16";
var oe = "base64pad";
var Ge2 = "base64url";
var se = "utf8";
var Mn2 = 0;
var ie = 1;
var we2 = 2;
var ca = 0;
var ts = 1;
var ve2 = 12;
var Kn2 = 32;
function fa() {
  const t2 = kn2.utils.randomPrivateKey(), e3 = kn2.getPublicKey(t2);
  return { privateKey: toString3(t2, rt2), publicKey: toString3(e3, rt2) };
}
function aa() {
  const t2 = Mt2(Kn2);
  return toString3(t2, rt2);
}
function ua(t2, e3) {
  const n6 = kn2.getSharedSecret(fromString4(t2, rt2), fromString4(e3, rt2)), r4 = mf(Pe2, n6, void 0, void 0, Kn2);
  return toString3(r4, rt2);
}
function la(t2) {
  const e3 = Pe2(fromString4(t2, rt2));
  return toString3(e3, rt2);
}
function da(t2) {
  const e3 = Pe2(fromString4(t2, se));
  return toString3(e3, rt2);
}
function qn2(t2) {
  return fromString4(`${t2}`, Vn2);
}
function Zt2(t2) {
  return Number(toString3(t2, Vn2));
}
function es(t2) {
  return t2.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function ns(t2) {
  const e3 = t2.replace(/-/g, "+").replace(/_/g, "/"), n6 = (4 - e3.length % 4) % 4;
  return e3 + "=".repeat(n6);
}
function ha(t2) {
  const e3 = qn2(typeof t2.type < "u" ? t2.type : Mn2);
  if (Zt2(e3) === ie && typeof t2.senderPublicKey > "u")
    throw new Error("Missing sender public key for type 1 envelope");
  const n6 = typeof t2.senderPublicKey < "u" ? fromString4(t2.senderPublicKey, rt2) : void 0, r4 = typeof t2.iv < "u" ? fromString4(t2.iv, rt2) : Mt2(ve2), o6 = fromString4(t2.symKey, rt2), s4 = xo2(o6, r4).encrypt(fromString4(t2.message, se)), i6 = Fn2({ type: e3, sealed: s4, iv: r4, senderPublicKey: n6 });
  return t2.encoding === Ge2 ? es(i6) : i6;
}
function pa(t2) {
  const e3 = fromString4(t2.symKey, rt2), { sealed: n6, iv: r4 } = ze2({ encoded: t2.encoded, encoding: t2.encoding }), o6 = xo2(e3, r4).decrypt(n6);
  if (o6 === null)
    throw new Error("Failed to decrypt");
  return toString3(o6, se);
}
function ga(t2, e3) {
  const n6 = qn2(we2), r4 = Mt2(ve2), o6 = fromString4(t2, se), s4 = Fn2({ type: n6, sealed: o6, iv: r4 });
  return e3 === Ge2 ? es(s4) : s4;
}
function ba(t2, e3) {
  const { sealed: n6 } = ze2({ encoded: t2, encoding: e3 });
  return toString3(n6, se);
}
function Fn2(t2) {
  if (Zt2(t2.type) === we2)
    return toString3(concat3([t2.type, t2.sealed]), oe);
  if (Zt2(t2.type) === ie) {
    if (typeof t2.senderPublicKey > "u")
      throw new Error("Missing sender public key for type 1 envelope");
    return toString3(concat3([t2.type, t2.senderPublicKey, t2.iv, t2.sealed]), oe);
  }
  return toString3(concat3([t2.type, t2.iv, t2.sealed]), oe);
}
function ze2(t2) {
  const e3 = (t2.encoding || oe) === Ge2 ? ns(t2.encoded) : t2.encoded, n6 = fromString4(e3, oe), r4 = n6.slice(ca, ts), o6 = ts;
  if (Zt2(r4) === ie) {
    const f11 = o6 + Kn2, u4 = f11 + ve2, a4 = n6.slice(o6, f11), l8 = n6.slice(f11, u4), d8 = n6.slice(u4);
    return { type: r4, sealed: d8, iv: l8, senderPublicKey: a4 };
  }
  if (Zt2(r4) === we2) {
    const f11 = n6.slice(o6), u4 = Mt2(ve2);
    return { type: r4, sealed: f11, iv: u4 };
  }
  const s4 = o6 + ve2, i6 = n6.slice(o6, s4), c8 = n6.slice(s4);
  return { type: r4, sealed: c8, iv: i6 };
}
function ya(t2, e3) {
  const n6 = ze2({ encoded: t2, encoding: e3 == null ? void 0 : e3.encoding });
  return rs({ type: Zt2(n6.type), senderPublicKey: typeof n6.senderPublicKey < "u" ? toString3(n6.senderPublicKey, rt2) : void 0, receiverPublicKey: e3 == null ? void 0 : e3.receiverPublicKey });
}
function rs(t2) {
  const e3 = (t2 == null ? void 0 : t2.type) || Mn2;
  if (e3 === ie) {
    if (typeof (t2 == null ? void 0 : t2.senderPublicKey) > "u")
      throw new Error("missing sender public key");
    if (typeof (t2 == null ? void 0 : t2.receiverPublicKey) > "u")
      throw new Error("missing receiver public key");
  }
  return { type: e3, senderPublicKey: t2 == null ? void 0 : t2.senderPublicKey, receiverPublicKey: t2 == null ? void 0 : t2.receiverPublicKey };
}
function ma(t2) {
  return t2.type === ie && typeof t2.senderPublicKey == "string" && typeof t2.receiverPublicKey == "string";
}
function wa(t2) {
  return t2.type === we2;
}
function os(t2) {
  const e3 = Buffer.from(t2.x, "base64"), n6 = Buffer.from(t2.y, "base64");
  return concat3([new Uint8Array([4]), e3, n6]);
}
function va(t2, e3) {
  const [n6, r4, o6] = t2.split("."), s4 = Buffer.from(ns(o6), "base64");
  if (s4.length !== 64)
    throw new Error("Invalid signature length");
  const i6 = s4.slice(0, 32), c8 = s4.slice(32, 64), f11 = `${n6}.${r4}`, u4 = Pe2(f11), a4 = os(e3);
  if (!ia.verify(concat3([i6, c8]), u4, a4))
    throw new Error("Invalid signature");
  return sn(t2).payload;
}
var ss = "irn";
function xa(t2) {
  return (t2 == null ? void 0 : t2.relay) || { protocol: ss };
}
function Ea(t2) {
  const e3 = C[t2];
  if (typeof e3 > "u")
    throw new Error(`Relay Protocol not supported: ${t2}`);
  return e3;
}
var Ba = Object.defineProperty;
var Aa = Object.defineProperties;
var Ia = Object.getOwnPropertyDescriptors;
var is3 = Object.getOwnPropertySymbols;
var Sa = Object.prototype.hasOwnProperty;
var Oa = Object.prototype.propertyIsEnumerable;
var cs = (t2, e3, n6) => e3 in t2 ? Ba(t2, e3, { enumerable: true, configurable: true, writable: true, value: n6 }) : t2[e3] = n6;
var Zn2 = (t2, e3) => {
  for (var n6 in e3 || (e3 = {}))
    Sa.call(e3, n6) && cs(t2, n6, e3[n6]);
  if (is3)
    for (var n6 of is3(e3))
      Oa.call(e3, n6) && cs(t2, n6, e3[n6]);
  return t2;
};
var Na = (t2, e3) => Aa(t2, Ia(e3));
function fs(t2, e3 = "-") {
  const n6 = {}, r4 = "relay" + e3;
  return Object.keys(t2).forEach((o6) => {
    if (o6.startsWith(r4)) {
      const s4 = o6.replace(r4, ""), i6 = t2[o6];
      n6[s4] = i6;
    }
  }), n6;
}
function Ua(t2) {
  if (!t2.includes("wc:")) {
    const u4 = cn(t2);
    u4 != null && u4.includes("wc:") && (t2 = u4);
  }
  t2 = t2.includes("wc://") ? t2.replace("wc://", "") : t2, t2 = t2.includes("wc:") ? t2.replace("wc:", "") : t2;
  const e3 = t2.indexOf(":"), n6 = t2.indexOf("?") !== -1 ? t2.indexOf("?") : void 0, r4 = t2.substring(0, e3), o6 = t2.substring(e3 + 1, n6).split("@"), s4 = typeof n6 < "u" ? t2.substring(n6) : "", i6 = new URLSearchParams(s4), c8 = Object.fromEntries(i6.entries()), f11 = typeof c8.methods == "string" ? c8.methods.split(",") : void 0;
  return { protocol: r4, topic: as(o6[0]), version: parseInt(o6[1], 10), symKey: c8.symKey, relay: fs(c8), methods: f11, expiryTimestamp: c8.expiryTimestamp ? parseInt(c8.expiryTimestamp, 10) : void 0 };
}
function as(t2) {
  return t2.startsWith("//") ? t2.substring(2) : t2;
}
function us(t2, e3 = "-") {
  const n6 = "relay", r4 = {};
  return Object.keys(t2).forEach((o6) => {
    const s4 = o6, i6 = n6 + e3 + s4;
    t2[s4] && (r4[i6] = t2[s4]);
  }), r4;
}
function _a(t2) {
  const e3 = new URLSearchParams(), n6 = Zn2(Zn2(Na(Zn2({}, us(t2.relay)), { symKey: t2.symKey }), t2.expiryTimestamp && { expiryTimestamp: t2.expiryTimestamp.toString() }), t2.methods && { methods: t2.methods.join(",") });
  return Object.entries(n6).sort(([r4], [o6]) => r4.localeCompare(o6)).forEach(([r4, o6]) => {
    o6 !== void 0 && e3.append(r4, String(o6));
  }), `${t2.protocol}:${t2.topic}@${t2.version}?${e3}`;
}
function Ra(t2, e3, n6) {
  return `${t2}?wc_ev=${n6}&topic=${e3}`;
}
var $a = Object.defineProperty;
var Ta = Object.defineProperties;
var Ca = Object.getOwnPropertyDescriptors;
var ls = Object.getOwnPropertySymbols;
var ja = Object.prototype.hasOwnProperty;
var La = Object.prototype.propertyIsEnumerable;
var ds = (t2, e3, n6) => e3 in t2 ? $a(t2, e3, { enumerable: true, configurable: true, writable: true, value: n6 }) : t2[e3] = n6;
var ka = (t2, e3) => {
  for (var n6 in e3 || (e3 = {}))
    ja.call(e3, n6) && ds(t2, n6, e3[n6]);
  if (ls)
    for (var n6 of ls(e3))
      La.call(e3, n6) && ds(t2, n6, e3[n6]);
  return t2;
};
var Pa = (t2, e3) => Ta(t2, Ca(e3));
function Gt2(t2) {
  const e3 = [];
  return t2.forEach((n6) => {
    const [r4, o6] = n6.split(":");
    e3.push(`${r4}:${o6}`);
  }), e3;
}
function hs(t2) {
  const e3 = [];
  return Object.values(t2).forEach((n6) => {
    e3.push(...Gt2(n6.accounts));
  }), e3;
}
function ps(t2, e3) {
  const n6 = [];
  return Object.values(t2).forEach((r4) => {
    Gt2(r4.accounts).includes(e3) && n6.push(...r4.methods);
  }), n6;
}
function gs(t2, e3) {
  const n6 = [];
  return Object.values(t2).forEach((r4) => {
    Gt2(r4.accounts).includes(e3) && n6.push(...r4.events);
  }), n6;
}
function Gn2(t2) {
  return t2.includes(":");
}
function bs(t2) {
  return Gn2(t2) ? t2.split(":")[0] : t2;
}
function xe2(t2) {
  var e3, n6, r4;
  const o6 = {};
  if (!Ye2(t2))
    return o6;
  for (const [s4, i6] of Object.entries(t2)) {
    const c8 = Gn2(s4) ? [s4] : i6.chains, f11 = i6.methods || [], u4 = i6.events || [], a4 = bs(s4);
    o6[a4] = Pa(ka({}, o6[a4]), { chains: ut2(c8, (e3 = o6[a4]) == null ? void 0 : e3.chains), methods: ut2(f11, (n6 = o6[a4]) == null ? void 0 : n6.methods), events: ut2(u4, (r4 = o6[a4]) == null ? void 0 : r4.events) });
  }
  return o6;
}
function ys(t2) {
  const e3 = {};
  return t2 == null ? void 0 : t2.forEach((n6) => {
    var r4;
    const [o6, s4] = n6.split(":");
    e3[o6] || (e3[o6] = { accounts: [], chains: [], events: [], methods: [] }), e3[o6].accounts.push(n6), (r4 = e3[o6].chains) == null || r4.push(`${o6}:${s4}`);
  }), e3;
}
function Va(t2, e3) {
  e3 = e3.map((r4) => r4.replace("did:pkh:", ""));
  const n6 = ys(e3);
  for (const [r4, o6] of Object.entries(n6))
    o6.methods ? o6.methods = ut2(o6.methods, t2) : o6.methods = t2, o6.events = ["chainChanged", "accountsChanged"];
  return n6;
}
function Ma(t2, e3) {
  var n6, r4, o6, s4, i6, c8;
  const f11 = xe2(t2), u4 = xe2(e3), a4 = {}, l8 = Object.keys(f11).concat(Object.keys(u4));
  for (const d8 of l8)
    a4[d8] = { chains: ut2((n6 = f11[d8]) == null ? void 0 : n6.chains, (r4 = u4[d8]) == null ? void 0 : r4.chains), methods: ut2((o6 = f11[d8]) == null ? void 0 : o6.methods, (s4 = u4[d8]) == null ? void 0 : s4.methods), events: ut2((i6 = f11[d8]) == null ? void 0 : i6.events, (c8 = u4[d8]) == null ? void 0 : c8.events) };
  return a4;
}
var ms = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var ws2 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function Bt2(t2, e3) {
  const { message: n6, code: r4 } = ws2[t2];
  return { message: e3 ? `${n6} ${e3}` : n6, code: r4 };
}
function zt2(t2, e3) {
  const { message: n6, code: r4 } = ms[t2];
  return { message: e3 ? `${n6} ${e3}` : n6, code: r4 };
}
function Ee2(t2, e3) {
  return Array.isArray(t2) ? typeof e3 < "u" && t2.length ? t2.every(e3) : true : false;
}
function Ye2(t2) {
  return Object.getPrototypeOf(t2) === Object.prototype && Object.keys(t2).length;
}
function Dt2(t2) {
  return typeof t2 > "u";
}
function ft2(t2, e3) {
  return e3 && Dt2(t2) ? true : typeof t2 == "string" && !!t2.trim().length;
}
function We2(t2, e3) {
  return e3 && Dt2(t2) ? true : typeof t2 == "number" && !isNaN(t2);
}
function Ka(t2, e3) {
  const { requiredNamespaces: n6 } = e3, r4 = Object.keys(t2.namespaces), o6 = Object.keys(n6);
  let s4 = true;
  return It2(o6, r4) ? (r4.forEach((i6) => {
    const { accounts: c8, methods: f11, events: u4 } = t2.namespaces[i6], a4 = Gt2(c8), l8 = n6[i6];
    (!It2(Ie2(i6, l8), a4) || !It2(l8.methods, f11) || !It2(l8.events, u4)) && (s4 = false);
  }), s4) : false;
}
function Be2(t2) {
  return ft2(t2, false) && t2.includes(":") ? t2.split(":").length === 2 : false;
}
function vs(t2) {
  if (ft2(t2, false) && t2.includes(":")) {
    const e3 = t2.split(":");
    if (e3.length === 3) {
      const n6 = e3[0] + ":" + e3[1];
      return !!e3[2] && Be2(n6);
    }
  }
  return false;
}
function qa(t2) {
  function e3(n6) {
    try {
      return typeof new URL(n6) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (ft2(t2, false)) {
      if (e3(t2))
        return true;
      const n6 = cn(t2);
      return e3(n6);
    }
  } catch {
  }
  return false;
}
function Fa(t2) {
  var e3;
  return (e3 = t2 == null ? void 0 : t2.proposer) == null ? void 0 : e3.publicKey;
}
function Za(t2) {
  return t2 == null ? void 0 : t2.topic;
}
function Ga(t2, e3) {
  let n6 = null;
  return ft2(t2 == null ? void 0 : t2.publicKey, false) || (n6 = Bt2("MISSING_OR_INVALID", `${e3} controller public key should be a string`)), n6;
}
function zn2(t2) {
  let e3 = true;
  return Ee2(t2) ? t2.length && (e3 = t2.every((n6) => ft2(n6, false))) : e3 = false, e3;
}
function xs(t2, e3, n6) {
  let r4 = null;
  return Ee2(e3) && e3.length ? e3.forEach((o6) => {
    r4 || Be2(o6) || (r4 = zt2("UNSUPPORTED_CHAINS", `${n6}, chain ${o6} should be a string and conform to "namespace:chainId" format`));
  }) : Be2(t2) || (r4 = zt2("UNSUPPORTED_CHAINS", `${n6}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r4;
}
function Es(t2, e3, n6) {
  let r4 = null;
  return Object.entries(t2).forEach(([o6, s4]) => {
    if (r4)
      return;
    const i6 = xs(o6, Ie2(o6, s4), `${e3} ${n6}`);
    i6 && (r4 = i6);
  }), r4;
}
function Bs(t2, e3) {
  let n6 = null;
  return Ee2(t2) ? t2.forEach((r4) => {
    n6 || vs(r4) || (n6 = zt2("UNSUPPORTED_ACCOUNTS", `${e3}, account ${r4} should be a string and conform to "namespace:chainId:address" format`));
  }) : n6 = zt2("UNSUPPORTED_ACCOUNTS", `${e3}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n6;
}
function As(t2, e3) {
  let n6 = null;
  return Object.values(t2).forEach((r4) => {
    if (n6)
      return;
    const o6 = Bs(r4 == null ? void 0 : r4.accounts, `${e3} namespace`);
    o6 && (n6 = o6);
  }), n6;
}
function Is(t2, e3) {
  let n6 = null;
  return zn2(t2 == null ? void 0 : t2.methods) ? zn2(t2 == null ? void 0 : t2.events) || (n6 = zt2("UNSUPPORTED_EVENTS", `${e3}, events should be an array of strings or empty array for no events`)) : n6 = zt2("UNSUPPORTED_METHODS", `${e3}, methods should be an array of strings or empty array for no methods`), n6;
}
function Yn2(t2, e3) {
  let n6 = null;
  return Object.values(t2).forEach((r4) => {
    if (n6)
      return;
    const o6 = Is(r4, `${e3}, namespace`);
    o6 && (n6 = o6);
  }), n6;
}
function za(t2, e3, n6) {
  let r4 = null;
  if (t2 && Ye2(t2)) {
    const o6 = Yn2(t2, e3);
    o6 && (r4 = o6);
    const s4 = Es(t2, e3, n6);
    s4 && (r4 = s4);
  } else
    r4 = Bt2("MISSING_OR_INVALID", `${e3}, ${n6} should be an object with data`);
  return r4;
}
function Ss(t2, e3) {
  let n6 = null;
  if (t2 && Ye2(t2)) {
    const r4 = Yn2(t2, e3);
    r4 && (n6 = r4);
    const o6 = As(t2, e3);
    o6 && (n6 = o6);
  } else
    n6 = Bt2("MISSING_OR_INVALID", `${e3}, namespaces should be an object with data`);
  return n6;
}
function Os(t2) {
  return ft2(t2.protocol, true);
}
function Ya(t2, e3) {
  let n6 = false;
  return e3 && !t2 ? n6 = true : t2 && Ee2(t2) && t2.length && t2.forEach((r4) => {
    n6 = Os(r4);
  }), n6;
}
function Wa(t2) {
  return typeof t2 == "number";
}
function Xa(t2) {
  return typeof t2 < "u" && typeof t2 !== null;
}
function Ja(t2) {
  return !(!t2 || typeof t2 != "object" || !t2.code || !We2(t2.code, false) || !t2.message || !ft2(t2.message, false));
}
function Qa(t2) {
  return !(Dt2(t2) || !ft2(t2.method, false));
}
function tu(t2) {
  return !(Dt2(t2) || Dt2(t2.result) && Dt2(t2.error) || !We2(t2.id, false) || !ft2(t2.jsonrpc, false));
}
function eu(t2) {
  return !(Dt2(t2) || !ft2(t2.name, false));
}
function nu(t2, e3) {
  return !(!Be2(e3) || !hs(t2).includes(e3));
}
function ru(t2, e3, n6) {
  return ft2(n6, false) ? ps(t2, e3).includes(n6) : false;
}
function ou(t2, e3, n6) {
  return ft2(n6, false) ? gs(t2, e3).includes(n6) : false;
}
function Ns(t2, e3, n6) {
  let r4 = null;
  const o6 = su(t2), s4 = iu(e3), i6 = Object.keys(o6), c8 = Object.keys(s4), f11 = Us(Object.keys(t2)), u4 = Us(Object.keys(e3)), a4 = f11.filter((l8) => !u4.includes(l8));
  return a4.length && (r4 = Bt2("NON_CONFORMING_NAMESPACES", `${n6} namespaces keys don't satisfy requiredNamespaces.
      Required: ${a4.toString()}
      Received: ${Object.keys(e3).toString()}`)), It2(i6, c8) || (r4 = Bt2("NON_CONFORMING_NAMESPACES", `${n6} namespaces chains don't satisfy required namespaces.
      Required: ${i6.toString()}
      Approved: ${c8.toString()}`)), Object.keys(e3).forEach((l8) => {
    if (!l8.includes(":") || r4)
      return;
    const d8 = Gt2(e3[l8].accounts);
    d8.includes(l8) || (r4 = Bt2("NON_CONFORMING_NAMESPACES", `${n6} namespaces accounts don't satisfy namespace accounts for ${l8}
        Required: ${l8}
        Approved: ${d8.toString()}`));
  }), i6.forEach((l8) => {
    r4 || (It2(o6[l8].methods, s4[l8].methods) ? It2(o6[l8].events, s4[l8].events) || (r4 = Bt2("NON_CONFORMING_NAMESPACES", `${n6} namespaces events don't satisfy namespace events for ${l8}`)) : r4 = Bt2("NON_CONFORMING_NAMESPACES", `${n6} namespaces methods don't satisfy namespace methods for ${l8}`));
  }), r4;
}
function su(t2) {
  const e3 = {};
  return Object.keys(t2).forEach((n6) => {
    var r4;
    n6.includes(":") ? e3[n6] = t2[n6] : (r4 = t2[n6].chains) == null || r4.forEach((o6) => {
      e3[o6] = { methods: t2[n6].methods, events: t2[n6].events };
    });
  }), e3;
}
function Us(t2) {
  return [...new Set(t2.map((e3) => e3.includes(":") ? e3.split(":")[0] : e3))];
}
function iu(t2) {
  const e3 = {};
  return Object.keys(t2).forEach((n6) => {
    if (n6.includes(":"))
      e3[n6] = t2[n6];
    else {
      const r4 = Gt2(t2[n6].accounts);
      r4 == null ? void 0 : r4.forEach((o6) => {
        e3[o6] = { accounts: t2[n6].accounts.filter((s4) => s4.includes(`${o6}:`)), methods: t2[n6].methods, events: t2[n6].events };
      });
    }
  }), e3;
}
function cu(t2, e3) {
  return We2(t2, false) && t2 <= e3.max && t2 >= e3.min;
}
function fu() {
  const t2 = Vt2();
  return new Promise((e3) => {
    switch (t2) {
      case et.browser:
        e3(_s());
        break;
      case et.reactNative:
        e3(Rs());
        break;
      case et.node:
        e3($s());
        break;
      default:
        e3(true);
    }
  });
}
function _s() {
  return Wt2() && (navigator == null ? void 0 : navigator.onLine);
}
async function Rs() {
  if (At() && typeof global < "u" && global != null && global.NetInfo) {
    const t2 = await (global == null ? void 0 : global.NetInfo.fetch());
    return t2 == null ? void 0 : t2.isConnected;
  }
  return true;
}
function $s() {
  return true;
}
function au(t2) {
  switch (Vt2()) {
    case et.browser:
      Ts(t2);
      break;
    case et.reactNative:
      Cs(t2);
      break;
    case et.node:
      break;
  }
}
function Ts(t2) {
  !At() && Wt2() && (window.addEventListener("online", () => t2(true)), window.addEventListener("offline", () => t2(false)));
}
function Cs(t2) {
  At() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((e3) => t2(e3 == null ? void 0 : e3.isConnected)));
}
function uu() {
  var t2;
  return Wt2() && (0, import_window_getters.getDocument)() ? ((t2 = (0, import_window_getters.getDocument)()) == null ? void 0 : t2.visibilityState) === "visible" : true;
}
var Wn2 = {};
var lu = class {
  static get(e3) {
    return Wn2[e3];
  }
  static set(e3, n6) {
    Wn2[e3] = n6;
  }
  static delete(e3) {
    delete Wn2[e3];
  }
};
function js(t2) {
  const e3 = esm_default2.decode(t2);
  if (e3.length < 33)
    throw new Error("Too short to contain a public key");
  return e3.slice(1, 33);
}
function Ls({ publicKey: t2, signature: e3, payload: n6 }) {
  var r4;
  const o6 = Xn2(n6.method), s4 = 128 | parseInt(((r4 = n6.version) == null ? void 0 : r4.toString()) || "4"), i6 = hu(n6.address), c8 = n6.era === "00" ? new Uint8Array([0]) : Xn2(n6.era);
  if (c8.length !== 1 && c8.length !== 2)
    throw new Error("Invalid era length");
  const f11 = parseInt(n6.nonce, 16), u4 = new Uint8Array([f11 & 255, f11 >> 8 & 255]), a4 = BigInt(`0x${du(n6.tip)}`), l8 = gu(a4), d8 = new Uint8Array([0, ...t2, i6, ...e3, ...c8, ...u4, ...l8, ...o6]), h6 = pu(d8.length + 1);
  return new Uint8Array([...h6, s4, ...d8]);
}
function ks(t2) {
  const e3 = Xn2(t2), n6 = (0, import_blakejs.blake2b)(e3, void 0, 32);
  return "0x" + Buffer.from(n6).toString("hex");
}
function Xn2(t2) {
  return new Uint8Array(t2.replace(/^0x/, "").match(/.{1,2}/g).map((e3) => parseInt(e3, 16)));
}
function du(t2) {
  return t2.startsWith("0x") ? t2.slice(2) : t2;
}
function hu(t2) {
  const e3 = esm_default2.decode(t2)[0];
  return e3 === 42 ? 0 : e3 === 60 ? 2 : 1;
}
function pu(t2) {
  if (t2 < 64)
    return new Uint8Array([t2 << 2]);
  if (t2 < 16384) {
    const e3 = t2 << 2 | 1;
    return new Uint8Array([e3 & 255, e3 >> 8 & 255]);
  } else if (t2 < 1 << 30) {
    const e3 = t2 << 2 | 2;
    return new Uint8Array([e3 & 255, e3 >> 8 & 255, e3 >> 16 & 255, e3 >> 24 & 255]);
  } else
    throw new Error("Compact encoding > 2^30 not supported");
}
function gu(t2) {
  if (t2 < BigInt(1) << BigInt(6))
    return new Uint8Array([Number(t2 << BigInt(2))]);
  if (t2 < BigInt(1) << BigInt(14)) {
    const e3 = t2 << BigInt(2) | BigInt(1);
    return new Uint8Array([Number(e3 & BigInt(255)), Number(e3 >> BigInt(8) & BigInt(255))]);
  } else if (t2 < BigInt(1) << BigInt(30)) {
    const e3 = t2 << BigInt(2) | BigInt(2);
    return new Uint8Array([Number(e3 & BigInt(255)), Number(e3 >> BigInt(8) & BigInt(255)), Number(e3 >> BigInt(16) & BigInt(255)), Number(e3 >> BigInt(24) & BigInt(255))]);
  } else
    throw new Error("BigInt compact encoding not supported > 2^30");
}
function bu(t2) {
  const e3 = Uint8Array.from(Buffer.from(t2.signature, "hex")), n6 = js(t2.transaction.address), r4 = Ls({ publicKey: n6, signature: e3, payload: t2.transaction }), o6 = Buffer.from(r4).toString("hex");
  return ks(o6);
}

// node_modules/preact/dist/preact.module.js
var n;
var l;
var u;
var t;
var i;
var r;
var o;
var e;
var f3;
var c;
var s;
var a;
var h;
var p = {};
var v = [];
var y = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
var w = Array.isArray;
function d(n6, l8) {
  for (var u4 in l8)
    n6[u4] = l8[u4];
  return n6;
}
function g(n6) {
  n6 && n6.parentNode && n6.parentNode.removeChild(n6);
}
function _2(l8, u4, t2) {
  var i6, r4, o6, e3 = {};
  for (o6 in u4)
    "key" == o6 ? i6 = u4[o6] : "ref" == o6 ? r4 = u4[o6] : e3[o6] = u4[o6];
  if (arguments.length > 2 && (e3.children = arguments.length > 3 ? n.call(arguments, 2) : t2), "function" == typeof l8 && null != l8.defaultProps)
    for (o6 in l8.defaultProps)
      void 0 === e3[o6] && (e3[o6] = l8.defaultProps[o6]);
  return m(l8, e3, i6, r4, null);
}
function m(n6, t2, i6, r4, o6) {
  var e3 = { type: n6, props: t2, key: i6, ref: r4, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: null == o6 ? ++u : o6, __i: -1, __u: 0 };
  return null == o6 && null != l.vnode && l.vnode(e3), e3;
}
function k2(n6) {
  return n6.children;
}
function x2(n6, l8) {
  this.props = n6, this.context = l8;
}
function S2(n6, l8) {
  if (null == l8)
    return n6.__ ? S2(n6.__, n6.__i + 1) : null;
  for (var u4; l8 < n6.__k.length; l8++)
    if (null != (u4 = n6.__k[l8]) && null != u4.__e)
      return u4.__e;
  return "function" == typeof n6.type ? S2(n6) : null;
}
function C2(n6) {
  var l8, u4;
  if (null != (n6 = n6.__) && null != n6.__c) {
    for (n6.__e = n6.__c.base = null, l8 = 0; l8 < n6.__k.length; l8++)
      if (null != (u4 = n6.__k[l8]) && null != u4.__e) {
        n6.__e = n6.__c.base = u4.__e;
        break;
      }
    return C2(n6);
  }
}
function M2(n6) {
  (!n6.__d && (n6.__d = true) && i.push(n6) && !$.__r++ || r != l.debounceRendering) && ((r = l.debounceRendering) || o)($);
}
function $() {
  for (var n6, u4, t2, r4, o6, f11, c8, s4 = 1; i.length; )
    i.length > s4 && i.sort(e), n6 = i.shift(), s4 = i.length, n6.__d && (t2 = void 0, r4 = void 0, o6 = (r4 = (u4 = n6).__v).__e, f11 = [], c8 = [], u4.__P && ((t2 = d({}, r4)).__v = r4.__v + 1, l.vnode && l.vnode(t2), O(u4.__P, t2, r4, u4.__n, u4.__P.namespaceURI, 32 & r4.__u ? [o6] : null, f11, null == o6 ? S2(r4) : o6, !!(32 & r4.__u), c8), t2.__v = r4.__v, t2.__.__k[t2.__i] = t2, N10(f11, t2, c8), r4.__e = r4.__ = null, t2.__e != o6 && C2(t2)));
  $.__r = 0;
}
function I(n6, l8, u4, t2, i6, r4, o6, e3, f11, c8, s4) {
  var a4, h6, y6, w6, d8, g7, _6, m6 = t2 && t2.__k || v, b5 = l8.length;
  for (f11 = P2(u4, l8, m6, f11, b5), a4 = 0; a4 < b5; a4++)
    null != (y6 = u4.__k[a4]) && (h6 = -1 == y6.__i ? p : m6[y6.__i] || p, y6.__i = a4, g7 = O(n6, y6, h6, i6, r4, o6, e3, f11, c8, s4), w6 = y6.__e, y6.ref && h6.ref != y6.ref && (h6.ref && B(h6.ref, null, y6), s4.push(y6.ref, y6.__c || w6, y6)), null == d8 && null != w6 && (d8 = w6), (_6 = !!(4 & y6.__u)) || h6.__k === y6.__k ? f11 = A(y6, f11, n6, _6) : "function" == typeof y6.type && void 0 !== g7 ? f11 = g7 : w6 && (f11 = w6.nextSibling), y6.__u &= -7);
  return u4.__e = d8, f11;
}
function P2(n6, l8, u4, t2, i6) {
  var r4, o6, e3, f11, c8, s4 = u4.length, a4 = s4, h6 = 0;
  for (n6.__k = new Array(i6), r4 = 0; r4 < i6; r4++)
    null != (o6 = l8[r4]) && "boolean" != typeof o6 && "function" != typeof o6 ? (f11 = r4 + h6, (o6 = n6.__k[r4] = "string" == typeof o6 || "number" == typeof o6 || "bigint" == typeof o6 || o6.constructor == String ? m(null, o6, null, null, null) : w(o6) ? m(k2, { children: o6 }, null, null, null) : null == o6.constructor && o6.__b > 0 ? m(o6.type, o6.props, o6.key, o6.ref ? o6.ref : null, o6.__v) : o6).__ = n6, o6.__b = n6.__b + 1, e3 = null, -1 != (c8 = o6.__i = L(o6, u4, f11, a4)) && (a4--, (e3 = u4[c8]) && (e3.__u |= 2)), null == e3 || null == e3.__v ? (-1 == c8 && (i6 > s4 ? h6-- : i6 < s4 && h6++), "function" != typeof o6.type && (o6.__u |= 4)) : c8 != f11 && (c8 == f11 - 1 ? h6-- : c8 == f11 + 1 ? h6++ : (c8 > f11 ? h6-- : h6++, o6.__u |= 4))) : n6.__k[r4] = null;
  if (a4)
    for (r4 = 0; r4 < s4; r4++)
      null != (e3 = u4[r4]) && 0 == (2 & e3.__u) && (e3.__e == t2 && (t2 = S2(e3)), D(e3, e3));
  return t2;
}
function A(n6, l8, u4, t2) {
  var i6, r4;
  if ("function" == typeof n6.type) {
    for (i6 = n6.__k, r4 = 0; i6 && r4 < i6.length; r4++)
      i6[r4] && (i6[r4].__ = n6, l8 = A(i6[r4], l8, u4, t2));
    return l8;
  }
  n6.__e != l8 && (t2 && (l8 && n6.type && !l8.parentNode && (l8 = S2(n6)), u4.insertBefore(n6.__e, l8 || null)), l8 = n6.__e);
  do {
    l8 = l8 && l8.nextSibling;
  } while (null != l8 && 8 == l8.nodeType);
  return l8;
}
function L(n6, l8, u4, t2) {
  var i6, r4, o6, e3 = n6.key, f11 = n6.type, c8 = l8[u4], s4 = null != c8 && 0 == (2 & c8.__u);
  if (null === c8 && null == n6.key || s4 && e3 == c8.key && f11 == c8.type)
    return u4;
  if (t2 > (s4 ? 1 : 0)) {
    for (i6 = u4 - 1, r4 = u4 + 1; i6 >= 0 || r4 < l8.length; )
      if (null != (c8 = l8[o6 = i6 >= 0 ? i6-- : r4++]) && 0 == (2 & c8.__u) && e3 == c8.key && f11 == c8.type)
        return o6;
  }
  return -1;
}
function T2(n6, l8, u4) {
  "-" == l8[0] ? n6.setProperty(l8, null == u4 ? "" : u4) : n6[l8] = null == u4 ? "" : "number" != typeof u4 || y.test(l8) ? u4 : u4 + "px";
}
function j2(n6, l8, u4, t2, i6) {
  var r4, o6;
  n:
    if ("style" == l8)
      if ("string" == typeof u4)
        n6.style.cssText = u4;
      else {
        if ("string" == typeof t2 && (n6.style.cssText = t2 = ""), t2)
          for (l8 in t2)
            u4 && l8 in u4 || T2(n6.style, l8, "");
        if (u4)
          for (l8 in u4)
            t2 && u4[l8] == t2[l8] || T2(n6.style, l8, u4[l8]);
      }
    else if ("o" == l8[0] && "n" == l8[1])
      r4 = l8 != (l8 = l8.replace(f3, "$1")), o6 = l8.toLowerCase(), l8 = o6 in n6 || "onFocusOut" == l8 || "onFocusIn" == l8 ? o6.slice(2) : l8.slice(2), n6.l || (n6.l = {}), n6.l[l8 + r4] = u4, u4 ? t2 ? u4.u = t2.u : (u4.u = c, n6.addEventListener(l8, r4 ? a : s, r4)) : n6.removeEventListener(l8, r4 ? a : s, r4);
    else {
      if ("http://www.w3.org/2000/svg" == i6)
        l8 = l8.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
      else if ("width" != l8 && "height" != l8 && "href" != l8 && "list" != l8 && "form" != l8 && "tabIndex" != l8 && "download" != l8 && "rowSpan" != l8 && "colSpan" != l8 && "role" != l8 && "popover" != l8 && l8 in n6)
        try {
          n6[l8] = null == u4 ? "" : u4;
          break n;
        } catch (n7) {
        }
      "function" == typeof u4 || (null == u4 || false === u4 && "-" != l8[4] ? n6.removeAttribute(l8) : n6.setAttribute(l8, "popover" == l8 && 1 == u4 ? "" : u4));
    }
}
function F(n6) {
  return function(u4) {
    if (this.l) {
      var t2 = this.l[u4.type + n6];
      if (null == u4.t)
        u4.t = c++;
      else if (u4.t < t2.u)
        return;
      return t2(l.event ? l.event(u4) : u4);
    }
  };
}
function O(n6, u4, t2, i6, r4, o6, e3, f11, c8, s4) {
  var a4, h6, p5, v11, y6, _6, m6, b5, S6, C7, M7, $4, P7, A5, H3, L5, T7, j6 = u4.type;
  if (null != u4.constructor)
    return null;
  128 & t2.__u && (c8 = !!(32 & t2.__u), o6 = [f11 = u4.__e = t2.__e]), (a4 = l.__b) && a4(u4);
  n:
    if ("function" == typeof j6)
      try {
        if (b5 = u4.props, S6 = "prototype" in j6 && j6.prototype.render, C7 = (a4 = j6.contextType) && i6[a4.__c], M7 = a4 ? C7 ? C7.props.value : a4.__ : i6, t2.__c ? m6 = (h6 = u4.__c = t2.__c).__ = h6.__E : (S6 ? u4.__c = h6 = new j6(b5, M7) : (u4.__c = h6 = new x2(b5, M7), h6.constructor = j6, h6.render = E), C7 && C7.sub(h6), h6.props = b5, h6.state || (h6.state = {}), h6.context = M7, h6.__n = i6, p5 = h6.__d = true, h6.__h = [], h6._sb = []), S6 && null == h6.__s && (h6.__s = h6.state), S6 && null != j6.getDerivedStateFromProps && (h6.__s == h6.state && (h6.__s = d({}, h6.__s)), d(h6.__s, j6.getDerivedStateFromProps(b5, h6.__s))), v11 = h6.props, y6 = h6.state, h6.__v = u4, p5)
          S6 && null == j6.getDerivedStateFromProps && null != h6.componentWillMount && h6.componentWillMount(), S6 && null != h6.componentDidMount && h6.__h.push(h6.componentDidMount);
        else {
          if (S6 && null == j6.getDerivedStateFromProps && b5 !== v11 && null != h6.componentWillReceiveProps && h6.componentWillReceiveProps(b5, M7), !h6.__e && null != h6.shouldComponentUpdate && false === h6.shouldComponentUpdate(b5, h6.__s, M7) || u4.__v == t2.__v) {
            for (u4.__v != t2.__v && (h6.props = b5, h6.state = h6.__s, h6.__d = false), u4.__e = t2.__e, u4.__k = t2.__k, u4.__k.some(function(n7) {
              n7 && (n7.__ = u4);
            }), $4 = 0; $4 < h6._sb.length; $4++)
              h6.__h.push(h6._sb[$4]);
            h6._sb = [], h6.__h.length && e3.push(h6);
            break n;
          }
          null != h6.componentWillUpdate && h6.componentWillUpdate(b5, h6.__s, M7), S6 && null != h6.componentDidUpdate && h6.__h.push(function() {
            h6.componentDidUpdate(v11, y6, _6);
          });
        }
        if (h6.context = M7, h6.props = b5, h6.__P = n6, h6.__e = false, P7 = l.__r, A5 = 0, S6) {
          for (h6.state = h6.__s, h6.__d = false, P7 && P7(u4), a4 = h6.render(h6.props, h6.state, h6.context), H3 = 0; H3 < h6._sb.length; H3++)
            h6.__h.push(h6._sb[H3]);
          h6._sb = [];
        } else
          do {
            h6.__d = false, P7 && P7(u4), a4 = h6.render(h6.props, h6.state, h6.context), h6.state = h6.__s;
          } while (h6.__d && ++A5 < 25);
        h6.state = h6.__s, null != h6.getChildContext && (i6 = d(d({}, i6), h6.getChildContext())), S6 && !p5 && null != h6.getSnapshotBeforeUpdate && (_6 = h6.getSnapshotBeforeUpdate(v11, y6)), L5 = a4, null != a4 && a4.type === k2 && null == a4.key && (L5 = V(a4.props.children)), f11 = I(n6, w(L5) ? L5 : [L5], u4, t2, i6, r4, o6, e3, f11, c8, s4), h6.base = u4.__e, u4.__u &= -161, h6.__h.length && e3.push(h6), m6 && (h6.__E = h6.__ = null);
      } catch (n7) {
        if (u4.__v = null, c8 || null != o6)
          if (n7.then) {
            for (u4.__u |= c8 ? 160 : 128; f11 && 8 == f11.nodeType && f11.nextSibling; )
              f11 = f11.nextSibling;
            o6[o6.indexOf(f11)] = null, u4.__e = f11;
          } else {
            for (T7 = o6.length; T7--; )
              g(o6[T7]);
            z2(u4);
          }
        else
          u4.__e = t2.__e, u4.__k = t2.__k, n7.then || z2(u4);
        l.__e(n7, u4, t2);
      }
    else
      null == o6 && u4.__v == t2.__v ? (u4.__k = t2.__k, u4.__e = t2.__e) : f11 = u4.__e = q(t2.__e, u4, t2, i6, r4, o6, e3, c8, s4);
  return (a4 = l.diffed) && a4(u4), 128 & u4.__u ? void 0 : f11;
}
function z2(n6) {
  n6 && n6.__c && (n6.__c.__e = true), n6 && n6.__k && n6.__k.forEach(z2);
}
function N10(n6, u4, t2) {
  for (var i6 = 0; i6 < t2.length; i6++)
    B(t2[i6], t2[++i6], t2[++i6]);
  l.__c && l.__c(u4, n6), n6.some(function(u5) {
    try {
      n6 = u5.__h, u5.__h = [], n6.some(function(n7) {
        n7.call(u5);
      });
    } catch (n7) {
      l.__e(n7, u5.__v);
    }
  });
}
function V(n6) {
  return "object" != typeof n6 || null == n6 || n6.__b && n6.__b > 0 ? n6 : w(n6) ? n6.map(V) : d({}, n6);
}
function q(u4, t2, i6, r4, o6, e3, f11, c8, s4) {
  var a4, h6, v11, y6, d8, _6, m6, b5 = i6.props, k6 = t2.props, x7 = t2.type;
  if ("svg" == x7 ? o6 = "http://www.w3.org/2000/svg" : "math" == x7 ? o6 = "http://www.w3.org/1998/Math/MathML" : o6 || (o6 = "http://www.w3.org/1999/xhtml"), null != e3) {
    for (a4 = 0; a4 < e3.length; a4++)
      if ((d8 = e3[a4]) && "setAttribute" in d8 == !!x7 && (x7 ? d8.localName == x7 : 3 == d8.nodeType)) {
        u4 = d8, e3[a4] = null;
        break;
      }
  }
  if (null == u4) {
    if (null == x7)
      return document.createTextNode(k6);
    u4 = document.createElementNS(o6, x7, k6.is && k6), c8 && (l.__m && l.__m(t2, e3), c8 = false), e3 = null;
  }
  if (null == x7)
    b5 === k6 || c8 && u4.data == k6 || (u4.data = k6);
  else {
    if (e3 = e3 && n.call(u4.childNodes), b5 = i6.props || p, !c8 && null != e3)
      for (b5 = {}, a4 = 0; a4 < u4.attributes.length; a4++)
        b5[(d8 = u4.attributes[a4]).name] = d8.value;
    for (a4 in b5)
      if (d8 = b5[a4], "children" == a4)
        ;
      else if ("dangerouslySetInnerHTML" == a4)
        v11 = d8;
      else if (!(a4 in k6)) {
        if ("value" == a4 && "defaultValue" in k6 || "checked" == a4 && "defaultChecked" in k6)
          continue;
        j2(u4, a4, null, d8, o6);
      }
    for (a4 in k6)
      d8 = k6[a4], "children" == a4 ? y6 = d8 : "dangerouslySetInnerHTML" == a4 ? h6 = d8 : "value" == a4 ? _6 = d8 : "checked" == a4 ? m6 = d8 : c8 && "function" != typeof d8 || b5[a4] === d8 || j2(u4, a4, d8, b5[a4], o6);
    if (h6)
      c8 || v11 && (h6.__html == v11.__html || h6.__html == u4.innerHTML) || (u4.innerHTML = h6.__html), t2.__k = [];
    else if (v11 && (u4.innerHTML = ""), I("template" == t2.type ? u4.content : u4, w(y6) ? y6 : [y6], t2, i6, r4, "foreignObject" == x7 ? "http://www.w3.org/1999/xhtml" : o6, e3, f11, e3 ? e3[0] : i6.__k && S2(i6, 0), c8, s4), null != e3)
      for (a4 = e3.length; a4--; )
        g(e3[a4]);
    c8 || (a4 = "value", "progress" == x7 && null == _6 ? u4.removeAttribute("value") : null != _6 && (_6 !== u4[a4] || "progress" == x7 && !_6 || "option" == x7 && _6 != b5[a4]) && j2(u4, a4, _6, b5[a4], o6), a4 = "checked", null != m6 && m6 != u4[a4] && j2(u4, a4, m6, b5[a4], o6));
  }
  return u4;
}
function B(n6, u4, t2) {
  try {
    if ("function" == typeof n6) {
      var i6 = "function" == typeof n6.__u;
      i6 && n6.__u(), i6 && null == u4 || (n6.__u = n6(u4));
    } else
      n6.current = u4;
  } catch (n7) {
    l.__e(n7, t2);
  }
}
function D(n6, u4, t2) {
  var i6, r4;
  if (l.unmount && l.unmount(n6), (i6 = n6.ref) && (i6.current && i6.current != n6.__e || B(i6, null, u4)), null != (i6 = n6.__c)) {
    if (i6.componentWillUnmount)
      try {
        i6.componentWillUnmount();
      } catch (n7) {
        l.__e(n7, u4);
      }
    i6.base = i6.__P = null;
  }
  if (i6 = n6.__k)
    for (r4 = 0; r4 < i6.length; r4++)
      i6[r4] && D(i6[r4], u4, t2 || "function" != typeof n6.type);
  t2 || g(n6.__e), n6.__c = n6.__ = n6.__e = void 0;
}
function E(n6, l8, u4) {
  return this.constructor(n6, u4);
}
function G2(u4, t2, i6) {
  var r4, o6, e3, f11;
  t2 == document && (t2 = document.documentElement), l.__ && l.__(u4, t2), o6 = (r4 = "function" == typeof i6) ? null : i6 && i6.__k || t2.__k, e3 = [], f11 = [], O(t2, u4 = (!r4 && i6 || t2).__k = _2(k2, null, [u4]), o6 || p, p, t2.namespaceURI, !r4 && i6 ? [i6] : o6 ? null : t2.firstChild ? n.call(t2.childNodes) : null, e3, !r4 && i6 ? i6 : o6 ? o6.__e : t2.firstChild, r4, f11), N10(e3, u4, f11);
}
n = v.slice, l = { __e: function(n6, l8, u4, t2) {
  for (var i6, r4, o6; l8 = l8.__; )
    if ((i6 = l8.__c) && !i6.__)
      try {
        if ((r4 = i6.constructor) && null != r4.getDerivedStateFromError && (i6.setState(r4.getDerivedStateFromError(n6)), o6 = i6.__d), null != i6.componentDidCatch && (i6.componentDidCatch(n6, t2 || {}), o6 = i6.__d), o6)
          return i6.__E = i6;
      } catch (l9) {
        n6 = l9;
      }
  throw n6;
} }, u = 0, t = function(n6) {
  return null != n6 && null == n6.constructor;
}, x2.prototype.setState = function(n6, l8) {
  var u4;
  u4 = null != this.__s && this.__s != this.state ? this.__s : this.__s = d({}, this.state), "function" == typeof n6 && (n6 = n6(d({}, u4), this.props)), n6 && d(u4, n6), null != n6 && this.__v && (l8 && this._sb.push(l8), M2(this));
}, x2.prototype.forceUpdate = function(n6) {
  this.__v && (this.__e = true, n6 && this.__h.push(n6), M2(this));
}, x2.prototype.render = k2, i = [], o = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, e = function(n6, l8) {
  return n6.__v.__b - l8.__v.__b;
}, $.__r = 0, f3 = /(PointerCapture)$|Capture$/i, c = 0, s = F(false), a = F(true), h = 0;

// node_modules/preact/jsx-runtime/dist/jsxRuntime.module.js
var f4 = 0;
var i2 = Array.isArray;
function u2(e3, t2, n6, o6, i6, u4) {
  t2 || (t2 = {});
  var a4, c8, p5 = t2;
  if ("ref" in p5)
    for (c8 in p5 = {}, t2)
      "ref" == c8 ? a4 = t2[c8] : p5[c8] = t2[c8];
  var l8 = { type: e3, props: p5, key: n6, ref: a4, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: --f4, __i: -1, __u: 0, __source: i6, __self: u4 };
  if ("function" == typeof e3 && (a4 = e3.defaultProps))
    for (c8 in a4)
      void 0 === p5[c8] && (p5[c8] = a4[c8]);
  return l.vnode && l.vnode(l8), l8;
}

// node_modules/@walletconnect/core/dist/index.es.js
var import_events9 = __toESM(require_events());

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var import_events3 = __toESM(require_events());
var import_time3 = __toESM(require_cjs());

// node_modules/@walletconnect/events/dist/esm/events.js
var IEvents = class {
};

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var n2 = class extends IEvents {
  constructor(e3) {
    super();
  }
};
var s2 = import_time3.FIVE_SECONDS;
var r2 = { pulse: "heartbeat_pulse" };
var i3 = class _i3 extends n2 {
  constructor(e3) {
    super(e3), this.events = new import_events3.EventEmitter(), this.interval = s2, this.interval = (e3 == null ? void 0 : e3.interval) || s2;
  }
  static async init(e3) {
    const t2 = new _i3(e3);
    return await t2.init(), t2;
  }
  async init() {
    await this.initialize();
  }
  stop() {
    clearInterval(this.intervalRef);
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async initialize() {
    this.intervalRef = setInterval(() => this.pulse(), (0, import_time3.toMiliseconds)(this.interval));
  }
  pulse() {
    this.events.emit(r2.pulse);
  }
};

// node_modules/destr/dist/index.mjs
var suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key);
    return;
  }
  return value;
}
function warnKeyDropped(key) {
  console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  if (value[0] === '"' && value[value.length - 1] === '"' && value.indexOf("\\") === -1) {
    return value.slice(1, -1);
  }
  const _value = value.trim();
  if (_value.length <= 9) {
    switch (_value.toLowerCase()) {
      case "true": {
        return true;
      }
      case "false": {
        return false;
      }
      case "undefined": {
        return void 0;
      }
      case "null": {
        return null;
      }
      case "nan": {
        return Number.NaN;
      }
      case "infinity": {
        return Number.POSITIVE_INFINITY;
      }
      case "-infinity": {
        return Number.NEGATIVE_INFINITY;
      }
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}

// node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.zVDD2mZo.mjs
function wrapToPromise(value) {
  if (!value || typeof value.then !== "function") {
    return Promise.resolve(value);
  }
  return value;
}
function asyncCall(function_, ...arguments_) {
  try {
    return wrapToPromise(function_(...arguments_));
  } catch (error) {
    return Promise.reject(error);
  }
}
function isPrimitive(value) {
  const type = typeof value;
  return value === null || type !== "object" && type !== "function";
}
function isPureObject(value) {
  const proto = Object.getPrototypeOf(value);
  return !proto || proto.isPrototypeOf(Object);
}
function stringify3(value) {
  if (isPrimitive(value)) {
    return String(value);
  }
  if (isPureObject(value) || Array.isArray(value)) {
    return JSON.stringify(value);
  }
  if (typeof value.toJSON === "function") {
    return stringify3(value.toJSON());
  }
  throw new Error("[unstorage] Cannot stringify value!");
}
var BASE64_PREFIX = "base64:";
function serializeRaw(value) {
  if (typeof value === "string") {
    return value;
  }
  return BASE64_PREFIX + base64Encode(value);
}
function deserializeRaw(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (!value.startsWith(BASE64_PREFIX)) {
    return value;
  }
  return base64Decode(value.slice(BASE64_PREFIX.length));
}
function base64Decode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input, "base64");
  }
  return Uint8Array.from(
    globalThis.atob(input),
    (c8) => c8.codePointAt(0)
  );
}
function base64Encode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input).toString("base64");
  }
  return globalThis.btoa(String.fromCodePoint(...input));
}
function normalizeKey(key) {
  var _a2;
  if (!key) {
    return "";
  }
  return ((_a2 = key.split("?")[0]) == null ? void 0 : _a2.replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "")) || "";
}
function joinKeys(...keys2) {
  return normalizeKey(keys2.join(":"));
}
function normalizeBaseKey(base3) {
  base3 = normalizeKey(base3);
  return base3 ? base3 + ":" : "";
}
function filterKeyByDepth(key, depth) {
  if (depth === void 0) {
    return true;
  }
  let substrCount = 0;
  let index3 = key.indexOf(":");
  while (index3 > -1) {
    substrCount++;
    index3 = key.indexOf(":", index3 + 1);
  }
  return substrCount <= depth;
}
function filterKeyByBase(key, base3) {
  if (base3) {
    return key.startsWith(base3) && key[key.length - 1] !== "$";
  }
  return key[key.length - 1] !== "$";
}

// node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs
function defineDriver(factory) {
  return factory;
}
var DRIVER_NAME = "memory";
var memory = defineDriver(() => {
  const data = /* @__PURE__ */ new Map();
  return {
    name: DRIVER_NAME,
    getInstance: () => data,
    hasItem(key) {
      return data.has(key);
    },
    getItem(key) {
      return data.get(key) ?? null;
    },
    getItemRaw(key) {
      return data.get(key) ?? null;
    },
    setItem(key, value) {
      data.set(key, value);
    },
    setItemRaw(key, value) {
      data.set(key, value);
    },
    removeItem(key) {
      data.delete(key);
    },
    getKeys() {
      return [...data.keys()];
    },
    clear() {
      data.clear();
    },
    dispose() {
      data.clear();
    }
  };
});
function createStorage(options = {}) {
  const context = {
    mounts: { "": options.driver || memory() },
    mountpoints: [""],
    watching: false,
    watchListeners: [],
    unwatch: {}
  };
  const getMount = (key) => {
    for (const base3 of context.mountpoints) {
      if (key.startsWith(base3)) {
        return {
          base: base3,
          relativeKey: key.slice(base3.length),
          driver: context.mounts[base3]
        };
      }
    }
    return {
      base: "",
      relativeKey: key,
      driver: context.mounts[""]
    };
  };
  const getMounts = (base3, includeParent) => {
    return context.mountpoints.filter(
      (mountpoint) => mountpoint.startsWith(base3) || includeParent && base3.startsWith(mountpoint)
    ).map((mountpoint) => ({
      relativeBase: base3.length > mountpoint.length ? base3.slice(mountpoint.length) : void 0,
      mountpoint,
      driver: context.mounts[mountpoint]
    }));
  };
  const onChange = (event, key) => {
    if (!context.watching) {
      return;
    }
    key = normalizeKey(key);
    for (const listener of context.watchListeners) {
      listener(event, key);
    }
  };
  const startWatch = async () => {
    if (context.watching) {
      return;
    }
    context.watching = true;
    for (const mountpoint in context.mounts) {
      context.unwatch[mountpoint] = await watch(
        context.mounts[mountpoint],
        onChange,
        mountpoint
      );
    }
  };
  const stopWatch = async () => {
    if (!context.watching) {
      return;
    }
    for (const mountpoint in context.unwatch) {
      await context.unwatch[mountpoint]();
    }
    context.unwatch = {};
    context.watching = false;
  };
  const runBatch = (items, commonOptions, cb) => {
    const batches = /* @__PURE__ */ new Map();
    const getBatch = (mount) => {
      let batch = batches.get(mount.base);
      if (!batch) {
        batch = {
          driver: mount.driver,
          base: mount.base,
          items: []
        };
        batches.set(mount.base, batch);
      }
      return batch;
    };
    for (const item of items) {
      const isStringItem = typeof item === "string";
      const key = normalizeKey(isStringItem ? item : item.key);
      const value = isStringItem ? void 0 : item.value;
      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };
      const mount = getMount(key);
      getBatch(mount).items.push({
        key,
        value,
        relativeKey: mount.relativeKey,
        options: options2
      });
    }
    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(
      (r4) => r4.flat()
    );
  };
  const storage = {
    // Item
    hasItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.hasItem, relativeKey, opts);
    },
    getItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => destr(value)
      );
    },
    getItems(items, commonOptions = {}) {
      return runBatch(items, commonOptions, (batch) => {
        if (batch.driver.getItems) {
          return asyncCall(
            batch.driver.getItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              options: item.options
            })),
            commonOptions
          ).then(
            (r4) => r4.map((item) => ({
              key: joinKeys(batch.base, item.key),
              value: destr(item.value)
            }))
          );
        }
        return Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.getItem,
              item.relativeKey,
              item.options
            ).then((value) => ({
              key: item.key,
              value: destr(value)
            }));
          })
        );
      });
    },
    getItemRaw(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.getItemRaw) {
        return asyncCall(driver.getItemRaw, relativeKey, opts);
      }
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => deserializeRaw(value)
      );
    },
    async setItem(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.setItem) {
        return;
      }
      await asyncCall(driver.setItem, relativeKey, stringify3(value), opts);
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async setItems(items, commonOptions) {
      await runBatch(items, commonOptions, async (batch) => {
        if (batch.driver.setItems) {
          return asyncCall(
            batch.driver.setItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              value: stringify3(item.value),
              options: item.options
            })),
            commonOptions
          );
        }
        if (!batch.driver.setItem) {
          return;
        }
        await Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.setItem,
              item.relativeKey,
              stringify3(item.value),
              item.options
            );
          })
        );
      });
    },
    async setItemRaw(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key, opts);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.setItemRaw) {
        await asyncCall(driver.setItemRaw, relativeKey, value, opts);
      } else if (driver.setItem) {
        await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);
      } else {
        return;
      }
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async removeItem(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { removeMeta: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.removeItem) {
        return;
      }
      await asyncCall(driver.removeItem, relativeKey, opts);
      if (opts.removeMeta || opts.removeMata) {
        await asyncCall(driver.removeItem, relativeKey + "$", opts);
      }
      if (!driver.watch) {
        onChange("remove", key);
      }
    },
    // Meta
    async getMeta(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { nativeOnly: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      const meta = /* @__PURE__ */ Object.create(null);
      if (driver.getMeta) {
        Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
      }
      if (!opts.nativeOnly) {
        const value = await asyncCall(
          driver.getItem,
          relativeKey + "$",
          opts
        ).then((value_) => destr(value_));
        if (value && typeof value === "object") {
          if (typeof value.atime === "string") {
            value.atime = new Date(value.atime);
          }
          if (typeof value.mtime === "string") {
            value.mtime = new Date(value.mtime);
          }
          Object.assign(meta, value);
        }
      }
      return meta;
    },
    setMeta(key, value, opts = {}) {
      return this.setItem(key + "$", value, opts);
    },
    removeMeta(key, opts = {}) {
      return this.removeItem(key + "$", opts);
    },
    // Keys
    async getKeys(base3, opts = {}) {
      var _a2;
      base3 = normalizeBaseKey(base3);
      const mounts = getMounts(base3, true);
      let maskedMounts = [];
      const allKeys = [];
      let allMountsSupportMaxDepth = true;
      for (const mount of mounts) {
        if (!((_a2 = mount.driver.flags) == null ? void 0 : _a2.maxDepth)) {
          allMountsSupportMaxDepth = false;
        }
        const rawKeys = await asyncCall(
          mount.driver.getKeys,
          mount.relativeBase,
          opts
        );
        for (const key of rawKeys) {
          const fullKey = mount.mountpoint + normalizeKey(key);
          if (!maskedMounts.some((p5) => fullKey.startsWith(p5))) {
            allKeys.push(fullKey);
          }
        }
        maskedMounts = [
          mount.mountpoint,
          ...maskedMounts.filter((p5) => !p5.startsWith(mount.mountpoint))
        ];
      }
      const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;
      return allKeys.filter(
        (key) => (!shouldFilterByDepth || filterKeyByDepth(key, opts.maxDepth)) && filterKeyByBase(key, base3)
      );
    },
    // Utils
    async clear(base3, opts = {}) {
      base3 = normalizeBaseKey(base3);
      await Promise.all(
        getMounts(base3, false).map(async (m6) => {
          if (m6.driver.clear) {
            return asyncCall(m6.driver.clear, m6.relativeBase, opts);
          }
          if (m6.driver.removeItem) {
            const keys2 = await m6.driver.getKeys(m6.relativeBase || "", opts);
            return Promise.all(
              keys2.map((key) => m6.driver.removeItem(key, opts))
            );
          }
        })
      );
    },
    async dispose() {
      await Promise.all(
        Object.values(context.mounts).map((driver) => dispose(driver))
      );
    },
    async watch(callback) {
      await startWatch();
      context.watchListeners.push(callback);
      return async () => {
        context.watchListeners = context.watchListeners.filter(
          (listener) => listener !== callback
        );
        if (context.watchListeners.length === 0) {
          await stopWatch();
        }
      };
    },
    async unwatch() {
      context.watchListeners = [];
      await stopWatch();
    },
    // Mount
    mount(base3, driver) {
      base3 = normalizeBaseKey(base3);
      if (base3 && context.mounts[base3]) {
        throw new Error(`already mounted at ${base3}`);
      }
      if (base3) {
        context.mountpoints.push(base3);
        context.mountpoints.sort((a4, b5) => b5.length - a4.length);
      }
      context.mounts[base3] = driver;
      if (context.watching) {
        Promise.resolve(watch(driver, onChange, base3)).then((unwatcher) => {
          context.unwatch[base3] = unwatcher;
        }).catch(console.error);
      }
      return storage;
    },
    async unmount(base3, _dispose = true) {
      var _a2, _b;
      base3 = normalizeBaseKey(base3);
      if (!base3 || !context.mounts[base3]) {
        return;
      }
      if (context.watching && base3 in context.unwatch) {
        (_b = (_a2 = context.unwatch)[base3]) == null ? void 0 : _b.call(_a2);
        delete context.unwatch[base3];
      }
      if (_dispose) {
        await dispose(context.mounts[base3]);
      }
      context.mountpoints = context.mountpoints.filter((key) => key !== base3);
      delete context.mounts[base3];
    },
    getMount(key = "") {
      key = normalizeKey(key) + ":";
      const m6 = getMount(key);
      return {
        driver: m6.driver,
        base: m6.base
      };
    },
    getMounts(base3 = "", opts = {}) {
      base3 = normalizeKey(base3);
      const mounts = getMounts(base3, opts.parents);
      return mounts.map((m6) => ({
        driver: m6.driver,
        base: m6.mountpoint
      }));
    },
    // Aliases
    keys: (base3, opts = {}) => storage.getKeys(base3, opts),
    get: (key, opts = {}) => storage.getItem(key, opts),
    set: (key, value, opts = {}) => storage.setItem(key, value, opts),
    has: (key, opts = {}) => storage.hasItem(key, opts),
    del: (key, opts = {}) => storage.removeItem(key, opts),
    remove: (key, opts = {}) => storage.removeItem(key, opts)
  };
  return storage;
}
function watch(driver, onChange, base3) {
  return driver.watch ? driver.watch((event, key) => onChange(event, base3 + key)) : () => {
  };
}
async function dispose(driver) {
  if (typeof driver.dispose === "function") {
    await asyncCall(driver.dispose);
  }
}

// node_modules/idb-keyval/dist/index.js
function promisifyRequest(request2) {
  return new Promise((resolve2, reject) => {
    request2.oncomplete = request2.onsuccess = () => resolve2(request2.result);
    request2.onabort = request2.onerror = () => reject(request2.error);
  });
}
function createStore(dbName, storeName) {
  let dbp;
  const getDB = () => {
    if (dbp)
      return dbp;
    const request2 = indexedDB.open(dbName);
    request2.onupgradeneeded = () => request2.result.createObjectStore(storeName);
    dbp = promisifyRequest(request2);
    dbp.then((db) => {
      db.onclose = () => dbp = void 0;
    }, () => {
    });
    return dbp;
  };
  return (txMode, callback) => getDB().then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get3(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}
function del(key, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.delete(key);
    return promisifyRequest(store.transaction);
  });
}
function clear(customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.clear();
    return promisifyRequest(store.transaction);
  });
}
function eachCursor(store, callback) {
  store.openCursor().onsuccess = function() {
    if (!this.result)
      return;
    callback(this.result);
    this.result.continue();
  };
  return promisifyRequest(store.transaction);
}
function keys(customStore = defaultGetStore()) {
  return customStore("readonly", (store) => {
    if (store.getAllKeys) {
      return promisifyRequest(store.getAllKeys());
    }
    const items = [];
    return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
  });
}

// node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js
var x3 = "idb-keyval";
var z3 = (i6 = {}) => {
  const t2 = i6.base && i6.base.length > 0 ? `${i6.base}:` : "", e3 = (s4) => t2 + s4;
  let n6;
  return i6.dbName && i6.storeName && (n6 = createStore(i6.dbName, i6.storeName)), { name: x3, options: i6, async hasItem(s4) {
    return !(typeof await get3(e3(s4), n6) > "u");
  }, async getItem(s4) {
    return await get3(e3(s4), n6) ?? null;
  }, setItem(s4, a4) {
    return set(e3(s4), a4, n6);
  }, removeItem(s4) {
    return del(e3(s4), n6);
  }, getKeys() {
    return keys(n6);
  }, clear() {
    return clear(n6);
  } };
};
var D2 = "WALLET_CONNECT_V2_INDEXED_DB";
var E2 = "keyvaluestorage";
var _3 = class {
  constructor() {
    this.indexedDb = createStorage({ driver: z3({ dbName: D2, storeName: E2 }) });
  }
  async getKeys() {
    return this.indexedDb.getKeys();
  }
  async getEntries() {
    return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t2) => [t2.key, t2.value]);
  }
  async getItem(t2) {
    const e3 = await this.indexedDb.getItem(t2);
    if (e3 !== null)
      return e3;
  }
  async setItem(t2, e3) {
    await this.indexedDb.setItem(t2, safeJsonStringify(e3));
  }
  async removeItem(t2) {
    await this.indexedDb.removeItem(t2);
  }
};
var l3 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var c2 = { exports: {} };
(function() {
  let i6;
  function t2() {
  }
  i6 = t2, i6.prototype.getItem = function(e3) {
    return this.hasOwnProperty(e3) ? String(this[e3]) : null;
  }, i6.prototype.setItem = function(e3, n6) {
    this[e3] = String(n6);
  }, i6.prototype.removeItem = function(e3) {
    delete this[e3];
  }, i6.prototype.clear = function() {
    const e3 = this;
    Object.keys(e3).forEach(function(n6) {
      e3[n6] = void 0, delete e3[n6];
    });
  }, i6.prototype.key = function(e3) {
    return e3 = e3 || 0, Object.keys(this)[e3];
  }, i6.prototype.__defineGetter__("length", function() {
    return Object.keys(this).length;
  }), typeof l3 < "u" && l3.localStorage ? c2.exports = l3.localStorage : typeof window < "u" && window.localStorage ? c2.exports = window.localStorage : c2.exports = new t2();
})();
function k3(i6) {
  var t2;
  return [i6[0], safeJsonParse((t2 = i6[1]) != null ? t2 : "")];
}
var K5 = class {
  constructor() {
    this.localStorage = c2.exports;
  }
  async getKeys() {
    return Object.keys(this.localStorage);
  }
  async getEntries() {
    return Object.entries(this.localStorage).map(k3);
  }
  async getItem(t2) {
    const e3 = this.localStorage.getItem(t2);
    if (e3 !== null)
      return safeJsonParse(e3);
  }
  async setItem(t2, e3) {
    this.localStorage.setItem(t2, safeJsonStringify(e3));
  }
  async removeItem(t2) {
    this.localStorage.removeItem(t2);
  }
};
var N11 = "wc_storage_version";
var y2 = 1;
var O2 = async (i6, t2, e3) => {
  const n6 = N11, s4 = await t2.getItem(n6);
  if (s4 && s4 >= y2) {
    e3(t2);
    return;
  }
  const a4 = await i6.getKeys();
  if (!a4.length) {
    e3(t2);
    return;
  }
  const m6 = [];
  for (; a4.length; ) {
    const r4 = a4.shift();
    if (!r4)
      continue;
    const o6 = r4.toLowerCase();
    if (o6.includes("wc@") || o6.includes("walletconnect") || o6.includes("wc_") || o6.includes("wallet_connect")) {
      const f11 = await i6.getItem(r4);
      await t2.setItem(r4, f11), m6.push(r4);
    }
  }
  await t2.setItem(n6, y2), e3(t2), j3(i6, m6);
};
var j3 = async (i6, t2) => {
  t2.length && t2.forEach(async (e3) => {
    await i6.removeItem(e3);
  });
};
var h2 = class {
  constructor() {
    this.initialized = false, this.setInitialized = (e3) => {
      this.storage = e3, this.initialized = true;
    };
    const t2 = new K5();
    this.storage = t2;
    try {
      const e3 = new _3();
      O2(t2, e3, this.setInitialized);
    } catch {
      this.initialized = true;
    }
  }
  async getKeys() {
    return await this.initialize(), this.storage.getKeys();
  }
  async getEntries() {
    return await this.initialize(), this.storage.getEntries();
  }
  async getItem(t2) {
    return await this.initialize(), this.storage.getItem(t2);
  }
  async setItem(t2, e3) {
    return await this.initialize(), this.storage.setItem(t2, e3);
  }
  async removeItem(t2) {
    return await this.initialize(), this.storage.removeItem(t2);
  }
  async initialize() {
    this.initialized || await new Promise((t2) => {
      const e3 = setInterval(() => {
        this.initialized && (clearInterval(e3), t2());
      }, 20);
    });
  }
};

// node_modules/@walletconnect/logger/dist/index.es.js
var import_pino = __toESM(require_browser2());
var import_pino2 = __toESM(require_browser2());
var c3 = { level: "info" };
var n3 = "custom_context";
var l4 = 1e3 * 1024;
var O3 = class {
  constructor(e3) {
    this.nodeValue = e3, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;
  }
  get value() {
    return this.nodeValue;
  }
  get size() {
    return this.sizeInBytes;
  }
};
var d2 = class {
  constructor(e3) {
    this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e3, this.sizeInBytes = 0;
  }
  append(e3) {
    const t2 = new O3(e3);
    if (t2.size > this.maxSizeInBytes)
      throw new Error(`[LinkedList] Value too big to insert into list: ${e3} with size ${t2.size}`);
    for (; this.size + t2.size > this.maxSizeInBytes; )
      this.shift();
    this.head ? (this.tail && (this.tail.next = t2), this.tail = t2) : (this.head = t2, this.tail = t2), this.lengthInNodes++, this.sizeInBytes += t2.size;
  }
  shift() {
    if (!this.head)
      return;
    const e3 = this.head;
    this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e3.size;
  }
  toArray() {
    const e3 = [];
    let t2 = this.head;
    for (; t2 !== null; )
      e3.push(t2.value), t2 = t2.next;
    return e3;
  }
  get length() {
    return this.lengthInNodes;
  }
  get size() {
    return this.sizeInBytes;
  }
  toOrderedArray() {
    return Array.from(this);
  }
  [Symbol.iterator]() {
    let e3 = this.head;
    return { next: () => {
      if (!e3)
        return { done: true, value: null };
      const t2 = e3.value;
      return e3 = e3.next, { done: false, value: t2 };
    } };
  }
};
var L2 = class {
  constructor(e3, t2 = l4) {
    this.level = e3 ?? "error", this.levelValue = import_pino.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t2, this.logs = new d2(this.MAX_LOG_SIZE_IN_BYTES);
  }
  forwardToConsole(e3, t2) {
    t2 === import_pino.levels.values.error ? console.error(e3) : t2 === import_pino.levels.values.warn ? console.warn(e3) : t2 === import_pino.levels.values.debug ? console.debug(e3) : t2 === import_pino.levels.values.trace ? console.trace(e3) : console.log(e3);
  }
  appendToLogs(e3) {
    this.logs.append(safeJsonStringify({ timestamp: (/* @__PURE__ */ new Date()).toISOString(), log: e3 }));
    const t2 = typeof e3 == "string" ? JSON.parse(e3).level : e3.level;
    t2 >= this.levelValue && this.forwardToConsole(e3, t2);
  }
  getLogs() {
    return this.logs;
  }
  clearLogs() {
    this.logs = new d2(this.MAX_LOG_SIZE_IN_BYTES);
  }
  getLogArray() {
    return Array.from(this.logs);
  }
  logsToBlob(e3) {
    const t2 = this.getLogArray();
    return t2.push(safeJsonStringify({ extraMetadata: e3 })), new Blob(t2, { type: "application/json" });
  }
};
var m2 = class {
  constructor(e3, t2 = l4) {
    this.baseChunkLogger = new L2(e3, t2);
  }
  write(e3) {
    this.baseChunkLogger.appendToLogs(e3);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e3) {
    return this.baseChunkLogger.logsToBlob(e3);
  }
  downloadLogsBlobInBrowser(e3) {
    const t2 = URL.createObjectURL(this.logsToBlob(e3)), o6 = document.createElement("a");
    o6.href = t2, o6.download = `walletconnect-logs-${(/* @__PURE__ */ new Date()).toISOString()}.txt`, document.body.appendChild(o6), o6.click(), document.body.removeChild(o6), URL.revokeObjectURL(t2);
  }
};
var B2 = class {
  constructor(e3, t2 = l4) {
    this.baseChunkLogger = new L2(e3, t2);
  }
  write(e3) {
    this.baseChunkLogger.appendToLogs(e3);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e3) {
    return this.baseChunkLogger.logsToBlob(e3);
  }
};
var x4 = Object.defineProperty;
var S3 = Object.defineProperties;
var _4 = Object.getOwnPropertyDescriptors;
var p2 = Object.getOwnPropertySymbols;
var T3 = Object.prototype.hasOwnProperty;
var z4 = Object.prototype.propertyIsEnumerable;
var f5 = (r4, e3, t2) => e3 in r4 ? x4(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var i4 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    T3.call(e3, t2) && f5(r4, t2, e3[t2]);
  if (p2)
    for (var t2 of p2(e3))
      z4.call(e3, t2) && f5(r4, t2, e3[t2]);
  return r4;
};
var g2 = (r4, e3) => S3(r4, _4(e3));
function k4(r4) {
  return g2(i4({}, r4), { level: (r4 == null ? void 0 : r4.level) || c3.level });
}
function v2(r4, e3 = n3) {
  return r4[e3] || "";
}
function b(r4, e3, t2 = n3) {
  return r4[t2] = e3, r4;
}
function y3(r4, e3 = n3) {
  let t2 = "";
  return typeof r4.bindings > "u" ? t2 = v2(r4, e3) : t2 = r4.bindings().context || "", t2;
}
function w2(r4, e3, t2 = n3) {
  const o6 = y3(r4, t2);
  return o6.trim() ? `${o6}/${e3}` : e3;
}
function E3(r4, e3, t2 = n3) {
  const o6 = w2(r4, e3, t2), a4 = r4.child({ context: o6 });
  return b(a4, o6, t2);
}
function C3(r4) {
  var e3, t2;
  const o6 = new m2((e3 = r4.opts) == null ? void 0 : e3.level, r4.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g2(i4({}, r4.opts), { level: "trace", browser: g2(i4({}, (t2 = r4.opts) == null ? void 0 : t2.browser), { write: (a4) => o6.write(a4) }) })), chunkLoggerController: o6 };
}
function I2(r4) {
  var e3;
  const t2 = new B2((e3 = r4.opts) == null ? void 0 : e3.level, r4.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g2(i4({}, r4.opts), { level: "trace" }), t2), chunkLoggerController: t2 };
}
function A2(r4) {
  return typeof r4.loggerOverride < "u" && typeof r4.loggerOverride != "string" ? { logger: r4.loggerOverride, chunkLoggerController: null } : typeof window < "u" ? C3(r4) : I2(r4);
}

// node_modules/@walletconnect/types/dist/index.es.js
var import_events6 = __toESM(require_events());
var a3 = Object.defineProperty;
var u3 = (e3, s4, r4) => s4 in e3 ? a3(e3, s4, { enumerable: true, configurable: true, writable: true, value: r4 }) : e3[s4] = r4;
var c4 = (e3, s4, r4) => u3(e3, typeof s4 != "symbol" ? s4 + "" : s4, r4);
var h4 = class extends IEvents {
  constructor(s4) {
    super(), this.opts = s4, c4(this, "protocol", "wc"), c4(this, "version", 2);
  }
};
var p3 = Object.defineProperty;
var b2 = (e3, s4, r4) => s4 in e3 ? p3(e3, s4, { enumerable: true, configurable: true, writable: true, value: r4 }) : e3[s4] = r4;
var v6 = (e3, s4, r4) => b2(e3, typeof s4 != "symbol" ? s4 + "" : s4, r4);
var I3 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.core = s4, this.logger = r4, v6(this, "records", /* @__PURE__ */ new Map());
  }
};
var y4 = class {
  constructor(s4, r4) {
    this.logger = s4, this.core = r4;
  }
};
var m3 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.relayer = s4, this.logger = r4;
  }
};
var d3 = class extends IEvents {
  constructor(s4) {
    super();
  }
};
var f6 = class {
  constructor(s4, r4, t2, q3) {
    this.core = s4, this.logger = r4, this.name = t2;
  }
};
var P3 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.relayer = s4, this.logger = r4;
  }
};
var S4 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.core = s4, this.logger = r4;
  }
};
var M3 = class {
  constructor(s4, r4, t2) {
    this.core = s4, this.logger = r4, this.store = t2;
  }
};
var O4 = class {
  constructor(s4, r4) {
    this.projectId = s4, this.logger = r4;
  }
};
var R = class {
  constructor(s4, r4, t2) {
    this.core = s4, this.logger = r4, this.telemetryEnabled = t2;
  }
};
var T4 = Object.defineProperty;
var k5 = (e3, s4, r4) => s4 in e3 ? T4(e3, s4, { enumerable: true, configurable: true, writable: true, value: r4 }) : e3[s4] = r4;
var i5 = (e3, s4, r4) => k5(e3, typeof s4 != "symbol" ? s4 + "" : s4, r4);
var J3 = class {
  constructor(s4) {
    this.opts = s4, i5(this, "protocol", "wc"), i5(this, "version", 2);
  }
};
var V2 = class {
  constructor(s4) {
    this.client = s4;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_time4 = __toESM(require_cjs());

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var import_events7 = __toESM(require_events());

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DEFAULT_ERROR: () => DEFAULT_ERROR,
  IBaseJsonRpcProvider: () => n5,
  IEvents: () => e2,
  IJsonRpcConnection: () => o3,
  IJsonRpcProvider: () => r3,
  INTERNAL_ERROR: () => INTERNAL_ERROR,
  INVALID_PARAMS: () => INVALID_PARAMS,
  INVALID_REQUEST: () => INVALID_REQUEST,
  METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
  PARSE_ERROR: () => PARSE_ERROR,
  RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
  SERVER_ERROR: () => SERVER_ERROR,
  SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
  formatErrorMessage: () => formatErrorMessage,
  formatJsonRpcError: () => formatJsonRpcError,
  formatJsonRpcRequest: () => formatJsonRpcRequest,
  formatJsonRpcResult: () => formatJsonRpcResult,
  getBigIntRpcId: () => getBigIntRpcId,
  getError: () => getError,
  getErrorByCode: () => getErrorByCode,
  isHttpUrl: () => isHttpUrl,
  isJsonRpcError: () => isJsonRpcError,
  isJsonRpcPayload: () => isJsonRpcPayload,
  isJsonRpcRequest: () => isJsonRpcRequest,
  isJsonRpcResponse: () => isJsonRpcResponse,
  isJsonRpcResult: () => isJsonRpcResult,
  isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
  isLocalhostUrl: () => isLocalhostUrl,
  isNodeJs: () => isNodeJs,
  isReservedErrorCode: () => isReservedErrorCode,
  isServerErrorCode: () => isServerErrorCode,
  isValidDefaultRoute: () => isValidDefaultRoute,
  isValidErrorCode: () => isValidErrorCode,
  isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
  isValidRoute: () => isValidRoute,
  isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
  isValidWildcardRoute: () => isValidWildcardRoute,
  isWsUrl: () => isWsUrl,
  parseConnectionError: () => parseConnectionError,
  payloadId: () => payloadId,
  validateJsonRpcError: () => validateJsonRpcError
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
var PARSE_ERROR = "PARSE_ERROR";
var INVALID_REQUEST = "INVALID_REQUEST";
var METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
var INVALID_PARAMS = "INVALID_PARAMS";
var INTERNAL_ERROR = "INTERNAL_ERROR";
var SERVER_ERROR = "SERVER_ERROR";
var RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
var SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
var STANDARD_ERROR_MAP = {
  [PARSE_ERROR]: { code: -32700, message: "Parse error" },
  [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
  [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
  [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
  [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
  [SERVER_ERROR]: { code: -32e3, message: "Server error" }
};
var DEFAULT_ERROR = SERVER_ERROR;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
function isServerErrorCode(code2) {
  return code2 <= SERVER_ERROR_CODE_RANGE[0] && code2 >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code2) {
  return RESERVED_ERROR_CODES.includes(code2);
}
function isValidErrorCode(code2) {
  return typeof code2 === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code2) {
  const match = Object.values(STANDARD_ERROR_MAP).find((e3) => e3.code === code2);
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response2) {
  if (typeof response2.error.code === "undefined") {
    return { valid: false, error: "Missing code for JSON-RPC error" };
  }
  if (typeof response2.error.message === "undefined") {
    return { valid: false, error: "Missing message for JSON-RPC error" };
  }
  if (!isValidErrorCode(response2.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response2.error.code}`
    };
  }
  if (isReservedErrorCode(response2.error.code)) {
    const error = getErrorByCode(response2.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response2.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response2.error.code}`
      };
    }
  }
  return { valid: true };
}
function parseConnectionError(e3, url, type) {
  return e3.message.includes("getaddrinfo ENOTFOUND") || e3.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e3;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
var env_exports = {};
__export(env_exports, {
  isNodeJs: () => isNodeJs
});
var import_environment = __toESM(require_cjs4());
__reExport(env_exports, __toESM(require_cjs4()));
var isNodeJs = import_environment.isNode;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
__reExport(esm_exports, env_exports);

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params2, id2) {
  return {
    id: id2 || payloadId(),
    jsonrpc: "2.0",
    method,
    params: params2
  };
}
function formatJsonRpcResult(id2, result) {
  return {
    id: id2,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id2, error, data) {
  return {
    id: id2,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter((x7) => x7.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}

// node_modules/@walletconnect/jsonrpc-types/dist/index.es.js
var e2 = class {
};
var o3 = class extends e2 {
  constructor(c8) {
    super();
  }
};
var n5 = class extends e2 {
  constructor() {
    super();
  }
};
var r3 = class extends n5 {
  constructor(c8) {
    super();
  }
};

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
var HTTP_REGEX = "^https?:";
var WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length)
    return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined")
    return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var o4 = class extends r3 {
  constructor(t2) {
    super(t2), this.events = new import_events7.EventEmitter(), this.hasRegisteredEventListeners = false, this.connection = this.setConnection(t2), this.connection.connected && this.registerEventListeners();
  }
  async connect(t2 = this.connection) {
    await this.open(t2);
  }
  async disconnect() {
    await this.close();
  }
  on(t2, e3) {
    this.events.on(t2, e3);
  }
  once(t2, e3) {
    this.events.once(t2, e3);
  }
  off(t2, e3) {
    this.events.off(t2, e3);
  }
  removeListener(t2, e3) {
    this.events.removeListener(t2, e3);
  }
  async request(t2, e3) {
    return this.requestStrict(formatJsonRpcRequest(t2.method, t2.params || [], t2.id || getBigIntRpcId().toString()), e3);
  }
  async requestStrict(t2, e3) {
    return new Promise(async (i6, s4) => {
      if (!this.connection.connected)
        try {
          await this.open();
        } catch (n6) {
          s4(n6);
        }
      this.events.on(`${t2.id}`, (n6) => {
        isJsonRpcError(n6) ? s4(n6.error) : i6(n6.result);
      });
      try {
        await this.connection.send(t2, e3);
      } catch (n6) {
        s4(n6);
      }
    });
  }
  setConnection(t2 = this.connection) {
    return t2;
  }
  onPayload(t2) {
    this.events.emit("payload", t2), isJsonRpcResponse(t2) ? this.events.emit(`${t2.id}`, t2) : this.events.emit("message", { type: t2.method, data: t2.params });
  }
  onClose(t2) {
    t2 && t2.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t2.code} ${t2.reason ? `(${t2.reason})` : ""}`)), this.events.emit("disconnect");
  }
  async open(t2 = this.connection) {
    this.connection === t2 && this.connection.connected || (this.connection.connected && this.close(), typeof t2 == "string" && (await this.connection.open(t2), t2 = this.connection), this.connection = this.setConnection(t2), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
  }
  async close() {
    await this.connection.close();
  }
  registerEventListeners() {
    this.hasRegisteredEventListeners || (this.connection.on("payload", (t2) => this.onPayload(t2)), this.connection.on("close", (t2) => this.onClose(t2)), this.connection.on("error", (t2) => this.events.emit("error", t2)), this.connection.on("register_error", (t2) => this.onClose()), this.hasRegisteredEventListeners = true);
  }
};

// node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_events8 = __toESM(require_events());
var v7 = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser3();
var w3 = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
var d4 = (r4) => r4.split("?")[0];
var h5 = 10;
var b3 = v7();
var f7 = class {
  constructor(e3) {
    if (this.url = e3, this.events = new import_events8.EventEmitter(), this.registering = false, !isWsUrl(e3))
      throw new Error(`Provided URL is not compatible with WebSocket connection: ${e3}`);
    this.url = e3;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async open(e3 = this.url) {
    await this.register(e3);
  }
  async close() {
    return new Promise((e3, t2) => {
      if (typeof this.socket > "u") {
        t2(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (n6) => {
        this.onClose(n6), e3();
      }, this.socket.close();
    });
  }
  async send(e3) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(safeJsonStringify(e3));
    } catch (t2) {
      this.onError(e3.id, t2);
    }
  }
  register(e3 = this.url) {
    if (!isWsUrl(e3))
      throw new Error(`Provided URL is not compatible with WebSocket connection: ${e3}`);
    if (this.registering) {
      const t2 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t2 || this.events.listenerCount("open") >= t2) && this.events.setMaxListeners(t2 + 1), new Promise((n6, s4) => {
        this.events.once("register_error", (o6) => {
          this.resetMaxListeners(), s4(o6);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u")
            return s4(new Error("WebSocket connection is missing or invalid"));
          n6(this.socket);
        });
      });
    }
    return this.url = e3, this.registering = true, new Promise((t2, n6) => {
      const s4 = (0, esm_exports.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e3) }, o6 = new b3(e3, [], s4);
      w3() ? o6.onerror = (i6) => {
        const a4 = i6;
        n6(this.emitError(a4.error));
      } : o6.on("error", (i6) => {
        n6(this.emitError(i6));
      }), o6.onopen = () => {
        this.onOpen(o6), t2(o6);
      };
    });
  }
  onOpen(e3) {
    e3.onmessage = (t2) => this.onPayload(t2), e3.onclose = (t2) => this.onClose(t2), this.socket = e3, this.registering = false, this.events.emit("open");
  }
  onClose(e3) {
    this.socket = void 0, this.registering = false, this.events.emit("close", e3);
  }
  onPayload(e3) {
    if (typeof e3.data > "u")
      return;
    const t2 = typeof e3.data == "string" ? safeJsonParse(e3.data) : e3.data;
    this.events.emit("payload", t2);
  }
  onError(e3, t2) {
    const n6 = this.parseError(t2), s4 = n6.message || n6.toString(), o6 = formatJsonRpcError(e3, s4);
    this.events.emit("payload", o6);
  }
  parseError(e3, t2 = this.url) {
    return parseConnectionError(e3, d4(t2), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > h5 && this.events.setMaxListeners(h5);
  }
  emitError(e3) {
    const t2 = this.parseError(new Error((e3 == null ? void 0 : e3.message) || `WebSocket connection failed for host: ${d4(this.url)}`));
    return this.events.emit("register_error", t2), t2;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_window_getters2 = __toESM(require_cjs2());
var Ue3 = "wc";
var Fe2 = 2;
var pe3 = "core";
var W3 = `${Ue3}@2:${pe3}:`;
var It3 = { name: pe3, logger: "error" };
var Tt3 = { database: ":memory:" };
var Ct2 = "crypto";
var Me3 = "client_ed25519_seed";
var Pt3 = import_time4.ONE_DAY;
var St3 = "keychain";
var Ot3 = "0.3";
var Rt3 = "messages";
var At2 = "0.3";
var xt3 = import_time4.SIX_HOURS;
var Nt3 = "publisher";
var $t3 = "irn";
var zt3 = "error";
var Ke3 = "wss://relay.walletconnect.org";
var Lt3 = "relayer";
var C4 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var kt3 = "_subscription";
var M4 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var jt3 = 0.1;
var Pe3 = "2.21.9";
var ee2 = { link_mode: "link_mode", relay: "relay" };
var ye3 = { inbound: "inbound", outbound: "outbound" };
var Ut3 = "0.3";
var Ft3 = "WALLETCONNECT_CLIENT_ID";
var Be3 = "WALLETCONNECT_LINK_MODE_APPS";
var U2 = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Mt3 = "subscription";
var Kt3 = "0.3";
var Qs2 = import_time4.FIVE_SECONDS * 1e3;
var Bt3 = "pairing";
var Vt3 = "0.3";
var oe2 = { wc_pairingDelete: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 } } };
var ae2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var V3 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var qt3 = "history";
var Gt3 = "0.3";
var Wt3 = "expirer";
var q2 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Ht3 = "0.3";
var Yt2 = "verify-api";
var ir2 = "https://verify.walletconnect.com";
var Jt3 = "https://verify.walletconnect.org";
var be3 = Jt3;
var Xt3 = `${be3}/v3`;
var Zt3 = [ir2, Jt3];
var Qt3 = "echo";
var ei2 = "https://echo.walletconnect.com";
var Y = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var X2 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var rr3 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var nr3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var or3 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var ar3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var ti2 = 0.1;
var ii = "event-client";
var si = 86400;
var ri2 = "https://pulse.walletconnect.org/batch";
function cr2(r4, e3) {
  if (r4.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var t2 = new Uint8Array(256), i6 = 0; i6 < t2.length; i6++)
    t2[i6] = 255;
  for (var s4 = 0; s4 < r4.length; s4++) {
    var n6 = r4.charAt(s4), o6 = n6.charCodeAt(0);
    if (t2[o6] !== 255)
      throw new TypeError(n6 + " is ambiguous");
    t2[o6] = s4;
  }
  var a4 = r4.length, c8 = r4.charAt(0), h6 = Math.log(a4) / Math.log(256), l8 = Math.log(256) / Math.log(a4);
  function p5(u4) {
    if (u4 instanceof Uint8Array || (ArrayBuffer.isView(u4) ? u4 = new Uint8Array(u4.buffer, u4.byteOffset, u4.byteLength) : Array.isArray(u4) && (u4 = Uint8Array.from(u4))), !(u4 instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (u4.length === 0)
      return "";
    for (var m6 = 0, D3 = 0, _6 = 0, E6 = u4.length; _6 !== E6 && u4[_6] === 0; )
      _6++, m6++;
    for (var L5 = (E6 - _6) * l8 + 1 >>> 0, I4 = new Uint8Array(L5); _6 !== E6; ) {
      for (var k6 = u4[_6], T7 = 0, S6 = L5 - 1; (k6 !== 0 || T7 < D3) && S6 !== -1; S6--, T7++)
        k6 += 256 * I4[S6] >>> 0, I4[S6] = k6 % a4 >>> 0, k6 = k6 / a4 >>> 0;
      if (k6 !== 0)
        throw new Error("Non-zero carry");
      D3 = T7, _6++;
    }
    for (var O7 = L5 - D3; O7 !== L5 && I4[O7] === 0; )
      O7++;
    for (var te4 = c8.repeat(m6); O7 < L5; ++O7)
      te4 += r4.charAt(I4[O7]);
    return te4;
  }
  function y6(u4) {
    if (typeof u4 != "string")
      throw new TypeError("Expected String");
    if (u4.length === 0)
      return new Uint8Array();
    var m6 = 0;
    if (u4[m6] !== " ") {
      for (var D3 = 0, _6 = 0; u4[m6] === c8; )
        D3++, m6++;
      for (var E6 = (u4.length - m6) * h6 + 1 >>> 0, L5 = new Uint8Array(E6); u4[m6]; ) {
        var I4 = t2[u4.charCodeAt(m6)];
        if (I4 === 255)
          return;
        for (var k6 = 0, T7 = E6 - 1; (I4 !== 0 || k6 < _6) && T7 !== -1; T7--, k6++)
          I4 += a4 * L5[T7] >>> 0, L5[T7] = I4 % 256 >>> 0, I4 = I4 / 256 >>> 0;
        if (I4 !== 0)
          throw new Error("Non-zero carry");
        _6 = k6, m6++;
      }
      if (u4[m6] !== " ") {
        for (var S6 = E6 - _6; S6 !== E6 && L5[S6] === 0; )
          S6++;
        for (var O7 = new Uint8Array(D3 + (E6 - S6)), te4 = D3; S6 !== E6; )
          O7[te4++] = L5[S6++];
        return O7;
      }
    }
  }
  function w6(u4) {
    var m6 = y6(u4);
    if (m6)
      return m6;
    throw new Error(`Non-${e3} character`);
  }
  return { encode: p5, decodeUnsafe: y6, decode: w6 };
}
var hr2 = cr2;
var lr3 = hr2;
var ni2 = (r4) => {
  if (r4 instanceof Uint8Array && r4.constructor.name === "Uint8Array")
    return r4;
  if (r4 instanceof ArrayBuffer)
    return new Uint8Array(r4);
  if (ArrayBuffer.isView(r4))
    return new Uint8Array(r4.buffer, r4.byteOffset, r4.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var ur3 = (r4) => new TextEncoder().encode(r4);
var dr3 = (r4) => new TextDecoder().decode(r4);
var gr3 = class {
  constructor(e3, t2, i6) {
    this.name = e3, this.prefix = t2, this.baseEncode = i6;
  }
  encode(e3) {
    if (e3 instanceof Uint8Array)
      return `${this.prefix}${this.baseEncode(e3)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var pr3 = class {
  constructor(e3, t2, i6) {
    if (this.name = e3, this.prefix = t2, t2.codePointAt(0) === void 0)
      throw new Error("Invalid prefix character");
    this.prefixCodePoint = t2.codePointAt(0), this.baseDecode = i6;
  }
  decode(e3) {
    if (typeof e3 == "string") {
      if (e3.codePointAt(0) !== this.prefixCodePoint)
        throw Error(`Unable to decode multibase string ${JSON.stringify(e3)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e3.slice(this.prefix.length));
    } else
      throw Error("Can only multibase decode strings");
  }
  or(e3) {
    return oi2(this, e3);
  }
};
var yr3 = class {
  constructor(e3) {
    this.decoders = e3;
  }
  or(e3) {
    return oi2(this, e3);
  }
  decode(e3) {
    const t2 = e3[0], i6 = this.decoders[t2];
    if (i6)
      return i6.decode(e3);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e3)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var oi2 = (r4, e3) => new yr3({ ...r4.decoders || { [r4.prefix]: r4 }, ...e3.decoders || { [e3.prefix]: e3 } });
var br3 = class {
  constructor(e3, t2, i6, s4) {
    this.name = e3, this.prefix = t2, this.baseEncode = i6, this.baseDecode = s4, this.encoder = new gr3(e3, t2, i6), this.decoder = new pr3(e3, t2, s4);
  }
  encode(e3) {
    return this.encoder.encode(e3);
  }
  decode(e3) {
    return this.decoder.decode(e3);
  }
};
var Se2 = ({ name: r4, prefix: e3, encode: t2, decode: i6 }) => new br3(r4, e3, t2, i6);
var me3 = ({ prefix: r4, name: e3, alphabet: t2 }) => {
  const { encode: i6, decode: s4 } = lr3(t2, e3);
  return Se2({ prefix: r4, name: e3, encode: i6, decode: (n6) => ni2(s4(n6)) });
};
var mr3 = (r4, e3, t2, i6) => {
  const s4 = {};
  for (let l8 = 0; l8 < e3.length; ++l8)
    s4[e3[l8]] = l8;
  let n6 = r4.length;
  for (; r4[n6 - 1] === "="; )
    --n6;
  const o6 = new Uint8Array(n6 * t2 / 8 | 0);
  let a4 = 0, c8 = 0, h6 = 0;
  for (let l8 = 0; l8 < n6; ++l8) {
    const p5 = s4[r4[l8]];
    if (p5 === void 0)
      throw new SyntaxError(`Non-${i6} character`);
    c8 = c8 << t2 | p5, a4 += t2, a4 >= 8 && (a4 -= 8, o6[h6++] = 255 & c8 >> a4);
  }
  if (a4 >= t2 || 255 & c8 << 8 - a4)
    throw new SyntaxError("Unexpected end of data");
  return o6;
};
var fr2 = (r4, e3, t2) => {
  const i6 = e3[e3.length - 1] === "=", s4 = (1 << t2) - 1;
  let n6 = "", o6 = 0, a4 = 0;
  for (let c8 = 0; c8 < r4.length; ++c8)
    for (a4 = a4 << 8 | r4[c8], o6 += 8; o6 > t2; )
      o6 -= t2, n6 += e3[s4 & a4 >> o6];
  if (o6 && (n6 += e3[s4 & a4 << t2 - o6]), i6)
    for (; n6.length * t2 & 7; )
      n6 += "=";
  return n6;
};
var A3 = ({ name: r4, prefix: e3, bitsPerChar: t2, alphabet: i6 }) => Se2({ prefix: e3, name: r4, encode(s4) {
  return fr2(s4, i6, t2);
}, decode(s4) {
  return mr3(s4, i6, t2, r4);
} });
var Dr3 = Se2({ prefix: "\0", name: "identity", encode: (r4) => dr3(r4), decode: (r4) => ur3(r4) });
var vr2 = Object.freeze({ __proto__: null, identity: Dr3 });
var wr3 = A3({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var _r3 = Object.freeze({ __proto__: null, base2: wr3 });
var Er2 = A3({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Ir3 = Object.freeze({ __proto__: null, base8: Er2 });
var Tr3 = me3({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Cr3 = Object.freeze({ __proto__: null, base10: Tr3 });
var Pr3 = A3({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Sr3 = A3({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Or3 = Object.freeze({ __proto__: null, base16: Pr3, base16upper: Sr3 });
var Rr3 = A3({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Ar3 = A3({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var xr2 = A3({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Nr3 = A3({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var $r3 = A3({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var zr3 = A3({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var Lr3 = A3({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var kr3 = A3({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var jr3 = A3({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var Ur3 = Object.freeze({ __proto__: null, base32: Rr3, base32upper: Ar3, base32pad: xr2, base32padupper: Nr3, base32hex: $r3, base32hexupper: zr3, base32hexpad: Lr3, base32hexpadupper: kr3, base32z: jr3 });
var Fr3 = me3({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var Mr3 = me3({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var Kr3 = Object.freeze({ __proto__: null, base36: Fr3, base36upper: Mr3 });
var Br3 = me3({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Vr3 = me3({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var qr3 = Object.freeze({ __proto__: null, base58btc: Br3, base58flickr: Vr3 });
var Gr3 = A3({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Wr3 = A3({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var Hr3 = A3({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var Yr3 = A3({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Jr3 = Object.freeze({ __proto__: null, base64: Gr3, base64pad: Wr3, base64url: Hr3, base64urlpad: Yr3 });
var ai2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Xr3 = ai2.reduce((r4, e3, t2) => (r4[t2] = e3, r4), []);
var Zr3 = ai2.reduce((r4, e3, t2) => (r4[e3.codePointAt(0)] = t2, r4), []);
function Qr3(r4) {
  return r4.reduce((e3, t2) => (e3 += Xr3[t2], e3), "");
}
function en3(r4) {
  const e3 = [];
  for (const t2 of r4) {
    const i6 = Zr3[t2.codePointAt(0)];
    if (i6 === void 0)
      throw new Error(`Non-base256emoji character: ${t2}`);
    e3.push(i6);
  }
  return new Uint8Array(e3);
}
var tn = Se2({ prefix: "🚀", name: "base256emoji", encode: Qr3, decode: en3 });
var sn2 = Object.freeze({ __proto__: null, base256emoji: tn });
var rn3 = hi;
var ci2 = 128;
var nn2 = 127;
var on3 = ~nn2;
var an2 = Math.pow(2, 31);
function hi(r4, e3, t2) {
  e3 = e3 || [], t2 = t2 || 0;
  for (var i6 = t2; r4 >= an2; )
    e3[t2++] = r4 & 255 | ci2, r4 /= 128;
  for (; r4 & on3; )
    e3[t2++] = r4 & 255 | ci2, r4 >>>= 7;
  return e3[t2] = r4 | 0, hi.bytes = t2 - i6 + 1, e3;
}
var cn2 = Ve3;
var hn2 = 128;
var li = 127;
function Ve3(r4, i6) {
  var t2 = 0, i6 = i6 || 0, s4 = 0, n6 = i6, o6, a4 = r4.length;
  do {
    if (n6 >= a4)
      throw Ve3.bytes = 0, new RangeError("Could not decode varint");
    o6 = r4[n6++], t2 += s4 < 28 ? (o6 & li) << s4 : (o6 & li) * Math.pow(2, s4), s4 += 7;
  } while (o6 >= hn2);
  return Ve3.bytes = n6 - i6, t2;
}
var ln2 = Math.pow(2, 7);
var un2 = Math.pow(2, 14);
var dn2 = Math.pow(2, 21);
var gn3 = Math.pow(2, 28);
var pn2 = Math.pow(2, 35);
var yn3 = Math.pow(2, 42);
var bn3 = Math.pow(2, 49);
var mn3 = Math.pow(2, 56);
var fn2 = Math.pow(2, 63);
var Dn2 = function(r4) {
  return r4 < ln2 ? 1 : r4 < un2 ? 2 : r4 < dn2 ? 3 : r4 < gn3 ? 4 : r4 < pn2 ? 5 : r4 < yn3 ? 6 : r4 < bn3 ? 7 : r4 < mn3 ? 8 : r4 < fn2 ? 9 : 10;
};
var vn3 = { encode: rn3, decode: cn2, encodingLength: Dn2 };
var ui2 = vn3;
var di2 = (r4, e3, t2 = 0) => (ui2.encode(r4, e3, t2), e3);
var gi = (r4) => ui2.encodingLength(r4);
var qe3 = (r4, e3) => {
  const t2 = e3.byteLength, i6 = gi(r4), s4 = i6 + gi(t2), n6 = new Uint8Array(s4 + t2);
  return di2(r4, n6, 0), di2(t2, n6, i6), n6.set(e3, s4), new wn2(r4, t2, e3, n6);
};
var wn2 = class {
  constructor(e3, t2, i6, s4) {
    this.code = e3, this.size = t2, this.digest = i6, this.bytes = s4;
  }
};
var pi = ({ name: r4, code: e3, encode: t2 }) => new _n3(r4, e3, t2);
var _n3 = class {
  constructor(e3, t2, i6) {
    this.name = e3, this.code = t2, this.encode = i6;
  }
  digest(e3) {
    if (e3 instanceof Uint8Array) {
      const t2 = this.encode(e3);
      return t2 instanceof Uint8Array ? qe3(this.code, t2) : t2.then((i6) => qe3(this.code, i6));
    } else
      throw Error("Unknown type, must be binary type");
  }
};
var yi2 = (r4) => async (e3) => new Uint8Array(await crypto.subtle.digest(r4, e3));
var En3 = pi({ name: "sha2-256", code: 18, encode: yi2("SHA-256") });
var In3 = pi({ name: "sha2-512", code: 19, encode: yi2("SHA-512") });
var Tn3 = Object.freeze({ __proto__: null, sha256: En3, sha512: In3 });
var bi2 = 0;
var Cn3 = "identity";
var mi = ni2;
var Pn3 = (r4) => qe3(bi2, mi(r4));
var Sn3 = { code: bi2, name: Cn3, encode: mi, digest: Pn3 };
var On3 = Object.freeze({ __proto__: null, identity: Sn3 });
new TextEncoder(), new TextDecoder();
var fi2 = { ...vr2, ..._r3, ...Ir3, ...Cr3, ...Or3, ...Ur3, ...Kr3, ...qr3, ...Jr3, ...sn2 };
({ ...Tn3, ...On3 });
function Di2(r4) {
  return globalThis.Buffer != null ? new Uint8Array(r4.buffer, r4.byteOffset, r4.byteLength) : r4;
}
function Rn3(r4 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Di2(globalThis.Buffer.allocUnsafe(r4)) : new Uint8Array(r4);
}
function vi(r4, e3, t2, i6) {
  return { name: r4, prefix: e3, encoder: { name: r4, prefix: e3, encode: t2 }, decoder: { decode: i6 } };
}
var wi = vi("utf8", "u", (r4) => "u" + new TextDecoder("utf8").decode(r4), (r4) => new TextEncoder().encode(r4.substring(1)));
var Ge3 = vi("ascii", "a", (r4) => {
  let e3 = "a";
  for (let t2 = 0; t2 < r4.length; t2++)
    e3 += String.fromCharCode(r4[t2]);
  return e3;
}, (r4) => {
  r4 = r4.substring(1);
  const e3 = Rn3(r4.length);
  for (let t2 = 0; t2 < r4.length; t2++)
    e3[t2] = r4.charCodeAt(t2);
  return e3;
});
var An3 = { utf8: wi, "utf-8": wi, hex: fi2.base16, latin1: Ge3, ascii: Ge3, binary: Ge3, ...fi2 };
function xn3(r4, e3 = "utf8") {
  const t2 = An3[e3];
  if (!t2)
    throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Di2(globalThis.Buffer.from(r4, "utf-8")) : t2.decoder.decode(`${t2.prefix}${r4}`);
}
var Nn3 = Object.defineProperty;
var $n3 = (r4, e3, t2) => e3 in r4 ? Nn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var J4 = (r4, e3, t2) => $n3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var _i2 = class {
  constructor(e3, t2) {
    this.core = e3, this.logger = t2, J4(this, "keychain", /* @__PURE__ */ new Map()), J4(this, "name", St3), J4(this, "version", Ot3), J4(this, "initialized", false), J4(this, "storagePrefix", W3), J4(this, "init", async () => {
      if (!this.initialized) {
        const i6 = await this.getKeyChain();
        typeof i6 < "u" && (this.keychain = i6), this.initialized = true;
      }
    }), J4(this, "has", (i6) => (this.isInitialized(), this.keychain.has(i6))), J4(this, "set", async (i6, s4) => {
      this.isInitialized(), this.keychain.set(i6, s4), await this.persist();
    }), J4(this, "get", (i6) => {
      this.isInitialized();
      const s4 = this.keychain.get(i6);
      if (typeof s4 > "u") {
        const { message: n6 } = Bt2("NO_MATCHING_KEY", `${this.name}: ${i6}`);
        throw new Error(n6);
      }
      return s4;
    }), J4(this, "del", async (i6) => {
      this.isInitialized(), this.keychain.delete(i6), await this.persist();
    }), this.core = e3, this.logger = E3(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e3) {
    await this.core.storage.setItem(this.storageKey, bi(e3));
  }
  async getKeyChain() {
    const e3 = await this.core.storage.getItem(this.storageKey);
    return typeof e3 < "u" ? yi(e3) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var zn3 = Object.defineProperty;
var Ln3 = (r4, e3, t2) => e3 in r4 ? zn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var x5 = (r4, e3, t2) => Ln3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ei2 = class {
  constructor(e3, t2, i6) {
    this.core = e3, this.logger = t2, x5(this, "name", Ct2), x5(this, "keychain"), x5(this, "randomSessionIdentifier", aa()), x5(this, "initialized", false), x5(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), x5(this, "hasKeys", (s4) => (this.isInitialized(), this.keychain.has(s4))), x5(this, "getClientId", async () => {
      this.isInitialized();
      const s4 = await this.getClientSeed(), n6 = Po(s4);
      return Qe(n6.publicKey);
    }), x5(this, "generateKeyPair", () => {
      this.isInitialized();
      const s4 = fa();
      return this.setPrivateKey(s4.publicKey, s4.privateKey);
    }), x5(this, "signJWT", async (s4) => {
      this.isInitialized();
      const n6 = await this.getClientSeed(), o6 = Po(n6), a4 = this.randomSessionIdentifier, c8 = Pt3;
      return await Qo(a4, s4, c8, o6);
    }), x5(this, "generateSharedKey", (s4, n6, o6) => {
      this.isInitialized();
      const a4 = this.getPrivateKey(s4), c8 = ua(a4, n6);
      return this.setSymKey(c8, o6);
    }), x5(this, "setSymKey", async (s4, n6) => {
      this.isInitialized();
      const o6 = n6 || la(s4);
      return await this.keychain.set(o6, s4), o6;
    }), x5(this, "deleteKeyPair", async (s4) => {
      this.isInitialized(), await this.keychain.del(s4);
    }), x5(this, "deleteSymKey", async (s4) => {
      this.isInitialized(), await this.keychain.del(s4);
    }), x5(this, "encode", async (s4, n6, o6) => {
      this.isInitialized();
      const a4 = rs(o6), c8 = safeJsonStringify(n6);
      if (wa(a4))
        return ga(c8, o6 == null ? void 0 : o6.encoding);
      if (ma(a4)) {
        const y6 = a4.senderPublicKey, w6 = a4.receiverPublicKey;
        s4 = await this.generateSharedKey(y6, w6);
      }
      const h6 = this.getSymKey(s4), { type: l8, senderPublicKey: p5 } = a4;
      return ha({ type: l8, symKey: h6, message: c8, senderPublicKey: p5, encoding: o6 == null ? void 0 : o6.encoding });
    }), x5(this, "decode", async (s4, n6, o6) => {
      this.isInitialized();
      const a4 = ya(n6, o6);
      if (wa(a4)) {
        const c8 = ba(n6, o6 == null ? void 0 : o6.encoding);
        return safeJsonParse(c8);
      }
      if (ma(a4)) {
        const c8 = a4.receiverPublicKey, h6 = a4.senderPublicKey;
        s4 = await this.generateSharedKey(c8, h6);
      }
      try {
        const c8 = this.getSymKey(s4), h6 = pa({ symKey: c8, encoded: n6, encoding: o6 == null ? void 0 : o6.encoding });
        return safeJsonParse(h6);
      } catch (c8) {
        this.logger.error(`Failed to decode message from topic: '${s4}', clientId: '${await this.getClientId()}'`), this.logger.error(c8);
      }
    }), x5(this, "getPayloadType", (s4, n6 = oe) => {
      const o6 = ze2({ encoded: s4, encoding: n6 });
      return Zt2(o6.type);
    }), x5(this, "getPayloadSenderPublicKey", (s4, n6 = oe) => {
      const o6 = ze2({ encoded: s4, encoding: n6 });
      return o6.senderPublicKey ? toString3(o6.senderPublicKey, rt2) : void 0;
    }), this.core = e3, this.logger = E3(t2, this.name), this.keychain = i6 || new _i2(this.core, this.logger);
  }
  get context() {
    return y3(this.logger);
  }
  async setPrivateKey(e3, t2) {
    return await this.keychain.set(e3, t2), e3;
  }
  getPrivateKey(e3) {
    return this.keychain.get(e3);
  }
  async getClientSeed() {
    let e3 = "";
    try {
      e3 = this.keychain.get(Me3);
    } catch {
      e3 = aa(), await this.keychain.set(Me3, e3);
    }
    return xn3(e3, "base16");
  }
  getSymKey(e3) {
    return this.keychain.get(e3);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var kn3 = Object.defineProperty;
var jn3 = Object.defineProperties;
var Un3 = Object.getOwnPropertyDescriptors;
var Ii2 = Object.getOwnPropertySymbols;
var Fn3 = Object.prototype.hasOwnProperty;
var Mn3 = Object.prototype.propertyIsEnumerable;
var We3 = (r4, e3, t2) => e3 in r4 ? kn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Kn3 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    Fn3.call(e3, t2) && We3(r4, t2, e3[t2]);
  if (Ii2)
    for (var t2 of Ii2(e3))
      Mn3.call(e3, t2) && We3(r4, t2, e3[t2]);
  return r4;
};
var Bn3 = (r4, e3) => jn3(r4, Un3(e3));
var K6 = (r4, e3, t2) => We3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ti2 = class extends y4 {
  constructor(e3, t2) {
    super(e3, t2), this.logger = e3, this.core = t2, K6(this, "messages", /* @__PURE__ */ new Map()), K6(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), K6(this, "name", Rt3), K6(this, "version", At2), K6(this, "initialized", false), K6(this, "storagePrefix", W3), K6(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const i6 = await this.getRelayerMessages();
          typeof i6 < "u" && (this.messages = i6);
          const s4 = await this.getRelayerMessagesWithoutClientAck();
          typeof s4 < "u" && (this.messagesWithoutClientAck = s4), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (i6) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i6);
        } finally {
          this.initialized = true;
        }
      }
    }), K6(this, "set", async (i6, s4, n6) => {
      this.isInitialized();
      const o6 = da(s4);
      let a4 = this.messages.get(i6);
      if (typeof a4 > "u" && (a4 = {}), typeof a4[o6] < "u")
        return o6;
      if (a4[o6] = s4, this.messages.set(i6, a4), n6 === ye3.inbound) {
        const c8 = this.messagesWithoutClientAck.get(i6) || {};
        this.messagesWithoutClientAck.set(i6, Bn3(Kn3({}, c8), { [o6]: s4 }));
      }
      return await this.persist(), o6;
    }), K6(this, "get", (i6) => {
      this.isInitialized();
      let s4 = this.messages.get(i6);
      return typeof s4 > "u" && (s4 = {}), s4;
    }), K6(this, "getWithoutAck", (i6) => {
      this.isInitialized();
      const s4 = {};
      for (const n6 of i6) {
        const o6 = this.messagesWithoutClientAck.get(n6) || {};
        s4[n6] = Object.values(o6);
      }
      return s4;
    }), K6(this, "has", (i6, s4) => {
      this.isInitialized();
      const n6 = this.get(i6), o6 = da(s4);
      return typeof n6[o6] < "u";
    }), K6(this, "ack", async (i6, s4) => {
      this.isInitialized();
      const n6 = this.messagesWithoutClientAck.get(i6);
      if (typeof n6 > "u")
        return;
      const o6 = da(s4);
      delete n6[o6], Object.keys(n6).length === 0 ? this.messagesWithoutClientAck.delete(i6) : this.messagesWithoutClientAck.set(i6, n6), await this.persist();
    }), K6(this, "del", async (i6) => {
      this.isInitialized(), this.messages.delete(i6), this.messagesWithoutClientAck.delete(i6), await this.persist();
    }), this.logger = E3(e3, this.name), this.core = t2;
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e3) {
    await this.core.storage.setItem(this.storageKey, bi(e3));
  }
  async setRelayerMessagesWithoutClientAck(e3) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, bi(e3));
  }
  async getRelayerMessages() {
    const e3 = await this.core.storage.getItem(this.storageKey);
    return typeof e3 < "u" ? yi(e3) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e3 = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e3 < "u" ? yi(e3) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Vn3 = Object.defineProperty;
var qn3 = Object.defineProperties;
var Gn3 = Object.getOwnPropertyDescriptors;
var Ci2 = Object.getOwnPropertySymbols;
var Wn3 = Object.prototype.hasOwnProperty;
var Hn3 = Object.prototype.propertyIsEnumerable;
var He3 = (r4, e3, t2) => e3 in r4 ? Vn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var ce = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    Wn3.call(e3, t2) && He3(r4, t2, e3[t2]);
  if (Ci2)
    for (var t2 of Ci2(e3))
      Hn3.call(e3, t2) && He3(r4, t2, e3[t2]);
  return r4;
};
var Pi2 = (r4, e3) => qn3(r4, Gn3(e3));
var G3 = (r4, e3, t2) => He3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Yn3 = class extends m3 {
  constructor(e3, t2) {
    super(e3, t2), this.relayer = e3, this.logger = t2, G3(this, "events", new import_events9.EventEmitter()), G3(this, "name", Nt3), G3(this, "queue", /* @__PURE__ */ new Map()), G3(this, "publishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), G3(this, "initialPublishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), G3(this, "needsTransportRestart", false), G3(this, "publish", async (i6, s4, n6) => {
      var o6, a4, c8, h6, l8;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: i6, message: s4, opts: n6 } });
      const p5 = (n6 == null ? void 0 : n6.ttl) || xt3, y6 = (n6 == null ? void 0 : n6.prompt) || false, w6 = (n6 == null ? void 0 : n6.tag) || 0, u4 = (n6 == null ? void 0 : n6.id) || getBigIntRpcId().toString(), m6 = Ea(xa().protocol), D3 = { id: u4, method: (n6 == null ? void 0 : n6.publishMethod) || m6.publish, params: ce({ topic: i6, message: s4, ttl: p5, prompt: y6, tag: w6, attestation: n6 == null ? void 0 : n6.attestation }, n6 == null ? void 0 : n6.tvf) }, _6 = `Failed to publish payload, please try again. id:${u4} tag:${w6}`;
      try {
        Dt2((o6 = D3.params) == null ? void 0 : o6.prompt) && ((a4 = D3.params) == null || delete a4.prompt), Dt2((c8 = D3.params) == null ? void 0 : c8.tag) && ((h6 = D3.params) == null || delete h6.tag);
        const E6 = new Promise(async (L5) => {
          const I4 = ({ id: T7 }) => {
            var S6;
            ((S6 = D3.id) == null ? void 0 : S6.toString()) === T7.toString() && (this.removeRequestFromQueue(T7), this.relayer.events.removeListener(C4.publish, I4), L5());
          };
          this.relayer.events.on(C4.publish, I4);
          const k6 = Ei(new Promise((T7, S6) => {
            this.rpcPublish(D3, n6).then(T7).catch((O7) => {
              this.logger.warn(O7, O7 == null ? void 0 : O7.message), S6(O7);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${u4} tag:${w6}`);
          try {
            await k6, this.events.removeListener(C4.publish, I4);
          } catch (T7) {
            this.queue.set(u4, { request: D3, opts: n6, attempt: 1 }), this.logger.warn(T7, T7 == null ? void 0 : T7.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: u4, topic: i6, message: s4, opts: n6 } }), await Ei(E6, this.publishTimeout, _6);
      } catch (E6) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(E6), (l8 = n6 == null ? void 0 : n6.internal) != null && l8.throwOnFailedPublish)
          throw E6;
      } finally {
        this.queue.delete(u4);
      }
    }), G3(this, "publishCustom", async (i6) => {
      var s4, n6, o6, a4, c8;
      this.logger.debug("Publishing custom payload"), this.logger.trace({ type: "method", method: "publishCustom", params: i6 });
      const { payload: h6, opts: l8 = {} } = i6, { attestation: p5, tvf: y6, publishMethod: w6, prompt: u4, tag: m6, ttl: D3 = import_time4.FIVE_MINUTES } = l8, _6 = l8.id || getBigIntRpcId().toString(), E6 = Ea(xa().protocol), L5 = w6 || E6.publish, I4 = { id: _6, method: L5, params: ce(Pi2(ce({}, h6), { ttl: D3, prompt: u4, tag: m6, attestation: p5 }), y6) }, k6 = `Failed to publish custom payload, please try again. id:${_6} tag:${m6}`;
      try {
        Dt2((s4 = I4.params) == null ? void 0 : s4.prompt) && ((n6 = I4.params) == null || delete n6.prompt), Dt2((o6 = I4.params) == null ? void 0 : o6.tag) && ((a4 = I4.params) == null || delete a4.tag);
        const T7 = new Promise(async (S6) => {
          const O7 = ({ id: Z2 }) => {
            var _e4;
            ((_e4 = I4.id) == null ? void 0 : _e4.toString()) === Z2.toString() && (this.removeRequestFromQueue(Z2), this.relayer.events.removeListener(C4.publish, O7), S6());
          };
          this.relayer.events.on(C4.publish, O7);
          const te4 = Ei(new Promise((Z2, _e4) => {
            this.rpcPublish(I4, l8).then(Z2).catch((Ee4) => {
              this.logger.warn(Ee4, Ee4 == null ? void 0 : Ee4.message), _e4(Ee4);
            });
          }), this.initialPublishTimeout, `Failed initial custom payload publish, retrying.... method:${L5} id:${_6} tag:${m6}`);
          try {
            await te4, this.events.removeListener(C4.publish, O7);
          } catch (Z2) {
            this.queue.set(_6, { request: I4, opts: l8, attempt: 1 }), this.logger.warn(Z2, Z2 == null ? void 0 : Z2.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: _6, payload: h6, opts: l8 } }), await Ei(T7, this.publishTimeout, k6);
      } catch (T7) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(T7), (c8 = l8 == null ? void 0 : l8.internal) != null && c8.throwOnFailedPublish)
          throw T7;
      } finally {
        this.queue.delete(_6);
      }
    }), G3(this, "on", (i6, s4) => {
      this.events.on(i6, s4);
    }), G3(this, "once", (i6, s4) => {
      this.events.once(i6, s4);
    }), G3(this, "off", (i6, s4) => {
      this.events.off(i6, s4);
    }), G3(this, "removeListener", (i6, s4) => {
      this.events.removeListener(i6, s4);
    }), this.relayer = e3, this.logger = E3(t2, this.name), this.registerEventListeners();
  }
  get context() {
    return y3(this.logger);
  }
  async rpcPublish(e3, t2) {
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: e3 });
    const i6 = await this.relayer.request(e3);
    return this.relayer.events.emit(C4.publish, ce(ce({}, e3), t2)), this.logger.debug("Successfully Published Payload"), i6;
  }
  removeRequestFromQueue(e3) {
    this.queue.delete(e3);
  }
  checkQueue() {
    this.queue.forEach(async (e3, t2) => {
      var i6;
      const s4 = e3.attempt + 1;
      this.queue.set(t2, Pi2(ce({}, e3), { attempt: s4 })), this.logger.warn({}, `Publisher: queue->publishing: ${e3.request.id}, tag: ${(i6 = e3.request.params) == null ? void 0 : i6.tag}, attempt: ${s4}`), await this.rpcPublish(e3.request, e3.opts), this.logger.warn({}, `Publisher: queue->published: ${e3.request.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r2.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C4.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C4.message_ack, (e3) => {
      this.removeRequestFromQueue(e3.id.toString());
    });
  }
};
var Jn3 = Object.defineProperty;
var Xn3 = (r4, e3, t2) => e3 in r4 ? Jn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var he3 = (r4, e3, t2) => Xn3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Zn3 = class {
  constructor() {
    he3(this, "map", /* @__PURE__ */ new Map()), he3(this, "set", (e3, t2) => {
      const i6 = this.get(e3);
      this.exists(e3, t2) || this.map.set(e3, [...i6, t2]);
    }), he3(this, "get", (e3) => this.map.get(e3) || []), he3(this, "exists", (e3, t2) => this.get(e3).includes(t2)), he3(this, "delete", (e3, t2) => {
      if (typeof t2 > "u") {
        this.map.delete(e3);
        return;
      }
      if (!this.map.has(e3))
        return;
      const i6 = this.get(e3);
      if (!this.exists(e3, t2))
        return;
      const s4 = i6.filter((n6) => n6 !== t2);
      if (!s4.length) {
        this.map.delete(e3);
        return;
      }
      this.map.set(e3, s4);
    }), he3(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Qn2 = Object.defineProperty;
var eo3 = Object.defineProperties;
var to3 = Object.getOwnPropertyDescriptors;
var Si2 = Object.getOwnPropertySymbols;
var io3 = Object.prototype.hasOwnProperty;
var so3 = Object.prototype.propertyIsEnumerable;
var Ye3 = (r4, e3, t2) => e3 in r4 ? Qn2(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var fe2 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    io3.call(e3, t2) && Ye3(r4, t2, e3[t2]);
  if (Si2)
    for (var t2 of Si2(e3))
      so3.call(e3, t2) && Ye3(r4, t2, e3[t2]);
  return r4;
};
var Je3 = (r4, e3) => eo3(r4, to3(e3));
var f8 = (r4, e3, t2) => Ye3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Oi2 = class extends P3 {
  constructor(e3, t2) {
    super(e3, t2), this.relayer = e3, this.logger = t2, f8(this, "subscriptions", /* @__PURE__ */ new Map()), f8(this, "topicMap", new Zn3()), f8(this, "events", new import_events9.EventEmitter()), f8(this, "name", Mt3), f8(this, "version", Kt3), f8(this, "pending", /* @__PURE__ */ new Map()), f8(this, "cached", []), f8(this, "initialized", false), f8(this, "storagePrefix", W3), f8(this, "subscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), f8(this, "initialSubscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), f8(this, "clientId"), f8(this, "batchSubscribeTopicsLimit", 500), f8(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f8(this, "subscribe", async (i6, s4) => {
      var n6;
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i6, opts: s4 } });
      try {
        const o6 = xa(s4), a4 = { topic: i6, relay: o6, transportType: s4 == null ? void 0 : s4.transportType };
        (n6 = s4 == null ? void 0 : s4.internal) != null && n6.skipSubscribe || this.pending.set(i6, a4);
        const c8 = await this.rpcSubscribe(i6, o6, s4);
        return typeof c8 == "string" && (this.onSubscribe(c8, a4), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i6, opts: s4 } })), c8;
      } catch (o6) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(o6), o6;
      }
    }), f8(this, "unsubscribe", async (i6, s4) => {
      this.isInitialized(), typeof (s4 == null ? void 0 : s4.id) < "u" ? await this.unsubscribeById(i6, s4.id, s4) : await this.unsubscribeByTopic(i6, s4);
    }), f8(this, "isSubscribed", (i6) => new Promise((s4) => {
      s4(this.topicMap.topics.includes(i6));
    })), f8(this, "isKnownTopic", (i6) => new Promise((s4) => {
      s4(this.topicMap.topics.includes(i6) || this.pending.has(i6) || this.cached.some((n6) => n6.topic === i6));
    })), f8(this, "on", (i6, s4) => {
      this.events.on(i6, s4);
    }), f8(this, "once", (i6, s4) => {
      this.events.once(i6, s4);
    }), f8(this, "off", (i6, s4) => {
      this.events.off(i6, s4);
    }), f8(this, "removeListener", (i6, s4) => {
      this.events.removeListener(i6, s4);
    }), f8(this, "start", async () => {
      await this.onConnect();
    }), f8(this, "stop", async () => {
      await this.onDisconnect();
    }), f8(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f8(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected))
        return;
      const i6 = [];
      this.pending.forEach((s4) => {
        i6.push(s4);
      }), await this.batchSubscribe(i6);
    }), f8(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r2.pulse, async () => {
        await this.checkPending();
      }), this.events.on(U2.created, async (i6) => {
        const s4 = U2.created;
        this.logger.info(`Emitting ${s4}`), this.logger.debug({ type: "event", event: s4, data: i6 }), await this.persist();
      }), this.events.on(U2.deleted, async (i6) => {
        const s4 = U2.deleted;
        this.logger.info(`Emitting ${s4}`), this.logger.debug({ type: "event", event: s4, data: i6 }), await this.persist();
      });
    }), this.relayer = e3, this.logger = E3(t2, this.name), this.clientId = "";
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e3, t2) {
    let i6 = false;
    try {
      i6 = this.getSubscription(e3).topic === t2;
    } catch {
    }
    return i6;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e3, t2) {
    const i6 = this.topicMap.get(e3);
    await Promise.all(i6.map(async (s4) => await this.unsubscribeById(e3, s4, t2)));
  }
  async unsubscribeById(e3, t2, i6) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t2, opts: i6 } });
    try {
      const s4 = xa(i6);
      await this.restartToComplete({ topic: e3, id: t2, relay: s4 }), await this.rpcUnsubscribe(e3, t2, s4);
      const n6 = zt2("USER_DISCONNECTED", `${this.name}, ${e3}`);
      await this.onUnsubscribe(e3, t2, n6), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t2, opts: i6 } });
    } catch (s4) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(s4), s4;
    }
  }
  async rpcSubscribe(e3, t2, i6) {
    var s4, n6;
    const o6 = await this.getSubscriptionId(e3);
    if ((s4 = i6 == null ? void 0 : i6.internal) != null && s4.skipSubscribe)
      return o6;
    (!i6 || (i6 == null ? void 0 : i6.transportType) === ee2.relay) && await this.restartToComplete({ topic: e3, id: e3, relay: t2 });
    const a4 = { method: Ea(t2.protocol).subscribe, params: { topic: e3 } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: a4 });
    const c8 = (n6 = i6 == null ? void 0 : i6.internal) == null ? void 0 : n6.throwOnFailedPublish;
    try {
      if ((i6 == null ? void 0 : i6.transportType) === ee2.link_mode)
        return setTimeout(() => {
          (this.relayer.connected || this.relayer.connecting) && this.relayer.request(a4).catch((p5) => this.logger.warn(p5));
        }, (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), o6;
      const h6 = new Promise(async (p5) => {
        const y6 = (w6) => {
          w6.topic === e3 && (this.events.removeListener(U2.created, y6), p5(w6.id));
        };
        this.events.on(U2.created, y6);
        try {
          const w6 = await Ei(new Promise((u4, m6) => {
            this.relayer.request(a4).catch((D3) => {
              this.logger.warn(D3, D3 == null ? void 0 : D3.message), m6(D3);
            }).then(u4);
          }), this.initialSubscribeTimeout, `Subscribing to ${e3} failed, please try again`);
          this.events.removeListener(U2.created, y6), p5(w6);
        } catch {
        }
      }), l8 = await Ei(h6, this.subscribeTimeout, `Subscribing to ${e3} failed, please try again`);
      if (!l8 && c8)
        throw new Error(`Subscribing to ${e3} failed, please try again`);
      return l8 ? o6 : null;
    } catch (h6) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C4.connection_stalled), c8)
        throw h6;
    }
    return null;
  }
  async rpcBatchSubscribe(e3) {
    if (!e3.length)
      return;
    const t2 = e3[0].relay, i6 = { method: Ea(t2.protocol).batchSubscribe, params: { topics: e3.map((s4) => s4.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i6 });
    try {
      await await Ei(new Promise((s4) => {
        this.relayer.request(i6).catch((n6) => this.logger.warn(n6)).then(s4);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C4.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e3) {
    if (!e3.length)
      return;
    const t2 = e3[0].relay, i6 = { method: Ea(t2.protocol).batchFetchMessages, params: { topics: e3.map((n6) => n6.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i6 });
    let s4;
    try {
      s4 = await await Ei(new Promise((n6, o6) => {
        this.relayer.request(i6).catch((a4) => {
          this.logger.warn(a4), o6(a4);
        }).then(n6);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C4.connection_stalled);
    }
    return s4;
  }
  rpcUnsubscribe(e3, t2, i6) {
    const s4 = { method: Ea(i6.protocol).unsubscribe, params: { topic: e3, id: t2 } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s4 }), this.relayer.request(s4);
  }
  onSubscribe(e3, t2) {
    this.setSubscription(e3, Je3(fe2({}, t2), { id: e3 })), this.pending.delete(t2.topic);
  }
  onBatchSubscribe(e3) {
    e3.length && e3.forEach((t2) => {
      this.setSubscription(t2.id, fe2({}, t2)), this.pending.delete(t2.topic);
    });
  }
  async onUnsubscribe(e3, t2, i6) {
    this.events.removeAllListeners(t2), this.hasSubscription(t2, e3) && this.deleteSubscription(t2, i6), await this.relayer.messages.del(e3);
  }
  async setRelayerSubscriptions(e3) {
    await this.relayer.core.storage.setItem(this.storageKey, e3);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e3, t2) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e3, subscription: t2 }), this.addSubscription(e3, t2);
  }
  addSubscription(e3, t2) {
    this.subscriptions.set(e3, fe2({}, t2)), this.topicMap.set(t2.topic, e3), this.events.emit(U2.created, t2);
  }
  getSubscription(e3) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e3 });
    const t2 = this.subscriptions.get(e3);
    if (!t2) {
      const { message: i6 } = Bt2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw new Error(i6);
    }
    return t2;
  }
  deleteSubscription(e3, t2) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e3, reason: t2 });
    const i6 = this.getSubscription(e3);
    this.subscriptions.delete(e3), this.topicMap.delete(i6.topic, e3), this.events.emit(U2.deleted, Je3(fe2({}, i6), { reason: t2 }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit(U2.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e3 = [...this.cached], t2 = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let i6 = 0; i6 < t2; i6++) {
        const s4 = e3.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s4);
      }
    }
    this.events.emit(U2.resubscribed);
  }
  async restore() {
    try {
      const e3 = await this.getRelayerSubscriptions();
      if (typeof e3 > "u" || !e3.length)
        return;
      if (this.subscriptions.size && !e3.every((t2) => {
        var i6;
        return t2.topic === ((i6 = this.subscriptions.get(t2.id)) == null ? void 0 : i6.topic);
      })) {
        const { message: t2 } = Bt2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e3);
    }
  }
  async batchSubscribe(e3) {
    e3.length && (await this.rpcBatchSubscribe(e3), this.onBatchSubscribe(await Promise.all(e3.map(async (t2) => Je3(fe2({}, t2), { id: await this.getSubscriptionId(t2.topic) })))));
  }
  async batchFetchMessages(e3) {
    if (!e3.length)
      return;
    this.logger.trace(`Fetching batch messages for ${e3.length} subscriptions`);
    const t2 = await this.rpcBatchFetchMessages(e3);
    t2 && t2.messages && (await Ci((0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t2.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  async restartToComplete(e3) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e3), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e3) {
    return da(e3 + await this.getClientId());
  }
};
var ro2 = Object.defineProperty;
var Ri2 = Object.getOwnPropertySymbols;
var no2 = Object.prototype.hasOwnProperty;
var oo2 = Object.prototype.propertyIsEnumerable;
var Xe3 = (r4, e3, t2) => e3 in r4 ? ro2(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Ai2 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    no2.call(e3, t2) && Xe3(r4, t2, e3[t2]);
  if (Ri2)
    for (var t2 of Ri2(e3))
      oo2.call(e3, t2) && Xe3(r4, t2, e3[t2]);
  return r4;
};
var g4 = (r4, e3, t2) => Xe3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var xi2 = class extends d3 {
  constructor(e3) {
    super(e3), g4(this, "protocol", "wc"), g4(this, "version", 2), g4(this, "core"), g4(this, "logger"), g4(this, "events", new import_events9.EventEmitter()), g4(this, "provider"), g4(this, "messages"), g4(this, "subscriber"), g4(this, "publisher"), g4(this, "name", Lt3), g4(this, "transportExplicitlyClosed", false), g4(this, "initialized", false), g4(this, "connectionAttemptInProgress", false), g4(this, "relayUrl"), g4(this, "projectId"), g4(this, "packageName"), g4(this, "bundleId"), g4(this, "hasExperiencedNetworkDisruption", false), g4(this, "pingTimeout"), g4(this, "heartBeatTimeout", (0, import_time4.toMiliseconds)(import_time4.THIRTY_SECONDS + import_time4.FIVE_SECONDS)), g4(this, "reconnectTimeout"), g4(this, "connectPromise"), g4(this, "reconnectInProgress", false), g4(this, "requestsInFlight", []), g4(this, "connectTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), g4(this, "request", async (t2) => {
      var i6, s4;
      this.logger.debug("Publishing Request Payload");
      const n6 = t2.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: n6, method: t2.method, topic: (i6 = t2.params) == null ? void 0 : i6.topic }, "relayer.request - publishing...");
        const o6 = `${n6}:${((s4 = t2.params) == null ? void 0 : s4.tag) || ""}`;
        this.requestsInFlight.push(o6);
        const a4 = await this.provider.request(t2);
        return this.requestsInFlight = this.requestsInFlight.filter((c8) => c8 !== o6), a4;
      } catch (o6) {
        throw this.logger.debug(`Failed to Publish Request: ${n6}`), o6;
      }
    }), g4(this, "resetPingTimeout", () => {
      rn2() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var t2, i6, s4, n6;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (n6 = (s4 = (i6 = (t2 = this.provider) == null ? void 0 : t2.connection) == null ? void 0 : i6.socket) == null ? void 0 : s4.terminate) == null || n6.call(s4);
        } catch (o6) {
          this.logger.warn(o6, o6 == null ? void 0 : o6.message);
        }
      }, this.heartBeatTimeout));
    }), g4(this, "onPayloadHandler", (t2) => {
      this.onProviderPayload(t2), this.resetPingTimeout();
    }), g4(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C4.connect);
    }), g4(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), g4(this, "onProviderErrorHandler", (t2) => {
      this.logger.fatal(`Fatal socket error: ${t2.message}`), this.events.emit(C4.error, t2), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), g4(this, "registerProviderListeners", () => {
      this.provider.on(M4.payload, this.onPayloadHandler), this.provider.on(M4.connect, this.onConnectHandler), this.provider.on(M4.disconnect, this.onDisconnectHandler), this.provider.on(M4.error, this.onProviderErrorHandler);
    }), this.core = e3.core, this.logger = typeof e3.logger < "u" && typeof e3.logger != "string" ? E3(e3.logger, this.name) : (0, import_pino2.default)(k4({ level: e3.logger || zt3 })), this.messages = new Ti2(this.logger, e3.core), this.subscriber = new Oi2(this, this.logger), this.publisher = new Yn3(this, this.logger), this.projectId = e3 == null ? void 0 : e3.projectId, this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || Ke3, ci() ? this.packageName = ai() : fi() && (this.bundleId = ai()), this.provider = {};
  }
  async init() {
    this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.transportOpen().catch((e3) => this.logger.warn(e3, e3 == null ? void 0 : e3.message));
  }
  get context() {
    return y3(this.logger);
  }
  get connected() {
    var e3, t2, i6;
    return ((i6 = (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t2.socket) == null ? void 0 : i6.readyState) === 1 || false;
  }
  get connecting() {
    var e3, t2, i6;
    return ((i6 = (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t2.socket) == null ? void 0 : i6.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e3, t2, i6) {
    this.isInitialized(), await this.publisher.publish(e3, t2, i6), await this.recordMessageEvent({ topic: e3, message: t2, publishedAt: Date.now(), transportType: ee2.relay }, ye3.outbound);
  }
  async publishCustom(e3) {
    this.isInitialized(), await this.publisher.publishCustom(e3);
  }
  async subscribe(e3, t2) {
    var i6, s4, n6;
    this.isInitialized(), (!(t2 != null && t2.transportType) || (t2 == null ? void 0 : t2.transportType) === "relay") && await this.toEstablishConnection();
    const o6 = typeof ((i6 = t2 == null ? void 0 : t2.internal) == null ? void 0 : i6.throwOnFailedPublish) > "u" ? true : (s4 = t2 == null ? void 0 : t2.internal) == null ? void 0 : s4.throwOnFailedPublish;
    let a4 = ((n6 = this.subscriber.topicMap.get(e3)) == null ? void 0 : n6[0]) || "", c8;
    const h6 = (l8) => {
      l8.topic === e3 && (this.subscriber.off(U2.created, h6), c8());
    };
    return await Promise.all([new Promise((l8) => {
      c8 = l8, this.subscriber.on(U2.created, h6);
    }), new Promise(async (l8, p5) => {
      a4 = await this.subscriber.subscribe(e3, Ai2({ internal: { throwOnFailedPublish: o6 } }, t2)).catch((y6) => {
        o6 && p5(y6);
      }) || a4, l8();
    })]), a4;
  }
  async unsubscribe(e3, t2) {
    this.isInitialized(), await this.subscriber.unsubscribe(e3, t2);
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await Ei(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e3) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.info("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t2, i6) => {
      await this.connect(e3).then(t2).catch(i6).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected)
      throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e3) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e3 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await fu())
      throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e3) {
    if ((e3 == null ? void 0 : e3.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t2 = e3.sort((i6, s4) => i6.publishedAt - s4.publishedAt);
    this.logger.debug(`Batch of ${t2.length} message events sorted`);
    for (const i6 of t2)
      try {
        await this.onMessageEvent(i6);
      } catch (s4) {
        this.logger.warn(s4, "Error while processing batch message event: " + (s4 == null ? void 0 : s4.message));
      }
    this.logger.trace(`Batch of ${t2.length} message events processed`);
  }
  async onLinkMessageEvent(e3, t2) {
    const { topic: i6 } = e3;
    if (!t2.sessionExists) {
      const s4 = Si(import_time4.FIVE_MINUTES), n6 = { topic: i6, expiry: s4, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(i6, n6);
    }
    this.events.emit(C4.message, e3), await this.recordMessageEvent(e3, ye3.inbound);
  }
  async connect(e3) {
    await this.confirmOnlineStateOrThrow(), e3 && e3 !== this.relayUrl && (this.relayUrl = e3, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t2 = 1;
    for (; t2 < 6; ) {
      try {
        if (this.transportExplicitlyClosed)
          break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t2}...`), await this.createProvider(), await new Promise(async (i6, s4) => {
          const n6 = () => {
            s4(new Error("Connection interrupted while trying to connect"));
          };
          this.provider.once(M4.disconnect, n6), await Ei(new Promise((o6, a4) => {
            this.provider.connect().then(o6).catch(a4);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o6) => {
            s4(o6);
          }).finally(() => {
            this.provider.off(M4.disconnect, n6), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o6, a4) => {
            const c8 = () => {
              s4(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(M4.disconnect, c8), await this.subscriber.start().then(o6).catch(a4).finally(() => {
              this.provider.off(M4.disconnect, c8);
            });
          }), this.hasExperiencedNetworkDisruption = false, i6();
        });
      } catch (i6) {
        await this.subscriber.stop();
        const s4 = i6;
        this.logger.warn({}, s4.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t2}`);
        break;
      }
      await new Promise((i6) => setTimeout(i6, (0, import_time4.toMiliseconds)(t2 * 1))), t2++;
    }
  }
  startPingTimeout() {
    var e3, t2, i6, s4, n6;
    if (rn2())
      try {
        (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) != null && t2.socket && ((n6 = (s4 = (i6 = this.provider) == null ? void 0 : i6.connection) == null ? void 0 : s4.socket) == null || n6.on("ping", () => {
          this.resetPingTimeout();
        })), this.resetPingTimeout();
      } catch (o6) {
        this.logger.warn(o6, o6 == null ? void 0 : o6.message);
      }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e3 = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o4(new f7(di({ sdkVersion: Pe3, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e3, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e3, t2) {
    const { topic: i6, message: s4 } = e3;
    await this.messages.set(i6, s4, t2);
  }
  async shouldIgnoreMessageEvent(e3) {
    const { topic: t2, message: i6 } = e3;
    if (!i6 || i6.length === 0)
      return this.logger.warn(`Ignoring invalid/empty message: ${i6}`), true;
    if (!await this.subscriber.isKnownTopic(t2))
      return this.logger.warn(`Ignoring message for unknown topic ${t2}`), true;
    const s4 = this.messages.has(t2, i6);
    return s4 && this.logger.warn(`Ignoring duplicate message: ${i6}`), s4;
  }
  async onProviderPayload(e3) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e3 }), isJsonRpcRequest(e3)) {
      if (!e3.method.endsWith(kt3))
        return;
      const t2 = e3.params, { topic: i6, message: s4, publishedAt: n6, attestation: o6 } = t2.data, a4 = { topic: i6, message: s4, publishedAt: n6, transportType: ee2.relay, attestation: o6 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Ai2({ type: "event", event: t2.id }, a4)), this.events.emit(t2.id, a4), await this.acknowledgePayload(e3), await this.onMessageEvent(a4);
    } else
      isJsonRpcResponse(e3) && this.events.emit(C4.message_ack, e3);
  }
  async onMessageEvent(e3) {
    await this.shouldIgnoreMessageEvent(e3) || (await this.recordMessageEvent(e3, ye3.inbound), this.events.emit(C4.message, e3));
  }
  async acknowledgePayload(e3) {
    const t2 = formatJsonRpcResult(e3.id, true);
    await this.provider.connection.send(t2);
  }
  unregisterProviderListeners() {
    this.provider.off(M4.payload, this.onPayloadHandler), this.provider.off(M4.connect, this.onConnectHandler), this.provider.off(M4.disconnect, this.onDisconnectHandler), this.provider.off(M4.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e3 = await fu();
    au(async (t2) => {
      e3 !== t2 && (e3 = t2, t2 ? await this.transportOpen().catch((i6) => this.logger.error(i6, i6 == null ? void 0 : i6.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    }), this.core.heartbeat.on(r2.pulse, async () => {
      if (!this.transportExplicitlyClosed && !this.connected && uu())
        try {
          await this.confirmOnlineStateOrThrow(), await this.transportOpen();
        } catch (t2) {
          this.logger.warn(t2, t2 == null ? void 0 : t2.message);
        }
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C4.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e3) => this.logger.error(e3, e3 == null ? void 0 : e3.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time4.toMiliseconds)(jt3)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectPromise) {
        await this.connectPromise;
        return;
      }
      await this.connect();
    }
  }
};
function ao3(r4, e3) {
  return r4 === e3 || Number.isNaN(r4) && Number.isNaN(e3);
}
function Ni2(r4) {
  return Object.getOwnPropertySymbols(r4).filter((e3) => Object.prototype.propertyIsEnumerable.call(r4, e3));
}
function $i2(r4) {
  return r4 == null ? r4 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r4);
}
var co3 = "[object RegExp]";
var ho3 = "[object String]";
var lo3 = "[object Number]";
var uo2 = "[object Boolean]";
var zi2 = "[object Arguments]";
var go3 = "[object Symbol]";
var po3 = "[object Date]";
var yo3 = "[object Map]";
var bo3 = "[object Set]";
var mo3 = "[object Array]";
var fo2 = "[object Function]";
var Do3 = "[object ArrayBuffer]";
var Ze3 = "[object Object]";
var vo3 = "[object Error]";
var wo3 = "[object DataView]";
var _o3 = "[object Uint8Array]";
var Eo3 = "[object Uint8ClampedArray]";
var Io3 = "[object Uint16Array]";
var To3 = "[object Uint32Array]";
var Co3 = "[object BigUint64Array]";
var Po3 = "[object Int8Array]";
var So3 = "[object Int16Array]";
var Oo3 = "[object Int32Array]";
var Ro3 = "[object BigInt64Array]";
var Ao3 = "[object Float32Array]";
var xo3 = "[object Float64Array]";
function No3() {
}
function Li2(r4) {
  if (!r4 || typeof r4 != "object")
    return false;
  const e3 = Object.getPrototypeOf(r4);
  return e3 === null || e3 === Object.prototype || Object.getPrototypeOf(e3) === null ? Object.prototype.toString.call(r4) === "[object Object]" : false;
}
function $o3(r4, e3, t2) {
  return De3(r4, e3, void 0, void 0, void 0, void 0, t2);
}
function De3(r4, e3, t2, i6, s4, n6, o6) {
  const a4 = o6(r4, e3, t2, i6, s4, n6);
  if (a4 !== void 0)
    return a4;
  if (typeof r4 == typeof e3)
    switch (typeof r4) {
      case "bigint":
      case "string":
      case "boolean":
      case "symbol":
      case "undefined":
        return r4 === e3;
      case "number":
        return r4 === e3 || Object.is(r4, e3);
      case "function":
        return r4 === e3;
      case "object":
        return ve3(r4, e3, n6, o6);
    }
  return ve3(r4, e3, n6, o6);
}
function ve3(r4, e3, t2, i6) {
  if (Object.is(r4, e3))
    return true;
  let s4 = $i2(r4), n6 = $i2(e3);
  if (s4 === zi2 && (s4 = Ze3), n6 === zi2 && (n6 = Ze3), s4 !== n6)
    return false;
  switch (s4) {
    case ho3:
      return r4.toString() === e3.toString();
    case lo3: {
      const c8 = r4.valueOf(), h6 = e3.valueOf();
      return ao3(c8, h6);
    }
    case uo2:
    case po3:
    case go3:
      return Object.is(r4.valueOf(), e3.valueOf());
    case co3:
      return r4.source === e3.source && r4.flags === e3.flags;
    case fo2:
      return r4 === e3;
  }
  t2 = t2 ?? /* @__PURE__ */ new Map();
  const o6 = t2.get(r4), a4 = t2.get(e3);
  if (o6 != null && a4 != null)
    return o6 === e3;
  t2.set(r4, e3), t2.set(e3, r4);
  try {
    switch (s4) {
      case yo3: {
        if (r4.size !== e3.size)
          return false;
        for (const [c8, h6] of r4.entries())
          if (!e3.has(c8) || !De3(h6, e3.get(c8), c8, r4, e3, t2, i6))
            return false;
        return true;
      }
      case bo3: {
        if (r4.size !== e3.size)
          return false;
        const c8 = Array.from(r4.values()), h6 = Array.from(e3.values());
        for (let l8 = 0; l8 < c8.length; l8++) {
          const p5 = c8[l8], y6 = h6.findIndex((w6) => De3(p5, w6, void 0, r4, e3, t2, i6));
          if (y6 === -1)
            return false;
          h6.splice(y6, 1);
        }
        return true;
      }
      case mo3:
      case _o3:
      case Eo3:
      case Io3:
      case To3:
      case Co3:
      case Po3:
      case So3:
      case Oo3:
      case Ro3:
      case Ao3:
      case xo3: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r4) !== Buffer.isBuffer(e3) || r4.length !== e3.length)
          return false;
        for (let c8 = 0; c8 < r4.length; c8++)
          if (!De3(r4[c8], e3[c8], c8, r4, e3, t2, i6))
            return false;
        return true;
      }
      case Do3:
        return r4.byteLength !== e3.byteLength ? false : ve3(new Uint8Array(r4), new Uint8Array(e3), t2, i6);
      case wo3:
        return r4.byteLength !== e3.byteLength || r4.byteOffset !== e3.byteOffset ? false : ve3(new Uint8Array(r4), new Uint8Array(e3), t2, i6);
      case vo3:
        return r4.name === e3.name && r4.message === e3.message;
      case Ze3: {
        if (!(ve3(r4.constructor, e3.constructor, t2, i6) || Li2(r4) && Li2(e3)))
          return false;
        const h6 = [...Object.keys(r4), ...Ni2(r4)], l8 = [...Object.keys(e3), ...Ni2(e3)];
        if (h6.length !== l8.length)
          return false;
        for (let p5 = 0; p5 < h6.length; p5++) {
          const y6 = h6[p5], w6 = r4[y6];
          if (!Object.hasOwn(e3, y6))
            return false;
          const u4 = e3[y6];
          if (!De3(w6, u4, y6, r4, e3, t2, i6))
            return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t2.delete(r4), t2.delete(e3);
  }
}
function zo3(r4, e3) {
  return $o3(r4, e3, No3);
}
var Lo3 = Object.defineProperty;
var ki2 = Object.getOwnPropertySymbols;
var ko3 = Object.prototype.hasOwnProperty;
var jo3 = Object.prototype.propertyIsEnumerable;
var Qe2 = (r4, e3, t2) => e3 in r4 ? Lo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var ji2 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    ko3.call(e3, t2) && Qe2(r4, t2, e3[t2]);
  if (ki2)
    for (var t2 of ki2(e3))
      jo3.call(e3, t2) && Qe2(r4, t2, e3[t2]);
  return r4;
};
var F2 = (r4, e3, t2) => Qe2(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ui2 = class extends f6 {
  constructor(e3, t2, i6, s4 = W3, n6 = void 0) {
    super(e3, t2, i6, s4), this.core = e3, this.logger = t2, this.name = i6, F2(this, "map", /* @__PURE__ */ new Map()), F2(this, "version", Ut3), F2(this, "cached", []), F2(this, "initialized", false), F2(this, "getKey"), F2(this, "storagePrefix", W3), F2(this, "recentlyDeleted", []), F2(this, "recentlyDeletedLimit", 200), F2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o6) => {
        this.getKey && o6 !== null && !Dt2(o6) ? this.map.set(this.getKey(o6), o6) : Fa(o6) ? this.map.set(o6.id, o6) : Za(o6) && this.map.set(o6.topic, o6);
      }), this.cached = [], this.initialized = true);
    }), F2(this, "set", async (o6, a4) => {
      this.isInitialized(), this.map.has(o6) ? await this.update(o6, a4) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o6, value: a4 }), this.map.set(o6, a4), await this.persist());
    }), F2(this, "get", (o6) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o6 }), this.getData(o6))), F2(this, "getAll", (o6) => (this.isInitialized(), o6 ? this.values.filter((a4) => Object.keys(o6).every((c8) => zo3(a4[c8], o6[c8]))) : this.values)), F2(this, "update", async (o6, a4) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o6, update: a4 });
      const c8 = ji2(ji2({}, this.getData(o6)), a4);
      this.map.set(o6, c8), await this.persist();
    }), F2(this, "delete", async (o6, a4) => {
      this.isInitialized(), this.map.has(o6) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o6, reason: a4 }), this.map.delete(o6), this.addToRecentlyDeleted(o6), await this.persist());
    }), this.logger = E3(t2, this.name), this.storagePrefix = s4, this.getKey = n6;
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e3) {
    this.recentlyDeleted.push(e3), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e3) {
    const t2 = this.map.get(e3);
    if (!t2) {
      if (this.recentlyDeleted.includes(e3)) {
        const { message: s4 } = Bt2("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e3}`);
        throw this.logger.error(s4), new Error(s4);
      }
      const { message: i6 } = Bt2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw this.logger.error(i6), new Error(i6);
    }
    return t2;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e3 = await this.getDataStore();
      if (typeof e3 > "u" || !e3.length)
        return;
      if (this.map.size) {
        const { message: t2 } = Bt2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Uo3 = Object.defineProperty;
var Fo3 = (r4, e3, t2) => e3 in r4 ? Uo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var d5 = (r4, e3, t2) => Fo3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Fi2 = class {
  constructor(e3, t2) {
    this.core = e3, this.logger = t2, d5(this, "name", Bt3), d5(this, "version", Vt3), d5(this, "events", new import_events9.default()), d5(this, "pairings"), d5(this, "initialized", false), d5(this, "storagePrefix", W3), d5(this, "ignoredPayloadTypes", [ie]), d5(this, "registeredMethods", []), d5(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), d5(this, "register", ({ methods: i6 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...i6])];
    }), d5(this, "create", async (i6) => {
      this.isInitialized();
      const s4 = aa(), n6 = await this.core.crypto.setSymKey(s4), o6 = Si(import_time4.FIVE_MINUTES), a4 = { protocol: $t3 }, c8 = { topic: n6, expiry: o6, relay: a4, active: false, methods: i6 == null ? void 0 : i6.methods }, h6 = _a({ protocol: this.core.protocol, version: this.core.version, topic: n6, symKey: s4, relay: a4, expiryTimestamp: o6, methods: i6 == null ? void 0 : i6.methods });
      return this.events.emit(ae2.create, c8), this.core.expirer.set(n6, o6), await this.pairings.set(n6, c8), await this.core.relayer.subscribe(n6, { transportType: i6 == null ? void 0 : i6.transportType, internal: i6 == null ? void 0 : i6.internal }), { topic: n6, uri: h6 };
    }), d5(this, "pair", async (i6) => {
      this.isInitialized();
      const s4 = this.core.eventClient.createEvent({ properties: { topic: i6 == null ? void 0 : i6.uri, trace: [Y.pairing_started] } });
      this.isValidPair(i6, s4);
      const { topic: n6, symKey: o6, relay: a4, expiryTimestamp: c8, methods: h6 } = Ua(i6.uri);
      s4.props.properties.topic = n6, s4.addTrace(Y.pairing_uri_validation_success), s4.addTrace(Y.pairing_uri_not_expired);
      let l8;
      if (this.pairings.keys.includes(n6)) {
        if (l8 = this.pairings.get(n6), s4.addTrace(Y.existing_pairing), l8.active)
          throw s4.setError(X2.active_pairing_already_exists), new Error(`Pairing already exists: ${n6}. Please try again with a new connection URI.`);
        s4.addTrace(Y.pairing_not_expired);
      }
      const p5 = c8 || Si(import_time4.FIVE_MINUTES), y6 = { topic: n6, relay: a4, expiry: p5, active: false, methods: h6 };
      this.core.expirer.set(n6, p5), await this.pairings.set(n6, y6), s4.addTrace(Y.store_new_pairing), i6.activatePairing && await this.activate({ topic: n6 }), this.events.emit(ae2.create, y6), s4.addTrace(Y.emit_inactive_pairing), this.core.crypto.keychain.has(n6) || await this.core.crypto.setSymKey(o6, n6), s4.addTrace(Y.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        s4.setError(X2.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n6, { relay: a4 });
      } catch (w6) {
        throw s4.setError(X2.subscribe_pairing_topic_failure), w6;
      }
      return s4.addTrace(Y.subscribe_pairing_topic_success), y6;
    }), d5(this, "activate", async ({ topic: i6 }) => {
      this.isInitialized();
      const s4 = Si(import_time4.FIVE_MINUTES);
      this.core.expirer.set(i6, s4), await this.pairings.update(i6, { active: true, expiry: s4 });
    }), d5(this, "ping", async (i6) => {
      this.isInitialized(), await this.isValidPing(i6), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: s4 } = i6;
      if (this.pairings.keys.includes(s4)) {
        const n6 = await this.sendRequest(s4, "wc_pairingPing", {}), { done: o6, resolve: a4, reject: c8 } = xi();
        this.events.once(Ni("pairing_ping", n6), ({ error: h6 }) => {
          h6 ? c8(h6) : a4();
        }), await o6();
      }
    }), d5(this, "updateExpiry", async ({ topic: i6, expiry: s4 }) => {
      this.isInitialized(), await this.pairings.update(i6, { expiry: s4 });
    }), d5(this, "updateMetadata", async ({ topic: i6, metadata: s4 }) => {
      this.isInitialized(), await this.pairings.update(i6, { peerMetadata: s4 });
    }), d5(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), d5(this, "disconnect", async (i6) => {
      this.isInitialized(), await this.isValidDisconnect(i6);
      const { topic: s4 } = i6;
      this.pairings.keys.includes(s4) && (await this.sendRequest(s4, "wc_pairingDelete", zt2("USER_DISCONNECTED")), await this.deletePairing(s4));
    }), d5(this, "formatUriFromPairing", (i6) => {
      this.isInitialized();
      const { topic: s4, relay: n6, expiry: o6, methods: a4 } = i6, c8 = this.core.crypto.keychain.get(s4);
      return _a({ protocol: this.core.protocol, version: this.core.version, topic: s4, symKey: c8, relay: n6, expiryTimestamp: o6, methods: a4 });
    }), d5(this, "sendRequest", async (i6, s4, n6) => {
      const o6 = formatJsonRpcRequest(s4, n6), a4 = await this.core.crypto.encode(i6, o6), c8 = oe2[s4].req;
      return this.core.history.set(i6, o6), this.core.relayer.publish(i6, a4, c8), o6.id;
    }), d5(this, "sendResult", async (i6, s4, n6) => {
      const o6 = formatJsonRpcResult(i6, n6), a4 = await this.core.crypto.encode(s4, o6), c8 = (await this.core.history.get(s4, i6)).request.method, h6 = oe2[c8].res;
      await this.core.relayer.publish(s4, a4, h6), await this.core.history.resolve(o6);
    }), d5(this, "sendError", async (i6, s4, n6) => {
      const o6 = formatJsonRpcError(i6, n6), a4 = await this.core.crypto.encode(s4, o6), c8 = (await this.core.history.get(s4, i6)).request.method, h6 = oe2[c8] ? oe2[c8].res : oe2.unregistered_method.res;
      await this.core.relayer.publish(s4, a4, h6), await this.core.history.resolve(o6);
    }), d5(this, "deletePairing", async (i6, s4) => {
      await this.core.relayer.unsubscribe(i6), await Promise.all([this.pairings.delete(i6, zt2("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(i6), s4 ? Promise.resolve() : this.core.expirer.del(i6)]);
    }), d5(this, "cleanup", async () => {
      const i6 = this.pairings.getAll().filter((s4) => Oi(s4.expiry));
      await Promise.all(i6.map((s4) => this.deletePairing(s4.topic)));
    }), d5(this, "onRelayEventRequest", async (i6) => {
      const { topic: s4, payload: n6 } = i6;
      switch (n6.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(s4, n6);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(s4, n6);
        default:
          return await this.onUnknownRpcMethodRequest(s4, n6);
      }
    }), d5(this, "onRelayEventResponse", async (i6) => {
      const { topic: s4, payload: n6 } = i6, o6 = (await this.core.history.get(s4, n6.id)).request.method;
      switch (o6) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(s4, n6);
        default:
          return this.onUnknownRpcMethodResponse(o6);
      }
    }), d5(this, "onPairingPingRequest", async (i6, s4) => {
      const { id: n6 } = s4;
      try {
        this.isValidPing({ topic: i6 }), await this.sendResult(n6, i6, true), this.events.emit(ae2.ping, { id: n6, topic: i6 });
      } catch (o6) {
        await this.sendError(n6, i6, o6), this.logger.error(o6);
      }
    }), d5(this, "onPairingPingResponse", (i6, s4) => {
      const { id: n6 } = s4;
      setTimeout(() => {
        isJsonRpcResult(s4) ? this.events.emit(Ni("pairing_ping", n6), {}) : isJsonRpcError(s4) && this.events.emit(Ni("pairing_ping", n6), { error: s4.error });
      }, 500);
    }), d5(this, "onPairingDeleteRequest", async (i6, s4) => {
      const { id: n6 } = s4;
      try {
        this.isValidDisconnect({ topic: i6 }), await this.deletePairing(i6), this.events.emit(ae2.delete, { id: n6, topic: i6 });
      } catch (o6) {
        await this.sendError(n6, i6, o6), this.logger.error(o6);
      }
    }), d5(this, "onUnknownRpcMethodRequest", async (i6, s4) => {
      const { id: n6, method: o6 } = s4;
      try {
        if (this.registeredMethods.includes(o6))
          return;
        const a4 = zt2("WC_METHOD_UNSUPPORTED", o6);
        await this.sendError(n6, i6, a4), this.logger.error(a4);
      } catch (a4) {
        await this.sendError(n6, i6, a4), this.logger.error(a4);
      }
    }), d5(this, "onUnknownRpcMethodResponse", (i6) => {
      this.registeredMethods.includes(i6) || this.logger.error(zt2("WC_METHOD_UNSUPPORTED", i6));
    }), d5(this, "isValidPair", (i6, s4) => {
      var n6;
      if (!Xa(i6)) {
        const { message: a4 } = Bt2("MISSING_OR_INVALID", `pair() params: ${i6}`);
        throw s4.setError(X2.malformed_pairing_uri), new Error(a4);
      }
      if (!qa(i6.uri)) {
        const { message: a4 } = Bt2("MISSING_OR_INVALID", `pair() uri: ${i6.uri}`);
        throw s4.setError(X2.malformed_pairing_uri), new Error(a4);
      }
      const o6 = Ua(i6 == null ? void 0 : i6.uri);
      if (!((n6 = o6 == null ? void 0 : o6.relay) != null && n6.protocol)) {
        const { message: a4 } = Bt2("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw s4.setError(X2.malformed_pairing_uri), new Error(a4);
      }
      if (!(o6 != null && o6.symKey)) {
        const { message: a4 } = Bt2("MISSING_OR_INVALID", "pair() uri#symKey");
        throw s4.setError(X2.malformed_pairing_uri), new Error(a4);
      }
      if (o6 != null && o6.expiryTimestamp && (0, import_time4.toMiliseconds)(o6 == null ? void 0 : o6.expiryTimestamp) < Date.now()) {
        s4.setError(X2.pairing_expired);
        const { message: a4 } = Bt2("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a4);
      }
    }), d5(this, "isValidPing", async (i6) => {
      if (!Xa(i6)) {
        const { message: n6 } = Bt2("MISSING_OR_INVALID", `ping() params: ${i6}`);
        throw new Error(n6);
      }
      const { topic: s4 } = i6;
      await this.isValidPairingTopic(s4);
    }), d5(this, "isValidDisconnect", async (i6) => {
      if (!Xa(i6)) {
        const { message: n6 } = Bt2("MISSING_OR_INVALID", `disconnect() params: ${i6}`);
        throw new Error(n6);
      }
      const { topic: s4 } = i6;
      await this.isValidPairingTopic(s4);
    }), d5(this, "isValidPairingTopic", async (i6) => {
      if (!ft2(i6, false)) {
        const { message: s4 } = Bt2("MISSING_OR_INVALID", `pairing topic should be a string: ${i6}`);
        throw new Error(s4);
      }
      if (!this.pairings.keys.includes(i6)) {
        const { message: s4 } = Bt2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${i6}`);
        throw new Error(s4);
      }
      if (Oi(this.pairings.get(i6).expiry)) {
        await this.deletePairing(i6);
        const { message: s4 } = Bt2("EXPIRED", `pairing topic: ${i6}`);
        throw new Error(s4);
      }
    }), this.core = e3, this.logger = E3(t2, this.name), this.pairings = new Ui2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y3(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C4.message, async (e3) => {
      const { topic: t2, message: i6, transportType: s4 } = e3;
      if (this.pairings.keys.includes(t2) && s4 !== ee2.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i6)))
        try {
          const n6 = await this.core.crypto.decode(t2, i6);
          isJsonRpcRequest(n6) ? (this.core.history.set(t2, n6), await this.onRelayEventRequest({ topic: t2, payload: n6 })) : isJsonRpcResponse(n6) && (await this.core.history.resolve(n6), await this.onRelayEventResponse({ topic: t2, payload: n6 }), this.core.history.delete(t2, n6.id)), await this.core.relayer.messages.ack(t2, i6);
        } catch (n6) {
          this.logger.error(n6);
        }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(q2.expired, async (e3) => {
      const { topic: t2 } = Ii(e3.target);
      t2 && this.pairings.keys.includes(t2) && (await this.deletePairing(t2, true), this.events.emit(ae2.expire, { topic: t2 }));
    });
  }
};
var Mo3 = Object.defineProperty;
var Ko3 = (r4, e3, t2) => e3 in r4 ? Mo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var N12 = (r4, e3, t2) => Ko3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Mi2 = class extends I3 {
  constructor(e3, t2) {
    super(e3, t2), this.core = e3, this.logger = t2, N12(this, "records", /* @__PURE__ */ new Map()), N12(this, "events", new import_events9.EventEmitter()), N12(this, "name", qt3), N12(this, "version", Gt3), N12(this, "cached", []), N12(this, "initialized", false), N12(this, "storagePrefix", W3), N12(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i6) => this.records.set(i6.id, i6)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), N12(this, "set", (i6, s4, n6) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: i6, request: s4, chainId: n6 }), this.records.has(s4.id))
        return;
      const o6 = { id: s4.id, topic: i6, request: { method: s4.method, params: s4.params || null }, chainId: n6, expiry: Si(import_time4.THIRTY_DAYS) };
      this.records.set(o6.id, o6), this.persist(), this.events.emit(V3.created, o6);
    }), N12(this, "resolve", async (i6) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: i6 }), !this.records.has(i6.id))
        return;
      const s4 = await this.getRecord(i6.id);
      typeof s4.response > "u" && (s4.response = isJsonRpcError(i6) ? { error: i6.error } : { result: i6.result }, this.records.set(s4.id, s4), this.persist(), this.events.emit(V3.updated, s4));
    }), N12(this, "get", async (i6, s4) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: i6, id: s4 }), await this.getRecord(s4))), N12(this, "delete", (i6, s4) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: s4 }), this.values.forEach((n6) => {
        if (n6.topic === i6) {
          if (typeof s4 < "u" && n6.id !== s4)
            return;
          this.records.delete(n6.id), this.events.emit(V3.deleted, n6);
        }
      }), this.persist();
    }), N12(this, "exists", async (i6, s4) => (this.isInitialized(), this.records.has(s4) ? (await this.getRecord(s4)).topic === i6 : false)), N12(this, "on", (i6, s4) => {
      this.events.on(i6, s4);
    }), N12(this, "once", (i6, s4) => {
      this.events.once(i6, s4);
    }), N12(this, "off", (i6, s4) => {
      this.events.off(i6, s4);
    }), N12(this, "removeListener", (i6, s4) => {
      this.events.removeListener(i6, s4);
    }), this.logger = E3(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e3 = [];
    return this.values.forEach((t2) => {
      if (typeof t2.response < "u")
        return;
      const i6 = { topic: t2.topic, request: formatJsonRpcRequest(t2.request.method, t2.request.params, t2.id), chainId: t2.chainId };
      return e3.push(i6);
    }), e3;
  }
  async setJsonRpcRecords(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e3) {
    this.isInitialized();
    const t2 = this.records.get(e3);
    if (!t2) {
      const { message: i6 } = Bt2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw new Error(i6);
    }
    return t2;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(V3.sync);
  }
  async restore() {
    try {
      const e3 = await this.getJsonRpcRecords();
      if (typeof e3 > "u" || !e3.length)
        return;
      if (this.records.size) {
        const { message: t2 } = Bt2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e3);
    }
  }
  registerEventListeners() {
    this.events.on(V3.created, (e3) => {
      const t2 = V3.created;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.events.on(V3.updated, (e3) => {
      const t2 = V3.updated;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.events.on(V3.deleted, (e3) => {
      const t2 = V3.deleted;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.core.heartbeat.on(r2.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e3 = false;
      this.records.forEach((t2) => {
        (0, import_time4.toMiliseconds)(t2.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t2.id}`), this.records.delete(t2.id), this.events.emit(V3.deleted, t2, false), e3 = true);
      }), e3 && this.persist();
    } catch (e3) {
      this.logger.warn(e3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Bo3 = Object.defineProperty;
var Vo3 = (r4, e3, t2) => e3 in r4 ? Bo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var z5 = (r4, e3, t2) => Vo3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ki2 = class extends S4 {
  constructor(e3, t2) {
    super(e3, t2), this.core = e3, this.logger = t2, z5(this, "expirations", /* @__PURE__ */ new Map()), z5(this, "events", new import_events9.EventEmitter()), z5(this, "name", Wt3), z5(this, "version", Ht3), z5(this, "cached", []), z5(this, "initialized", false), z5(this, "storagePrefix", W3), z5(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i6) => this.expirations.set(i6.target, i6)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), z5(this, "has", (i6) => {
      try {
        const s4 = this.formatTarget(i6);
        return typeof this.getExpiration(s4) < "u";
      } catch {
        return false;
      }
    }), z5(this, "set", (i6, s4) => {
      this.isInitialized();
      const n6 = this.formatTarget(i6), o6 = { target: n6, expiry: s4 };
      this.expirations.set(n6, o6), this.checkExpiry(n6, o6), this.events.emit(q2.created, { target: n6, expiration: o6 });
    }), z5(this, "get", (i6) => {
      this.isInitialized();
      const s4 = this.formatTarget(i6);
      return this.getExpiration(s4);
    }), z5(this, "del", (i6) => {
      if (this.isInitialized(), this.has(i6)) {
        const s4 = this.formatTarget(i6), n6 = this.getExpiration(s4);
        this.expirations.delete(s4), this.events.emit(q2.deleted, { target: s4, expiration: n6 });
      }
    }), z5(this, "on", (i6, s4) => {
      this.events.on(i6, s4);
    }), z5(this, "once", (i6, s4) => {
      this.events.once(i6, s4);
    }), z5(this, "off", (i6, s4) => {
      this.events.off(i6, s4);
    }), z5(this, "removeListener", (i6, s4) => {
      this.events.removeListener(i6, s4);
    }), this.logger = E3(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e3) {
    if (typeof e3 == "string")
      return Bi(e3);
    if (typeof e3 == "number")
      return Ai(e3);
    const { message: t2 } = Bt2("UNKNOWN_TYPE", `Target type: ${typeof e3}`);
    throw new Error(t2);
  }
  async setExpirations(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(q2.sync);
  }
  async restore() {
    try {
      const e3 = await this.getExpirations();
      if (typeof e3 > "u" || !e3.length)
        return;
      if (this.expirations.size) {
        const { message: t2 } = Bt2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e3);
    }
  }
  getExpiration(e3) {
    const t2 = this.expirations.get(e3);
    if (!t2) {
      const { message: i6 } = Bt2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw this.logger.warn(i6), new Error(i6);
    }
    return t2;
  }
  checkExpiry(e3, t2) {
    const { expiry: i6 } = t2;
    (0, import_time4.toMiliseconds)(i6) - Date.now() <= 0 && this.expire(e3, t2);
  }
  expire(e3, t2) {
    this.expirations.delete(e3), this.events.emit(q2.expired, { target: e3, expiration: t2 });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e3, t2) => this.checkExpiry(t2, e3));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r2.pulse, () => this.checkExpirations()), this.events.on(q2.created, (e3) => {
      const t2 = q2.created;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    }), this.events.on(q2.expired, (e3) => {
      const t2 = q2.expired;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    }), this.events.on(q2.deleted, (e3) => {
      const t2 = q2.deleted;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var qo3 = Object.defineProperty;
var Go3 = (r4, e3, t2) => e3 in r4 ? qo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var P4 = (r4, e3, t2) => Go3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Bi2 = class extends M3 {
  constructor(e3, t2, i6) {
    super(e3, t2, i6), this.core = e3, this.logger = t2, this.store = i6, P4(this, "name", Yt2), P4(this, "abortController"), P4(this, "isDevEnv"), P4(this, "verifyUrlV3", Xt3), P4(this, "storagePrefix", W3), P4(this, "version", Fe2), P4(this, "publicKey"), P4(this, "fetchPromise"), P4(this, "init", async () => {
      var s4;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time4.toMiliseconds)((s4 = this.publicKey) == null ? void 0 : s4.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), P4(this, "register", async (s4) => {
      if (!Wt2() || this.isDevEnv)
        return;
      const n6 = window.location.origin, { id: o6, decryptedId: a4 } = s4, c8 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n6}&id=${o6}&decryptedId=${a4}`;
      try {
        const h6 = (0, import_window_getters2.getDocument)(), l8 = this.startAbortTimer(import_time4.ONE_SECOND * 5), p5 = await new Promise((y6, w6) => {
          const u4 = () => {
            window.removeEventListener("message", D3), h6.body.removeChild(m6), w6("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u4);
          const m6 = h6.createElement("iframe");
          m6.src = c8, m6.style.display = "none", m6.addEventListener("error", u4, { signal: this.abortController.signal });
          const D3 = (_6) => {
            if (_6.data && typeof _6.data == "string")
              try {
                const E6 = JSON.parse(_6.data);
                if (E6.type === "verify_attestation") {
                  if (sn(E6.attestation).payload.id !== o6)
                    return;
                  clearInterval(l8), h6.body.removeChild(m6), this.abortController.signal.removeEventListener("abort", u4), window.removeEventListener("message", D3), y6(E6.attestation === null ? "" : E6.attestation);
                }
              } catch (E6) {
                this.logger.warn(E6);
              }
          };
          h6.body.appendChild(m6), window.addEventListener("message", D3, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", p5), p5;
      } catch (h6) {
        this.logger.warn(h6);
      }
      return "";
    }), P4(this, "resolve", async (s4) => {
      if (this.isDevEnv)
        return "";
      const { attestationId: n6, hash: o6, encryptedId: a4 } = s4;
      if (n6 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n6) {
        if (sn(n6).payload.id !== a4)
          return;
        const h6 = await this.isValidJwtAttestation(n6);
        if (h6) {
          if (!h6.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h6;
        }
      }
      if (!o6)
        return;
      const c8 = this.getVerifyUrl(s4 == null ? void 0 : s4.verifyUrl);
      return this.fetchAttestation(o6, c8);
    }), P4(this, "fetchAttestation", async (s4, n6) => {
      this.logger.debug(`resolving attestation: ${s4} from url: ${n6}`);
      const o6 = this.startAbortTimer(import_time4.ONE_SECOND * 5), a4 = await fetch(`${n6}/attestation/${s4}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o6), a4.status === 200 ? await a4.json() : void 0;
    }), P4(this, "getVerifyUrl", (s4) => {
      let n6 = s4 || be3;
      return Zt3.includes(n6) || (this.logger.info(`verify url: ${n6}, not included in trusted list, assigning default: ${be3}`), n6 = be3), n6;
    }), P4(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const s4 = this.startAbortTimer(import_time4.FIVE_SECONDS), n6 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(s4), await n6.json();
      } catch (s4) {
        this.logger.warn(s4);
      }
    }), P4(this, "persistPublicKey", async (s4) => {
      this.logger.debug("persisting public key to local storage", s4), await this.store.setItem(this.storeKey, s4), this.publicKey = s4;
    }), P4(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), P4(this, "isValidJwtAttestation", async (s4) => {
      const n6 = await this.getPublicKey();
      try {
        if (n6)
          return this.validateAttestation(s4, n6);
      } catch (a4) {
        this.logger.error(a4), this.logger.warn("error validating attestation");
      }
      const o6 = await this.fetchAndPersistPublicKey();
      try {
        if (o6)
          return this.validateAttestation(s4, o6);
      } catch (a4) {
        this.logger.error(a4), this.logger.warn("error validating attestation");
      }
    }), P4(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), P4(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise)
        return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n6) => {
        const o6 = await this.fetchPublicKey();
        o6 && (await this.persistPublicKey(o6), n6(o6));
      });
      const s4 = await this.fetchPromise;
      return this.fetchPromise = void 0, s4;
    }), P4(this, "validateAttestation", (s4, n6) => {
      const o6 = va(s4, n6.publicKey), a4 = { hasExpired: (0, import_time4.toMiliseconds)(o6.exp) < Date.now(), payload: o6 };
      if (a4.hasExpired)
        throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a4.payload.origin, isScam: a4.payload.isScam, isVerified: a4.payload.isVerified };
    }), this.logger = E3(t2, this.name), this.abortController = new AbortController(), this.isDevEnv = Ti(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y3(this.logger);
  }
  startAbortTimer(e3) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time4.toMiliseconds)(e3));
  }
};
var Wo3 = Object.defineProperty;
var Ho3 = (r4, e3, t2) => e3 in r4 ? Wo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Vi2 = (r4, e3, t2) => Ho3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var qi2 = class extends O4 {
  constructor(e3, t2) {
    super(e3, t2), this.projectId = e3, this.logger = t2, Vi2(this, "context", Qt3), Vi2(this, "registerDeviceToken", async (i6) => {
      const { clientId: s4, token: n6, notificationType: o6, enableEncrypted: a4 = false } = i6, c8 = `${ei2}/${this.projectId}/clients`;
      await fetch(c8, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: s4, type: o6, token: n6, always_raw: a4 }) });
    }), this.logger = E3(t2, this.context);
  }
};
var Yo3 = Object.defineProperty;
var Gi2 = Object.getOwnPropertySymbols;
var Jo3 = Object.prototype.hasOwnProperty;
var Xo2 = Object.prototype.propertyIsEnumerable;
var et2 = (r4, e3, t2) => e3 in r4 ? Yo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var we3 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    Jo3.call(e3, t2) && et2(r4, t2, e3[t2]);
  if (Gi2)
    for (var t2 of Gi2(e3))
      Xo2.call(e3, t2) && et2(r4, t2, e3[t2]);
  return r4;
};
var R2 = (r4, e3, t2) => et2(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Wi2 = class extends R {
  constructor(e3, t2, i6 = true) {
    super(e3, t2, i6), this.core = e3, this.logger = t2, R2(this, "context", ii), R2(this, "storagePrefix", W3), R2(this, "storageVersion", ti2), R2(this, "events", /* @__PURE__ */ new Map()), R2(this, "shouldPersist", false), R2(this, "init", async () => {
      if (!Ti())
        try {
          const s4 = { eventId: $i(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: wr2(this.core.relayer.protocol, this.core.relayer.version, Pe3) } } };
          await this.sendEvent([s4]);
        } catch (s4) {
          this.logger.warn(s4);
        }
    }), R2(this, "createEvent", (s4) => {
      const { event: n6 = "ERROR", type: o6 = "", properties: { topic: a4, trace: c8 } } = s4, h6 = $i(), l8 = this.core.projectId || "", p5 = Date.now(), y6 = we3({ eventId: h6, timestamp: p5, props: { event: n6, type: o6, properties: { topic: a4, trace: c8 } }, bundleId: l8, domain: this.getAppDomain() }, this.setMethods(h6));
      return this.telemetryEnabled && (this.events.set(h6, y6), this.shouldPersist = true), y6;
    }), R2(this, "getEvent", (s4) => {
      const { eventId: n6, topic: o6 } = s4;
      if (n6)
        return this.events.get(n6);
      const a4 = Array.from(this.events.values()).find((c8) => c8.props.properties.topic === o6);
      if (a4)
        return we3(we3({}, a4), this.setMethods(a4.eventId));
    }), R2(this, "deleteEvent", (s4) => {
      const { eventId: n6 } = s4;
      this.events.delete(n6), this.shouldPersist = true;
    }), R2(this, "setEventListeners", () => {
      this.core.heartbeat.on(r2.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((s4) => {
          (0, import_time4.fromMiliseconds)(Date.now()) - (0, import_time4.fromMiliseconds)(s4.timestamp) > si && (this.events.delete(s4.eventId), this.shouldPersist = true);
        });
      });
    }), R2(this, "setMethods", (s4) => ({ addTrace: (n6) => this.addTrace(s4, n6), setError: (n6) => this.setError(s4, n6) })), R2(this, "addTrace", (s4, n6) => {
      const o6 = this.events.get(s4);
      o6 && (o6.props.properties.trace.push(n6), this.events.set(s4, o6), this.shouldPersist = true);
    }), R2(this, "setError", (s4, n6) => {
      const o6 = this.events.get(s4);
      o6 && (o6.props.type = n6, o6.timestamp = Date.now(), this.events.set(s4, o6), this.shouldPersist = true);
    }), R2(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), R2(this, "restore", async () => {
      try {
        const s4 = await this.core.storage.getItem(this.storageKey) || [];
        if (!s4.length)
          return;
        s4.forEach((n6) => {
          this.events.set(n6.eventId, we3(we3({}, n6), this.setMethods(n6.eventId)));
        });
      } catch (s4) {
        this.logger.warn(s4);
      }
    }), R2(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0)
        return;
      const s4 = [];
      for (const [n6, o6] of this.events)
        o6.props.type && s4.push(o6);
      if (s4.length !== 0)
        try {
          if ((await this.sendEvent(s4)).ok)
            for (const n6 of s4)
              this.events.delete(n6.eventId), this.shouldPersist = true;
        } catch (n6) {
          this.logger.warn(n6);
        }
    }), R2(this, "sendEvent", async (s4) => {
      const n6 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${ri2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${Pe3}${n6}`, { method: "POST", body: JSON.stringify(s4) });
    }), R2(this, "getAppDomain", () => br2().url), this.logger = E3(t2, this.context), this.telemetryEnabled = i6, i6 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Zo3 = Object.defineProperty;
var Hi2 = Object.getOwnPropertySymbols;
var Qo3 = Object.prototype.hasOwnProperty;
var ea2 = Object.prototype.propertyIsEnumerable;
var tt2 = (r4, e3, t2) => e3 in r4 ? Zo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Yi2 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    Qo3.call(e3, t2) && tt2(r4, t2, e3[t2]);
  if (Hi2)
    for (var t2 of Hi2(e3))
      ea2.call(e3, t2) && tt2(r4, t2, e3[t2]);
  return r4;
};
var v8 = (r4, e3, t2) => tt2(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Oe3 = class _Oe extends h4 {
  constructor(e3) {
    var t2;
    super(e3), v8(this, "protocol", Ue3), v8(this, "version", Fe2), v8(this, "name", pe3), v8(this, "relayUrl"), v8(this, "projectId"), v8(this, "customStoragePrefix"), v8(this, "events", new import_events9.EventEmitter()), v8(this, "logger"), v8(this, "heartbeat"), v8(this, "relayer"), v8(this, "crypto"), v8(this, "storage"), v8(this, "history"), v8(this, "expirer"), v8(this, "pairing"), v8(this, "verify"), v8(this, "echoClient"), v8(this, "linkModeSupportedApps"), v8(this, "eventClient"), v8(this, "initialized", false), v8(this, "logChunkController"), v8(this, "on", (a4, c8) => this.events.on(a4, c8)), v8(this, "once", (a4, c8) => this.events.once(a4, c8)), v8(this, "off", (a4, c8) => this.events.off(a4, c8)), v8(this, "removeListener", (a4, c8) => this.events.removeListener(a4, c8)), v8(this, "dispatchEnvelope", ({ topic: a4, message: c8, sessionExists: h6 }) => {
      if (!a4 || !c8)
        return;
      const l8 = { topic: a4, message: c8, publishedAt: Date.now(), transportType: ee2.link_mode };
      this.relayer.onLinkMessageEvent(l8, { sessionExists: h6 });
    });
    const i6 = this.getGlobalCore(e3 == null ? void 0 : e3.customStoragePrefix);
    if (i6)
      try {
        return this.customStoragePrefix = i6.customStoragePrefix, this.logger = i6.logger, this.heartbeat = i6.heartbeat, this.crypto = i6.crypto, this.history = i6.history, this.expirer = i6.expirer, this.storage = i6.storage, this.relayer = i6.relayer, this.pairing = i6.pairing, this.verify = i6.verify, this.echoClient = i6.echoClient, this.linkModeSupportedApps = i6.linkModeSupportedApps, this.eventClient = i6.eventClient, this.initialized = i6.initialized, this.logChunkController = i6.logChunkController, i6;
      } catch (a4) {
        console.warn("Failed to copy global core", a4);
      }
    this.projectId = e3 == null ? void 0 : e3.projectId, this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || Ke3, this.customStoragePrefix = e3 != null && e3.customStoragePrefix ? `:${e3.customStoragePrefix}` : "";
    const s4 = k4({ level: typeof (e3 == null ? void 0 : e3.logger) == "string" && e3.logger ? e3.logger : It3.logger, name: pe3 }), { logger: n6, chunkLoggerController: o6 } = A2({ opts: s4, maxSizeInBytes: e3 == null ? void 0 : e3.maxLogBlobSizeInBytes, loggerOverride: e3 == null ? void 0 : e3.logger });
    this.logChunkController = o6, (t2 = this.logChunkController) != null && t2.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var a4, c8;
      (a4 = this.logChunkController) != null && a4.downloadLogsBlobInBrowser && ((c8 = this.logChunkController) == null || c8.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E3(n6, this.name), this.heartbeat = new i3(), this.crypto = new Ei2(this, this.logger, e3 == null ? void 0 : e3.keychain), this.history = new Mi2(this, this.logger), this.expirer = new Ki2(this, this.logger), this.storage = e3 != null && e3.storage ? e3.storage : new h2(Yi2(Yi2({}, Tt3), e3 == null ? void 0 : e3.storageOptions)), this.relayer = new xi2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Fi2(this, this.logger), this.verify = new Bi2(this, this.logger, this.storage), this.echoClient = new qi2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Wi2(this, this.logger, e3 == null ? void 0 : e3.telemetryEnabled), this.setGlobalCore(this);
  }
  static async init(e3) {
    const t2 = new _Oe(e3);
    await t2.initialize();
    const i6 = await t2.crypto.getClientId();
    return await t2.storage.setItem(Ft3, i6), t2;
  }
  get context() {
    return y3(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e3;
    return (e3 = this.logChunkController) == null ? void 0 : e3.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e3) {
    this.linkModeSupportedApps.includes(e3) || (this.linkModeSupportedApps.push(e3), await this.storage.setItem(Be3, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Be3) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e3) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e3), this.logger.error(e3.message), e3;
    }
  }
  getGlobalCore(e3 = "") {
    try {
      if (this.isGlobalCoreDisabled())
        return;
      const t2 = `_walletConnectCore_${e3}`, i6 = `${t2}_count`;
      return globalThis[i6] = (globalThis[i6] || 0) + 1, globalThis[i6] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i6]} times.`), globalThis[t2];
    } catch (t2) {
      console.warn("Failed to get global WalletConnect core", t2);
      return;
    }
  }
  setGlobalCore(e3) {
    var t2;
    try {
      if (this.isGlobalCoreDisabled())
        return;
      const i6 = `_walletConnectCore_${((t2 = e3.opts) == null ? void 0 : t2.customStoragePrefix) || ""}`;
      globalThis[i6] = e3;
    } catch (i6) {
      console.warn("Failed to set global WalletConnect core", i6);
    }
  }
  isGlobalCoreDisabled() {
    try {
      return typeof process < "u" && process.env.DISABLE_GLOBAL_CORE === "true";
    } catch {
      return true;
    }
  }
};
var ta2 = Oe3;

// node_modules/@walletconnect/sign-client/dist/index.es.js
var import_events10 = __toESM(require_events());
var import_time5 = __toESM(require_cjs());
var Ve4 = "wc";
var ke3 = 2;
var De4 = "client";
var we4 = `${Ve4}@${ke3}:${De4}:`;
var me4 = { name: De4, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Le3 = "WALLETCONNECT_DEEPLINK_CHOICE";
var dt3 = "proposal";
var Me4 = "Proposal expired";
var ut3 = "session";
var B3 = import_time5.SEVEN_DAYS;
var gt3 = "engine";
var P5 = { wc_sessionPropose: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time5.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time5.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e3 = { min: import_time5.FIVE_MINUTES, max: import_time5.SEVEN_DAYS };
var M5 = { idle: "IDLE", active: "ACTIVE" };
var yt3 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" }, sui_signAndExecuteTransaction: { key: "digest" }, sui_signTransaction: { key: "" }, hedera_signAndExecuteTransaction: { key: "transactionId" }, hedera_executeTransaction: { key: "transactionId" }, near_signTransaction: { key: "" }, near_signTransactions: { key: "" }, tron_signTransaction: { key: "txID" }, xrpl_signTransaction: { key: "" }, xrpl_signTransactionFor: { key: "" }, algo_signTxn: { key: "" }, sendTransfer: { key: "txid" }, stacks_stxTransfer: { key: "txId" }, polkadot_signTransaction: { key: "" }, cosmos_signDirect: { key: "" } };
var wt3 = "request";
var mt2 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var _t3 = "wc";
var ft3 = "auth";
var St4 = "authKeys";
var Et3 = "pairingTopics";
var Rt4 = "requests";
var le3 = `${_t3}@${1.5}:${ft3}:`;
var pe4 = `${le3}:PUB_KEY`;
var bs2 = Object.defineProperty;
var As2 = Object.defineProperties;
var xs2 = Object.getOwnPropertyDescriptors;
var vt3 = Object.getOwnPropertySymbols;
var Cs2 = Object.prototype.hasOwnProperty;
var Vs = Object.prototype.propertyIsEnumerable;
var $e3 = (S6, o6, t2) => o6 in S6 ? bs2(S6, o6, { enumerable: true, configurable: true, writable: true, value: t2 }) : S6[o6] = t2;
var R3 = (S6, o6) => {
  for (var t2 in o6 || (o6 = {}))
    Cs2.call(o6, t2) && $e3(S6, t2, o6[t2]);
  if (vt3)
    for (var t2 of vt3(o6))
      Vs.call(o6, t2) && $e3(S6, t2, o6[t2]);
  return S6;
};
var O5 = (S6, o6) => As2(S6, xs2(o6));
var c6 = (S6, o6, t2) => $e3(S6, typeof o6 != "symbol" ? o6 + "" : o6, t2);
var ks2 = class extends V2 {
  constructor(o6) {
    super(o6), c6(this, "name", gt3), c6(this, "events", new import_events10.default()), c6(this, "initialized", false), c6(this, "requestQueue", { state: M5.idle, queue: [] }), c6(this, "sessionRequestQueue", { state: M5.idle, queue: [] }), c6(this, "emittedSessionRequests", new ji({ limit: 500 })), c6(this, "requestQueueDelay", import_time5.ONE_SECOND), c6(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c6(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c6(this, "recentlyDeletedLimit", 200), c6(this, "relayMessageCache", []), c6(this, "pendingSessions", /* @__PURE__ */ new Map()), c6(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(P5) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay)));
    }), c6(this, "connect", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const e3 = O5(R3({}, t2), { requiredNamespaces: t2.requiredNamespaces || {}, optionalNamespaces: t2.optionalNamespaces || {} });
      await this.isValidConnect(e3), e3.optionalNamespaces = Ma(e3.requiredNamespaces, e3.optionalNamespaces), e3.requiredNamespaces = {};
      const { pairingTopic: s4, requiredNamespaces: i6, optionalNamespaces: r4, sessionProperties: n6, scopedProperties: a4, relays: l8 } = e3;
      let p5 = s4, h6, u4 = false;
      try {
        if (p5) {
          const T7 = this.client.core.pairing.pairings.get(p5);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u4 = T7.active;
        }
      } catch (T7) {
        throw this.client.logger.error(`connect() -> pairing.get(${p5}) failed`), T7;
      }
      if (!p5 || !u4) {
        const { topic: T7, uri: $4 } = await this.client.core.pairing.create({ internal: { skipSubscribe: true } });
        p5 = T7, h6 = $4;
      }
      if (!p5) {
        const { message: T7 } = Bt2("NO_MATCHING_KEY", `connect() pairing topic: ${p5}`);
        throw new Error(T7);
      }
      const d8 = await this.client.core.crypto.generateKeyPair(), y6 = P5.wc_sessionPropose.req.ttl || import_time5.FIVE_MINUTES, w6 = Si(y6), m6 = O5(R3(R3({ requiredNamespaces: i6, optionalNamespaces: r4, relays: l8 ?? [{ protocol: $t3 }], proposer: { publicKey: d8, metadata: this.client.metadata }, expiryTimestamp: w6, pairingTopic: p5 }, n6 && { sessionProperties: n6 }), a4 && { scopedProperties: a4 }), { id: payloadId() }), E6 = Ni("session_connect", m6.id), { reject: _6, resolve: b5, done: V4 } = xi(y6, Me4), I4 = ({ id: T7 }) => {
        T7 === m6.id && (this.client.events.off("proposal_expire", I4), this.pendingSessions.delete(m6.id), this.events.emit(E6, { error: { message: Me4, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", I4), this.events.once(E6, ({ error: T7, session: $4 }) => {
        this.client.events.off("proposal_expire", I4), T7 ? _6(T7) : $4 && b5($4);
      }), await this.sendProposeSession({ proposal: m6, publishOpts: { internal: { throwOnFailedPublish: true }, tvf: { correlationId: m6.id } } }), await this.setProposal(m6.id, m6), { uri: h6, approval: V4 };
    }), c6(this, "pair", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(t2);
      } catch (e3) {
        throw this.client.logger.error("pair() failed"), e3;
      }
    }), c6(this, "approve", async (t2) => {
      var e3, s4, i6;
      const r4 = this.client.core.eventClient.createEvent({ properties: { topic: (e3 = t2 == null ? void 0 : t2.id) == null ? void 0 : e3.toString(), trace: [rr3.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (N14) {
        throw r4.setError(nr3.no_internet_connection), N14;
      }
      try {
        await this.isValidProposalId(t2 == null ? void 0 : t2.id);
      } catch (N14) {
        throw this.client.logger.error(`approve() -> proposal.get(${t2 == null ? void 0 : t2.id}) failed`), r4.setError(nr3.proposal_not_found), N14;
      }
      try {
        await this.isValidApprove(t2);
      } catch (N14) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r4.setError(nr3.session_approve_namespace_validation_failure), N14;
      }
      const { id: n6, relayProtocol: a4, namespaces: l8, sessionProperties: p5, scopedProperties: h6, sessionConfig: u4 } = t2, d8 = this.client.proposal.get(n6);
      this.client.core.eventClient.deleteEvent({ eventId: r4.eventId });
      const { pairingTopic: y6, proposer: w6, requiredNamespaces: m6, optionalNamespaces: E6 } = d8;
      let _6 = (s4 = this.client.core.eventClient) == null ? void 0 : s4.getEvent({ topic: y6 });
      _6 || (_6 = (i6 = this.client.core.eventClient) == null ? void 0 : i6.createEvent({ type: rr3.session_approve_started, properties: { topic: y6, trace: [rr3.session_approve_started, rr3.session_namespaces_validation_success] } }));
      const b5 = await this.client.core.crypto.generateKeyPair(), V4 = w6.publicKey, I4 = await this.client.core.crypto.generateSharedKey(b5, V4), T7 = R3(R3(R3({ relay: { protocol: a4 ?? "irn" }, namespaces: l8, controller: { publicKey: b5, metadata: this.client.metadata }, expiry: Si(B3) }, p5 && { sessionProperties: p5 }), h6 && { scopedProperties: h6 }), u4 && { sessionConfig: u4 }), $4 = ee2.relay;
      _6.addTrace(rr3.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(I4, { transportType: $4, internal: { skipSubscribe: true } });
      } catch (N14) {
        throw _6.setError(nr3.subscribe_session_topic_failure), N14;
      }
      _6.addTrace(rr3.subscribe_session_topic_success);
      const Se4 = O5(R3({}, T7), { topic: I4, requiredNamespaces: m6, optionalNamespaces: E6, pairingTopic: y6, acknowledged: false, self: T7.controller, peer: { publicKey: w6.publicKey, metadata: w6.metadata }, controller: b5, transportType: ee2.relay });
      await this.client.session.set(I4, Se4), _6.addTrace(rr3.store_session);
      try {
        await this.sendApproveSession({ sessionTopic: I4, proposal: d8, pairingProposalResponse: { relay: { protocol: a4 ?? "irn" }, responderPublicKey: b5 }, sessionSettleRequest: T7, publishOpts: { internal: { throwOnFailedPublish: true }, tvf: { correlationId: n6 } } }), _6.addTrace(rr3.session_approve_publish_success);
      } catch (N14) {
        throw this.client.logger.error(N14), this.client.session.delete(I4, zt2("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(I4), N14;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: _6.eventId }), await this.client.core.pairing.updateMetadata({ topic: y6, metadata: w6.metadata }), await this.deleteProposal(n6), await this.client.core.pairing.activate({ topic: y6 }), await this.setExpiry(I4, Si(B3)), { topic: I4, acknowledged: () => Promise.resolve(this.client.session.get(I4)) };
    }), c6(this, "reject", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(t2);
      } catch (r4) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r4;
      }
      const { id: e3, reason: s4 } = t2;
      let i6;
      try {
        i6 = this.client.proposal.get(e3).pairingTopic;
      } catch (r4) {
        throw this.client.logger.error(`reject() -> proposal.get(${e3}) failed`), r4;
      }
      i6 && await this.sendError({ id: e3, topic: i6, error: s4, rpcOpts: P5.wc_sessionPropose.reject }), await this.deleteProposal(e3);
    }), c6(this, "update", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(t2);
      } catch (h6) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h6;
      }
      const { topic: e3, namespaces: s4 } = t2, { done: i6, resolve: r4, reject: n6 } = xi(), a4 = payloadId(), l8 = getBigIntRpcId().toString(), p5 = this.client.session.get(e3).namespaces;
      return this.events.once(Ni("session_update", a4), ({ error: h6 }) => {
        h6 ? n6(h6) : r4();
      }), await this.client.session.update(e3, { namespaces: s4 }), await this.sendRequest({ topic: e3, method: "wc_sessionUpdate", params: { namespaces: s4 }, throwOnFailedPublish: true, clientRpcId: a4, relayRpcId: l8 }).catch((h6) => {
        this.client.logger.error(h6), this.client.session.update(e3, { namespaces: p5 }), n6(h6);
      }), { acknowledged: i6 };
    }), c6(this, "extend", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(t2);
      } catch (a4) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a4;
      }
      const { topic: e3 } = t2, s4 = payloadId(), { done: i6, resolve: r4, reject: n6 } = xi();
      return this.events.once(Ni("session_extend", s4), ({ error: a4 }) => {
        a4 ? n6(a4) : r4();
      }), await this.setExpiry(e3, Si(B3)), this.sendRequest({ topic: e3, method: "wc_sessionExtend", params: {}, clientRpcId: s4, throwOnFailedPublish: true }).catch((a4) => {
        n6(a4);
      }), { acknowledged: i6 };
    }), c6(this, "request", async (t2) => {
      this.isInitialized();
      try {
        await this.isValidRequest(t2);
      } catch (m6) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), m6;
      }
      const { chainId: e3, request: s4, topic: i6, expiry: r4 = P5.wc_sessionRequest.req.ttl } = t2, n6 = this.client.session.get(i6);
      (n6 == null ? void 0 : n6.transportType) === ee2.relay && await this.confirmOnlineStateOrThrow();
      const a4 = payloadId(), l8 = getBigIntRpcId().toString(), { done: p5, resolve: h6, reject: u4 } = xi(r4, "Request expired. Please try again.");
      this.events.once(Ni("session_request", a4), ({ error: m6, result: E6 }) => {
        m6 ? u4(m6) : h6(E6);
      });
      const d8 = "wc_sessionRequest", y6 = this.getAppLinkIfEnabled(n6.peer.metadata, n6.transportType);
      if (y6)
        return await this.sendRequest({ clientRpcId: a4, relayRpcId: l8, topic: i6, method: d8, params: { request: O5(R3({}, s4), { expiryTimestamp: Si(r4) }), chainId: e3 }, expiry: r4, throwOnFailedPublish: true, appLink: y6 }).catch((m6) => u4(m6)), this.client.events.emit("session_request_sent", { topic: i6, request: s4, chainId: e3, id: a4 }), await p5();
      const w6 = { request: O5(R3({}, s4), { expiryTimestamp: Si(r4) }), chainId: e3 };
      return await Promise.all([new Promise(async (m6) => {
        await this.sendRequest({ clientRpcId: a4, relayRpcId: l8, topic: i6, method: d8, params: w6, expiry: r4, throwOnFailedPublish: true, tvf: this.getTVFParams(a4, w6) }).catch((E6) => u4(E6)), this.client.events.emit("session_request_sent", { topic: i6, request: s4, chainId: e3, id: a4 }), m6();
      }), new Promise(async (m6) => {
        var E6;
        if (!((E6 = n6.sessionConfig) != null && E6.disableDeepLink)) {
          const _6 = await _i(this.client.core.storage, Le3);
          await Ui({ id: a4, topic: i6, wcDeepLink: _6 });
        }
        m6();
      }), p5()]).then((m6) => m6[2]);
    }), c6(this, "respond", async (t2) => {
      this.isInitialized(), await this.isValidRespond(t2);
      const { topic: e3, response: s4 } = t2, { id: i6 } = s4, r4 = this.client.session.get(e3);
      r4.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const n6 = this.getAppLinkIfEnabled(r4.peer.metadata, r4.transportType);
      isJsonRpcResult(s4) ? await this.sendResult({ id: i6, topic: e3, result: s4.result, throwOnFailedPublish: true, appLink: n6 }) : isJsonRpcError(s4) && await this.sendError({ id: i6, topic: e3, error: s4.error, appLink: n6 }), this.cleanupAfterResponse(t2);
    }), c6(this, "ping", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(t2);
      } catch (s4) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s4;
      }
      const { topic: e3 } = t2;
      if (this.client.session.keys.includes(e3)) {
        const s4 = payloadId(), i6 = getBigIntRpcId().toString(), { done: r4, resolve: n6, reject: a4 } = xi();
        this.events.once(Ni("session_ping", s4), ({ error: l8 }) => {
          l8 ? a4(l8) : n6();
        }), await Promise.all([this.sendRequest({ topic: e3, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s4, relayRpcId: i6 }), r4()]);
      } else
        this.client.core.pairing.pairings.keys.includes(e3) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: e3 }));
    }), c6(this, "emit", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(t2);
      const { topic: e3, event: s4, chainId: i6 } = t2, r4 = getBigIntRpcId().toString(), n6 = payloadId();
      await this.sendRequest({ topic: e3, method: "wc_sessionEvent", params: { event: s4, chainId: i6 }, throwOnFailedPublish: true, relayRpcId: r4, clientRpcId: n6 });
    }), c6(this, "disconnect", async (t2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(t2);
      const { topic: e3 } = t2;
      if (this.client.session.keys.includes(e3))
        await this.sendRequest({ topic: e3, method: "wc_sessionDelete", params: zt2("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: e3, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(e3))
        await this.client.core.pairing.disconnect({ topic: e3 });
      else {
        const { message: s4 } = Bt2("MISMATCHED_TOPIC", `Session or pairing topic not found: ${e3}`);
        throw new Error(s4);
      }
    }), c6(this, "find", (t2) => (this.isInitialized(), this.client.session.getAll().filter((e3) => Ka(e3, t2)))), c6(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c6(this, "authenticate", async (t2, e3) => {
      var s4;
      this.isInitialized(), this.isValidAuthenticate(t2);
      const i6 = e3 && this.client.core.linkModeSupportedApps.includes(e3) && ((s4 = this.client.metadata.redirect) == null ? void 0 : s4.linkMode), r4 = i6 ? ee2.link_mode : ee2.relay;
      r4 === ee2.relay && await this.confirmOnlineStateOrThrow();
      const { chains: n6, statement: a4 = "", uri: l8, domain: p5, nonce: h6, type: u4, exp: d8, nbf: y6, methods: w6 = [], expiry: m6 } = t2, E6 = [...t2.resources || []], { topic: _6, uri: b5 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r4 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: _6, uri: b5 } });
      const V4 = await this.client.core.crypto.generateKeyPair(), I4 = la(V4);
      if (await Promise.all([this.client.auth.authKeys.set(pe4, { responseTopic: I4, publicKey: V4 }), this.client.auth.pairingTopics.set(I4, { topic: I4, pairingTopic: _6 })]), await this.client.core.relayer.subscribe(I4, { transportType: r4 }), this.client.logger.info(`sending request to new pairing topic: ${_6}`), w6.length > 0) {
        const { namespace: A5 } = Je2(n6[0]);
        let k6 = Vc(A5, "request", w6);
        je2(E6) && (k6 = Mc(k6, E6.pop())), E6.push(k6);
      }
      const T7 = m6 && m6 > P5.wc_sessionAuthenticate.req.ttl ? m6 : P5.wc_sessionAuthenticate.req.ttl, $4 = { authPayload: { type: u4 ?? "caip122", chains: n6, statement: a4, aud: l8, domain: p5, version: "1", nonce: h6, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d8, nbf: y6, resources: E6 }, requester: { publicKey: V4, metadata: this.client.metadata }, expiryTimestamp: Si(T7) }, Se4 = { eip155: { chains: n6, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...w6])], events: ["chainChanged", "accountsChanged"] } }, N14 = { requiredNamespaces: {}, optionalNamespaces: Se4, relays: [{ protocol: "irn" }], pairingTopic: _6, proposer: { publicKey: V4, metadata: this.client.metadata }, expiryTimestamp: Si(P5.wc_sessionPropose.req.ttl), id: payloadId() }, { done: Tt5, resolve: Ue5, reject: Ee4 } = xi(T7, "Request expired"), se3 = payloadId(), he5 = Ni("session_connect", N14.id), Re4 = Ni("session_request", se3), de4 = async ({ error: A5, session: k6 }) => {
        this.events.off(Re4, ve5), A5 ? Ee4(A5) : k6 && Ue5({ session: k6 });
      }, ve5 = async (A5) => {
        var k6, Ge5, je3;
        if (await this.deletePendingAuthRequest(se3, { message: "fulfilled", code: 0 }), A5.error) {
          const re4 = zt2("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return A5.error.code === re4.code ? void 0 : (this.events.off(he5, de4), Ee4(A5.error.message));
        }
        await this.deleteProposal(N14.id), this.events.off(he5, de4);
        const { cacaos: Fe4, responder: H3 } = A5.result, Te4 = [], Qe4 = [];
        for (const re4 of Fe4) {
          await Lc({ cacao: re4, projectId: this.client.core.projectId }) || (this.client.logger.error(re4, "Signature verification failed"), Ee4(zt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe4 } = re4, Pe5 = je2(qe4.resources), He5 = [to2(qe4.iss)], qt5 = bn2(qe4.iss);
          if (Pe5) {
            const Ne3 = Kc(Pe5), Pt5 = qc(Pe5);
            Te4.push(...Ne3), He5.push(...Pt5);
          }
          for (const Ne3 of He5)
            Qe4.push(`${Ne3}:${qt5}`);
        }
        const ie4 = await this.client.core.crypto.generateSharedKey(V4, H3.publicKey);
        let ue2;
        Te4.length > 0 && (ue2 = { topic: ie4, acknowledged: true, self: { publicKey: V4, metadata: this.client.metadata }, peer: H3, controller: H3.publicKey, expiry: Si(B3), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: _6, namespaces: Va([...new Set(Te4)], [...new Set(Qe4)]), transportType: r4 }, await this.client.core.relayer.subscribe(ie4, { transportType: r4 }), await this.client.session.set(ie4, ue2), _6 && await this.client.core.pairing.updateMetadata({ topic: _6, metadata: H3.metadata }), ue2 = this.client.session.get(ie4)), (k6 = this.client.metadata.redirect) != null && k6.linkMode && (Ge5 = H3.metadata.redirect) != null && Ge5.linkMode && (je3 = H3.metadata.redirect) != null && je3.universal && e3 && (this.client.core.addLinkModeSupportedApp(H3.metadata.redirect.universal), this.client.session.update(ie4, { transportType: ee2.link_mode })), Ue5({ auths: Fe4, session: ue2 });
      };
      this.events.once(he5, de4), this.events.once(Re4, ve5);
      let Ie4;
      try {
        if (i6) {
          const A5 = formatJsonRpcRequest("wc_sessionAuthenticate", $4, se3);
          this.client.core.history.set(_6, A5);
          const k6 = await this.client.core.crypto.encode("", A5, { type: we2, encoding: Ge2 });
          Ie4 = Ra(e3, _6, k6);
        } else
          await Promise.all([this.sendRequest({ topic: _6, method: "wc_sessionAuthenticate", params: $4, expiry: t2.expiry, throwOnFailedPublish: true, clientRpcId: se3 }), this.sendRequest({ topic: _6, method: "wc_sessionPropose", params: N14, expiry: P5.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: N14.id })]);
      } catch (A5) {
        throw this.events.off(he5, de4), this.events.off(Re4, ve5), A5;
      }
      return await this.setProposal(N14.id, N14), await this.setAuthRequest(se3, { request: O5(R3({}, $4), { verifyContext: {} }), pairingTopic: _6, transportType: r4 }), { uri: Ie4 ?? b5, response: Tt5 };
    }), c6(this, "approveSessionAuthenticate", async (t2) => {
      const { id: e3, auths: s4 } = t2, i6 = this.client.core.eventClient.createEvent({ properties: { topic: e3.toString(), trace: [or3.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (m6) {
        throw i6.setError(ar3.no_internet_connection), m6;
      }
      const r4 = this.getPendingAuthRequest(e3);
      if (!r4)
        throw i6.setError(ar3.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${e3}`);
      const n6 = r4.transportType || ee2.relay;
      n6 === ee2.relay && await this.confirmOnlineStateOrThrow();
      const a4 = r4.requester.publicKey, l8 = await this.client.core.crypto.generateKeyPair(), p5 = la(a4), h6 = { type: ie, receiverPublicKey: a4, senderPublicKey: l8 }, u4 = [], d8 = [];
      for (const m6 of s4) {
        if (!await Lc({ cacao: m6, projectId: this.client.core.projectId })) {
          i6.setError(ar3.invalid_cacao);
          const I4 = zt2("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: e3, topic: p5, error: I4, encodeOpts: h6 }), new Error(I4.message);
        }
        i6.addTrace(or3.cacaos_verified);
        const { p: E6 } = m6, _6 = je2(E6.resources), b5 = [to2(E6.iss)], V4 = bn2(E6.iss);
        if (_6) {
          const I4 = Kc(_6), T7 = qc(_6);
          u4.push(...I4), b5.push(...T7);
        }
        for (const I4 of b5)
          d8.push(`${I4}:${V4}`);
      }
      const y6 = await this.client.core.crypto.generateSharedKey(l8, a4);
      i6.addTrace(or3.create_authenticated_session_topic);
      let w6;
      if ((u4 == null ? void 0 : u4.length) > 0) {
        w6 = { topic: y6, acknowledged: true, self: { publicKey: l8, metadata: this.client.metadata }, peer: { publicKey: a4, metadata: r4.requester.metadata }, controller: a4, expiry: Si(B3), authentication: s4, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r4.pairingTopic, namespaces: Va([...new Set(u4)], [...new Set(d8)]), transportType: n6 }, i6.addTrace(or3.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(y6, { transportType: n6 });
        } catch (m6) {
          throw i6.setError(ar3.subscribe_authenticated_session_topic_failure), m6;
        }
        i6.addTrace(or3.subscribe_authenticated_session_topic_success), await this.client.session.set(y6, w6), i6.addTrace(or3.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r4.pairingTopic, metadata: r4.requester.metadata });
      }
      i6.addTrace(or3.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p5, id: e3, result: { cacaos: s4, responder: { publicKey: l8, metadata: this.client.metadata } }, encodeOpts: h6, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r4.requester.metadata, n6) });
      } catch (m6) {
        throw i6.setError(ar3.authenticated_session_approve_publish_failure), m6;
      }
      return await this.client.auth.requests.delete(e3, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r4.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i6.eventId }), { session: w6 };
    }), c6(this, "rejectSessionAuthenticate", async (t2) => {
      this.isInitialized();
      const { id: e3, reason: s4 } = t2, i6 = this.getPendingAuthRequest(e3);
      if (!i6)
        throw new Error(`Could not find pending auth request with id ${e3}`);
      i6.transportType === ee2.relay && await this.confirmOnlineStateOrThrow();
      const r4 = i6.requester.publicKey, n6 = await this.client.core.crypto.generateKeyPair(), a4 = la(r4), l8 = { type: ie, receiverPublicKey: r4, senderPublicKey: n6 };
      await this.sendError({ id: e3, topic: a4, error: s4, encodeOpts: l8, rpcOpts: P5.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i6.requester.metadata, i6.transportType) }), await this.client.auth.requests.delete(e3, { message: "rejected", code: 0 }), await this.deleteProposal(e3);
    }), c6(this, "formatAuthMessage", (t2) => {
      this.isInitialized();
      const { request: e3, iss: s4 } = t2;
      return eo2(e3, s4);
    }), c6(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0)
          for (; this.relayMessageCache.length > 0; )
            try {
              const t2 = this.relayMessageCache.shift();
              t2 && await this.onRelayMessage(t2);
            } catch (t2) {
              this.client.logger.error(t2);
            }
      }, 50);
    }), c6(this, "cleanupDuplicatePairings", async (t2) => {
      if (t2.pairingTopic)
        try {
          const e3 = this.client.core.pairing.pairings.get(t2.pairingTopic), s4 = this.client.core.pairing.pairings.getAll().filter((i6) => {
            var r4, n6;
            return ((r4 = i6.peerMetadata) == null ? void 0 : r4.url) && ((n6 = i6.peerMetadata) == null ? void 0 : n6.url) === t2.peer.metadata.url && i6.topic && i6.topic !== e3.topic;
          });
          if (s4.length === 0)
            return;
          this.client.logger.info(`Cleaning up ${s4.length} duplicate pairing(s)`), await Promise.all(s4.map((i6) => this.client.core.pairing.disconnect({ topic: i6.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
        } catch (e3) {
          this.client.logger.error(e3);
        }
    }), c6(this, "deleteSession", async (t2) => {
      var e3;
      const { topic: s4, expirerHasDeleted: i6 = false, emitEvent: r4 = true, id: n6 = 0 } = t2, { self: a4 } = this.client.session.get(s4);
      await this.client.core.relayer.unsubscribe(s4), await this.client.session.delete(s4, zt2("USER_DISCONNECTED")), this.addToRecentlyDeleted(s4, "session"), this.client.core.crypto.keychain.has(a4.publicKey) && await this.client.core.crypto.deleteKeyPair(a4.publicKey), this.client.core.crypto.keychain.has(s4) && await this.client.core.crypto.deleteSymKey(s4), i6 || this.client.core.expirer.del(s4), this.client.core.storage.removeItem(Le3).catch((l8) => this.client.logger.warn(l8)), this.getPendingSessionRequests().forEach((l8) => {
        l8.topic === s4 && this.deletePendingSessionRequest(l8.id, zt2("USER_DISCONNECTED"));
      }), s4 === ((e3 = this.sessionRequestQueue.queue[0]) == null ? void 0 : e3.topic) && (this.sessionRequestQueue.state = M5.idle), r4 && this.client.events.emit("session_delete", { id: n6, topic: s4 });
    }), c6(this, "deleteProposal", async (t2, e3) => {
      if (e3)
        try {
          const s4 = this.client.proposal.get(t2), i6 = this.client.core.eventClient.getEvent({ topic: s4.pairingTopic });
          i6 == null ? void 0 : i6.setError(nr3.proposal_expired);
        } catch {
        }
      await Promise.all([this.client.proposal.delete(t2, zt2("USER_DISCONNECTED")), e3 ? Promise.resolve() : this.client.core.expirer.del(t2)]), this.addToRecentlyDeleted(t2, "proposal");
    }), c6(this, "deletePendingSessionRequest", async (t2, e3, s4 = false) => {
      await Promise.all([this.client.pendingRequest.delete(t2, e3), s4 ? Promise.resolve() : this.client.core.expirer.del(t2)]), this.addToRecentlyDeleted(t2, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i6) => i6.id !== t2), s4 && (this.sessionRequestQueue.state = M5.idle, this.client.events.emit("session_request_expire", { id: t2 }));
    }), c6(this, "deletePendingAuthRequest", async (t2, e3, s4 = false) => {
      await Promise.all([this.client.auth.requests.delete(t2, e3), s4 ? Promise.resolve() : this.client.core.expirer.del(t2)]);
    }), c6(this, "setExpiry", async (t2, e3) => {
      this.client.session.keys.includes(t2) && (this.client.core.expirer.set(t2, e3), await this.client.session.update(t2, { expiry: e3 }));
    }), c6(this, "setProposal", async (t2, e3) => {
      this.client.core.expirer.set(t2, Si(P5.wc_sessionPropose.req.ttl)), await this.client.proposal.set(t2, e3);
    }), c6(this, "setAuthRequest", async (t2, e3) => {
      const { request: s4, pairingTopic: i6, transportType: r4 = ee2.relay } = e3;
      this.client.core.expirer.set(t2, s4.expiryTimestamp), await this.client.auth.requests.set(t2, { authPayload: s4.authPayload, requester: s4.requester, expiryTimestamp: s4.expiryTimestamp, id: t2, pairingTopic: i6, verifyContext: s4.verifyContext, transportType: r4 });
    }), c6(this, "setPendingSessionRequest", async (t2) => {
      const { id: e3, topic: s4, params: i6, verifyContext: r4 } = t2, n6 = i6.request.expiryTimestamp || Si(P5.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(e3, n6), await this.client.pendingRequest.set(e3, { id: e3, topic: s4, params: i6, verifyContext: r4 });
    }), c6(this, "sendRequest", async (t2) => {
      const { topic: e3, method: s4, params: i6, expiry: r4, relayRpcId: n6, clientRpcId: a4, throwOnFailedPublish: l8, appLink: p5, tvf: h6, publishOpts: u4 = {} } = t2, d8 = formatJsonRpcRequest(s4, i6, a4);
      let y6;
      const w6 = !!p5;
      try {
        const _6 = w6 ? Ge2 : oe;
        y6 = await this.client.core.crypto.encode(e3, d8, { encoding: _6 });
      } catch (_6) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${e3} failed`), _6;
      }
      let m6;
      if (mt2.includes(s4)) {
        const _6 = da(JSON.stringify(d8)), b5 = da(y6);
        m6 = await this.client.core.verify.register({ id: b5, decryptedId: _6 });
      }
      const E6 = R3(R3({}, P5[s4].req), u4);
      if (E6.attestation = m6, r4 && (E6.ttl = r4), n6 && (E6.id = n6), this.client.core.history.set(e3, d8), w6) {
        const _6 = Ra(p5, e3, y6);
        await global.Linking.openURL(_6, this.client.name);
      } else
        E6.tvf = O5(R3({}, h6), { correlationId: d8.id }), l8 ? (E6.internal = O5(R3({}, E6.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(e3, y6, E6)) : this.client.core.relayer.publish(e3, y6, E6).catch((_6) => this.client.logger.error(_6));
      return d8.id;
    }), c6(this, "sendProposeSession", async (t2) => {
      const { proposal: e3, publishOpts: s4 } = t2, i6 = formatJsonRpcRequest("wc_sessionPropose", e3, e3.id);
      this.client.core.history.set(e3.pairingTopic, i6);
      const r4 = await this.client.core.crypto.encode(e3.pairingTopic, i6, { encoding: oe }), n6 = da(JSON.stringify(i6)), a4 = da(r4), l8 = await this.client.core.verify.register({ id: a4, decryptedId: n6 });
      await this.client.core.relayer.publishCustom({ payload: { pairingTopic: e3.pairingTopic, sessionProposal: r4 }, opts: O5(R3({}, s4), { publishMethod: "wc_proposeSession", attestation: l8 }) });
    }), c6(this, "sendApproveSession", async (t2) => {
      const { sessionTopic: e3, pairingProposalResponse: s4, proposal: i6, sessionSettleRequest: r4, publishOpts: n6 } = t2, a4 = formatJsonRpcResult(i6.id, s4), l8 = await this.client.core.crypto.encode(i6.pairingTopic, a4, { encoding: oe }), p5 = formatJsonRpcRequest("wc_sessionSettle", r4, n6 == null ? void 0 : n6.id), h6 = await this.client.core.crypto.encode(e3, p5, { encoding: oe });
      this.client.core.history.set(e3, p5), await this.client.core.relayer.publishCustom({ payload: { sessionTopic: e3, pairingTopic: i6.pairingTopic, sessionProposalResponse: l8, sessionSettlementRequest: h6 }, opts: O5(R3({}, n6), { publishMethod: "wc_approveSession" }) });
    }), c6(this, "sendResult", async (t2) => {
      const { id: e3, topic: s4, result: i6, throwOnFailedPublish: r4, encodeOpts: n6, appLink: a4 } = t2, l8 = formatJsonRpcResult(e3, i6);
      let p5;
      const h6 = a4 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const y6 = h6 ? Ge2 : oe;
        p5 = await this.client.core.crypto.encode(s4, l8, O5(R3({}, n6 || {}), { encoding: y6 }));
      } catch (y6) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s4} failed`), y6;
      }
      let u4, d8;
      try {
        u4 = await this.client.core.history.get(s4, e3);
        const y6 = u4.request;
        try {
          d8 = this.getTVFParams(e3, y6.params, i6);
        } catch (w6) {
          this.client.logger.warn(`sendResult() -> getTVFParams() failed: ${w6 == null ? void 0 : w6.message}`);
        }
      } catch (y6) {
        throw this.client.logger.error(`sendResult() -> history.get(${s4}, ${e3}) failed`), y6;
      }
      if (h6) {
        const y6 = Ra(a4, s4, p5);
        await global.Linking.openURL(y6, this.client.name);
      } else {
        const y6 = u4.request.method, w6 = P5[y6].res;
        w6.tvf = O5(R3({}, d8), { correlationId: e3 }), r4 ? (w6.internal = O5(R3({}, w6.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s4, p5, w6)) : this.client.core.relayer.publish(s4, p5, w6).catch((m6) => this.client.logger.error(m6));
      }
      await this.client.core.history.resolve(l8);
    }), c6(this, "sendError", async (t2) => {
      const { id: e3, topic: s4, error: i6, encodeOpts: r4, rpcOpts: n6, appLink: a4 } = t2, l8 = formatJsonRpcError(e3, i6);
      let p5;
      const h6 = a4 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d8 = h6 ? Ge2 : oe;
        p5 = await this.client.core.crypto.encode(s4, l8, O5(R3({}, r4 || {}), { encoding: d8 }));
      } catch (d8) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s4} failed`), d8;
      }
      let u4;
      try {
        u4 = await this.client.core.history.get(s4, e3);
      } catch (d8) {
        throw this.client.logger.error(`sendError() -> history.get(${s4}, ${e3}) failed`), d8;
      }
      if (h6) {
        const d8 = Ra(a4, s4, p5);
        await global.Linking.openURL(d8, this.client.name);
      } else {
        const d8 = u4.request.method, y6 = n6 || P5[d8].res;
        this.client.core.relayer.publish(s4, p5, y6);
      }
      await this.client.core.history.resolve(l8);
    }), c6(this, "cleanup", async () => {
      const t2 = [], e3 = [];
      this.client.session.getAll().forEach((s4) => {
        let i6 = false;
        Oi(s4.expiry) && (i6 = true), this.client.core.crypto.keychain.has(s4.topic) || (i6 = true), i6 && t2.push(s4.topic);
      }), this.client.proposal.getAll().forEach((s4) => {
        Oi(s4.expiryTimestamp) && e3.push(s4.id);
      }), await Promise.all([...t2.map((s4) => this.deleteSession({ topic: s4 })), ...e3.map((s4) => this.deleteProposal(s4))]);
    }), c6(this, "onProviderMessageEvent", async (t2) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(t2) : await this.onRelayMessage(t2);
    }), c6(this, "onRelayEventRequest", async (t2) => {
      this.requestQueue.queue.push(t2), await this.processRequestsQueue();
    }), c6(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === M5.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = M5.active;
        const t2 = this.requestQueue.queue.shift();
        if (t2)
          try {
            await this.processRequest(t2);
          } catch (e3) {
            this.client.logger.warn(e3);
          }
      }
      this.requestQueue.state = M5.idle;
    }), c6(this, "processRequest", async (t2) => {
      const { topic: e3, payload: s4, attestation: i6, transportType: r4, encryptedId: n6 } = t2, a4 = s4.method;
      if (!this.shouldIgnorePairingRequest({ topic: e3, requestMethod: a4 }))
        switch (a4) {
          case "wc_sessionPropose":
            return await this.onSessionProposeRequest({ topic: e3, payload: s4, attestation: i6, encryptedId: n6 });
          case "wc_sessionSettle":
            return await this.onSessionSettleRequest(e3, s4);
          case "wc_sessionUpdate":
            return await this.onSessionUpdateRequest(e3, s4);
          case "wc_sessionExtend":
            return await this.onSessionExtendRequest(e3, s4);
          case "wc_sessionPing":
            return await this.onSessionPingRequest(e3, s4);
          case "wc_sessionDelete":
            return await this.onSessionDeleteRequest(e3, s4);
          case "wc_sessionRequest":
            return await this.onSessionRequest({ topic: e3, payload: s4, attestation: i6, encryptedId: n6, transportType: r4 });
          case "wc_sessionEvent":
            return await this.onSessionEventRequest(e3, s4);
          case "wc_sessionAuthenticate":
            return await this.onSessionAuthenticateRequest({ topic: e3, payload: s4, attestation: i6, encryptedId: n6, transportType: r4 });
          default:
            return this.client.logger.info(`Unsupported request method ${a4}`);
        }
    }), c6(this, "onRelayEventResponse", async (t2) => {
      const { topic: e3, payload: s4, transportType: i6 } = t2, r4 = (await this.client.core.history.get(e3, s4.id)).request.method;
      switch (r4) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(e3, s4, i6);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(e3, s4);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(e3, s4);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(e3, s4);
        case "wc_sessionPing":
          return this.onSessionPingResponse(e3, s4);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(e3, s4);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(e3, s4);
        default:
          return this.client.logger.info(`Unsupported response method ${r4}`);
      }
    }), c6(this, "onRelayEventUnknownPayload", (t2) => {
      const { topic: e3 } = t2, { message: s4 } = Bt2("MISSING_OR_INVALID", `Decoded payload on topic ${e3} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s4);
    }), c6(this, "shouldIgnorePairingRequest", (t2) => {
      const { topic: e3, requestMethod: s4 } = t2, i6 = this.expectedPairingMethodMap.get(e3);
      return !i6 || i6.includes(s4) ? false : !!(i6.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c6(this, "onSessionProposeRequest", async (t2) => {
      const { topic: e3, payload: s4, attestation: i6, encryptedId: r4 } = t2, { params: n6, id: a4 } = s4;
      try {
        const l8 = this.client.core.eventClient.getEvent({ topic: e3 });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l8 == null ? void 0 : l8.setError(X2.proposal_listener_not_found)), this.isValidConnect(R3({}, s4.params));
        const p5 = n6.expiryTimestamp || Si(P5.wc_sessionPropose.req.ttl), h6 = R3({ id: a4, pairingTopic: e3, expiryTimestamp: p5, attestation: i6, encryptedId: r4 }, n6);
        await this.setProposal(a4, h6);
        const u4 = await this.getVerifyContext({ attestationId: i6, hash: da(JSON.stringify(s4)), encryptedId: r4, metadata: h6.proposer.metadata });
        l8 == null ? void 0 : l8.addTrace(Y.emit_session_proposal), this.client.events.emit("session_proposal", { id: a4, params: h6, verifyContext: u4 });
      } catch (l8) {
        await this.sendError({ id: a4, topic: e3, error: l8, rpcOpts: P5.wc_sessionPropose.autoReject }), this.client.logger.error(l8);
      }
    }), c6(this, "onSessionProposeResponse", async (t2, e3, s4) => {
      const { id: i6 } = e3;
      if (isJsonRpcResult(e3)) {
        const { result: r4 } = e3;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r4 });
        const n6 = this.client.proposal.get(i6);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n6 });
        const a4 = n6.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a4 });
        const l8 = r4.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l8 });
        const p5 = await this.client.core.crypto.generateSharedKey(a4, l8);
        this.pendingSessions.set(i6, { sessionTopic: p5, pairingTopic: t2, proposalId: i6, publicKey: a4 });
        const h6 = await this.client.core.relayer.subscribe(p5, { transportType: s4 });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h6 }), await this.client.core.pairing.activate({ topic: t2 });
      } else if (isJsonRpcError(e3)) {
        await this.deleteProposal(i6);
        const r4 = Ni("session_connect", i6);
        if (this.events.listenerCount(r4) === 0)
          throw new Error(`emitting ${r4} without any listeners, 954`);
        this.events.emit(r4, { error: e3.error });
      }
    }), c6(this, "onSessionSettleRequest", async (t2, e3) => {
      const { id: s4, params: i6 } = e3;
      try {
        this.isValidSessionSettleRequest(i6);
        const { relay: r4, controller: n6, expiry: a4, namespaces: l8, sessionProperties: p5, scopedProperties: h6, sessionConfig: u4 } = e3.params, d8 = [...this.pendingSessions.values()].find((m6) => m6.sessionTopic === t2);
        if (!d8)
          return this.client.logger.error(`Pending session not found for topic ${t2}`);
        const y6 = this.client.proposal.get(d8.proposalId), w6 = O5(R3(R3(R3({ topic: t2, relay: r4, expiry: a4, namespaces: l8, acknowledged: true, pairingTopic: d8.pairingTopic, requiredNamespaces: y6.requiredNamespaces, optionalNamespaces: y6.optionalNamespaces, controller: n6.publicKey, self: { publicKey: d8.publicKey, metadata: this.client.metadata }, peer: { publicKey: n6.publicKey, metadata: n6.metadata } }, p5 && { sessionProperties: p5 }), h6 && { scopedProperties: h6 }), u4 && { sessionConfig: u4 }), { transportType: ee2.relay });
        await this.client.session.set(w6.topic, w6), await this.setExpiry(w6.topic, w6.expiry), await this.client.core.pairing.updateMetadata({ topic: d8.pairingTopic, metadata: w6.peer.metadata }), this.client.events.emit("session_connect", { session: w6 }), this.events.emit(Ni("session_connect", d8.proposalId), { session: w6 }), this.pendingSessions.delete(d8.proposalId), this.deleteProposal(d8.proposalId, false), this.cleanupDuplicatePairings(w6), await this.sendResult({ id: e3.id, topic: t2, result: true });
      } catch (r4) {
        await this.sendError({ id: s4, topic: t2, error: r4 }), this.client.logger.error(r4);
      }
    }), c6(this, "onSessionSettleResponse", async (t2, e3) => {
      const { id: s4 } = e3;
      isJsonRpcResult(e3) ? (await this.client.session.update(t2, { acknowledged: true }), this.events.emit(Ni("session_approve", s4), {})) : isJsonRpcError(e3) && (await this.client.session.delete(t2, zt2("USER_DISCONNECTED")), this.events.emit(Ni("session_approve", s4), { error: e3.error }));
    }), c6(this, "onSessionUpdateRequest", async (t2, e3) => {
      const { params: s4, id: i6 } = e3;
      try {
        const r4 = `${t2}_session_update`, n6 = lu.get(r4);
        if (n6 && this.isRequestOutOfSync(n6, i6)) {
          this.client.logger.warn(`Discarding out of sync request - ${i6}`), this.sendError({ id: i6, topic: t2, error: zt2("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(R3({ topic: t2 }, s4));
        try {
          lu.set(r4, i6), await this.client.session.update(t2, { namespaces: s4.namespaces }), await this.sendResult({ id: i6, topic: t2, result: true });
        } catch (a4) {
          throw lu.delete(r4), a4;
        }
        this.client.events.emit("session_update", { id: i6, topic: t2, params: s4 });
      } catch (r4) {
        await this.sendError({ id: i6, topic: t2, error: r4 }), this.client.logger.error(r4);
      }
    }), c6(this, "isRequestOutOfSync", (t2, e3) => e3.toString().slice(0, -3) < t2.toString().slice(0, -3)), c6(this, "onSessionUpdateResponse", (t2, e3) => {
      const { id: s4 } = e3, i6 = Ni("session_update", s4);
      if (this.events.listenerCount(i6) === 0)
        throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(e3) ? this.events.emit(Ni("session_update", s4), {}) : isJsonRpcError(e3) && this.events.emit(Ni("session_update", s4), { error: e3.error });
    }), c6(this, "onSessionExtendRequest", async (t2, e3) => {
      const { id: s4 } = e3;
      try {
        this.isValidExtend({ topic: t2 }), await this.setExpiry(t2, Si(B3)), await this.sendResult({ id: s4, topic: t2, result: true }), this.client.events.emit("session_extend", { id: s4, topic: t2 });
      } catch (i6) {
        await this.sendError({ id: s4, topic: t2, error: i6 }), this.client.logger.error(i6);
      }
    }), c6(this, "onSessionExtendResponse", (t2, e3) => {
      const { id: s4 } = e3, i6 = Ni("session_extend", s4);
      if (this.events.listenerCount(i6) === 0)
        throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(e3) ? this.events.emit(Ni("session_extend", s4), {}) : isJsonRpcError(e3) && this.events.emit(Ni("session_extend", s4), { error: e3.error });
    }), c6(this, "onSessionPingRequest", async (t2, e3) => {
      const { id: s4 } = e3;
      try {
        this.isValidPing({ topic: t2 }), await this.sendResult({ id: s4, topic: t2, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s4, topic: t2 });
      } catch (i6) {
        await this.sendError({ id: s4, topic: t2, error: i6 }), this.client.logger.error(i6);
      }
    }), c6(this, "onSessionPingResponse", (t2, e3) => {
      const { id: s4 } = e3, i6 = Ni("session_ping", s4);
      setTimeout(() => {
        if (this.events.listenerCount(i6) === 0)
          throw new Error(`emitting ${i6} without any listeners 2176`);
        isJsonRpcResult(e3) ? this.events.emit(Ni("session_ping", s4), {}) : isJsonRpcError(e3) && this.events.emit(Ni("session_ping", s4), { error: e3.error });
      }, 500);
    }), c6(this, "onSessionDeleteRequest", async (t2, e3) => {
      const { id: s4 } = e3;
      try {
        this.isValidDisconnect({ topic: t2, reason: e3.params }), await Promise.all([new Promise((i6) => {
          this.client.core.relayer.once(C4.publish, async () => {
            i6(await this.deleteSession({ topic: t2, id: s4 }));
          });
        }), this.sendResult({ id: s4, topic: t2, result: true }), this.cleanupPendingSentRequestsForTopic({ topic: t2, error: zt2("USER_DISCONNECTED") })]).catch((i6) => this.client.logger.error(i6));
      } catch (i6) {
        this.client.logger.error(i6);
      }
    }), c6(this, "onSessionRequest", async (t2) => {
      var e3, s4, i6;
      const { topic: r4, payload: n6, attestation: a4, encryptedId: l8, transportType: p5 } = t2, { id: h6, params: u4 } = n6;
      try {
        await this.isValidRequest(R3({ topic: r4 }, u4));
        const d8 = this.client.session.get(r4), y6 = await this.getVerifyContext({ attestationId: a4, hash: da(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u4, h6))), encryptedId: l8, metadata: d8.peer.metadata, transportType: p5 }), w6 = { id: h6, topic: r4, params: u4, verifyContext: y6 };
        await this.setPendingSessionRequest(w6), p5 === ee2.link_mode && (e3 = d8.peer.metadata.redirect) != null && e3.universal && this.client.core.addLinkModeSupportedApp((s4 = d8.peer.metadata.redirect) == null ? void 0 : s4.universal), (i6 = this.client.signConfig) != null && i6.disableRequestQueue ? this.emitSessionRequest(w6) : (this.addSessionRequestToSessionRequestQueue(w6), this.processSessionRequestQueue());
      } catch (d8) {
        await this.sendError({ id: h6, topic: r4, error: d8 }), this.client.logger.error(d8);
      }
    }), c6(this, "onSessionRequestResponse", (t2, e3) => {
      const { id: s4 } = e3, i6 = Ni("session_request", s4);
      if (this.events.listenerCount(i6) === 0)
        throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(e3) ? this.events.emit(Ni("session_request", s4), { result: e3.result }) : isJsonRpcError(e3) && this.events.emit(Ni("session_request", s4), { error: e3.error });
    }), c6(this, "onSessionEventRequest", async (t2, e3) => {
      const { id: s4, params: i6 } = e3;
      try {
        const r4 = `${t2}_session_event_${i6.event.name}`, n6 = lu.get(r4);
        if (n6 && this.isRequestOutOfSync(n6, s4)) {
          this.client.logger.info(`Discarding out of sync request - ${s4}`);
          return;
        }
        this.isValidEmit(R3({ topic: t2 }, i6)), this.client.events.emit("session_event", { id: s4, topic: t2, params: i6 }), lu.set(r4, s4);
      } catch (r4) {
        await this.sendError({ id: s4, topic: t2, error: r4 }), this.client.logger.error(r4);
      }
    }), c6(this, "onSessionAuthenticateResponse", (t2, e3) => {
      const { id: s4 } = e3;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: t2, payload: e3 }), isJsonRpcResult(e3) ? this.events.emit(Ni("session_request", s4), { result: e3.result }) : isJsonRpcError(e3) && this.events.emit(Ni("session_request", s4), { error: e3.error });
    }), c6(this, "onSessionAuthenticateRequest", async (t2) => {
      var e3;
      const { topic: s4, payload: i6, attestation: r4, encryptedId: n6, transportType: a4 } = t2;
      try {
        const { requester: l8, authPayload: p5, expiryTimestamp: h6 } = i6.params, u4 = await this.getVerifyContext({ attestationId: r4, hash: da(JSON.stringify(i6)), encryptedId: n6, metadata: l8.metadata, transportType: a4 }), d8 = { requester: l8, pairingTopic: s4, id: i6.id, authPayload: p5, verifyContext: u4, expiryTimestamp: h6 };
        await this.setAuthRequest(i6.id, { request: d8, pairingTopic: s4, transportType: a4 }), a4 === ee2.link_mode && (e3 = l8.metadata.redirect) != null && e3.universal && this.client.core.addLinkModeSupportedApp(l8.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s4, params: i6.params, id: i6.id, verifyContext: u4 });
      } catch (l8) {
        this.client.logger.error(l8);
        const p5 = i6.params.requester.publicKey, h6 = await this.client.core.crypto.generateKeyPair(), u4 = this.getAppLinkIfEnabled(i6.params.requester.metadata, a4), d8 = { type: ie, receiverPublicKey: p5, senderPublicKey: h6 };
        await this.sendError({ id: i6.id, topic: s4, error: l8, encodeOpts: d8, rpcOpts: P5.wc_sessionAuthenticate.autoReject, appLink: u4 });
      }
    }), c6(this, "addSessionRequestToSessionRequestQueue", (t2) => {
      this.sessionRequestQueue.queue.push(t2);
    }), c6(this, "cleanupAfterResponse", (t2) => {
      this.deletePendingSessionRequest(t2.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = M5.idle, this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay));
    }), c6(this, "cleanupPendingSentRequestsForTopic", ({ topic: t2, error: e3 }) => {
      const s4 = this.client.core.history.pending;
      s4.length > 0 && s4.filter((i6) => i6.topic === t2 && i6.request.method === "wc_sessionRequest").forEach((i6) => {
        const r4 = i6.request.id, n6 = Ni("session_request", r4);
        if (this.events.listenerCount(n6) === 0)
          throw new Error(`emitting ${n6} without any listeners`);
        this.events.emit(Ni("session_request", i6.request.id), { error: e3 });
      });
    }), c6(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === M5.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const t2 = this.sessionRequestQueue.queue[0];
      if (!t2) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.emitSessionRequest(t2);
      } catch (e3) {
        this.client.logger.error(e3);
      }
    }), c6(this, "emitSessionRequest", (t2) => {
      if (this.emittedSessionRequests.has(t2.id)) {
        this.client.logger.warn({ id: t2.id }, `Skipping emitting \`session_request\` event for duplicate request. id: ${t2.id}`);
        return;
      }
      this.sessionRequestQueue.state = M5.active, this.emittedSessionRequests.add(t2.id), this.client.events.emit("session_request", t2);
    }), c6(this, "onPairingCreated", (t2) => {
      if (t2.methods && this.expectedPairingMethodMap.set(t2.topic, t2.methods), t2.active)
        return;
      const e3 = this.client.proposal.getAll().find((s4) => s4.pairingTopic === t2.topic);
      e3 && this.onSessionProposeRequest({ topic: t2.topic, payload: formatJsonRpcRequest("wc_sessionPropose", O5(R3({}, e3), { requiredNamespaces: e3.requiredNamespaces, optionalNamespaces: e3.optionalNamespaces, relays: e3.relays, proposer: e3.proposer, sessionProperties: e3.sessionProperties, scopedProperties: e3.scopedProperties }), e3.id), attestation: e3.attestation, encryptedId: e3.encryptedId });
    }), c6(this, "isValidConnect", async (t2) => {
      if (!Xa(t2)) {
        const { message: l8 } = Bt2("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(t2)}`);
        throw new Error(l8);
      }
      const { pairingTopic: e3, requiredNamespaces: s4, optionalNamespaces: i6, sessionProperties: r4, scopedProperties: n6, relays: a4 } = t2;
      if (Dt2(e3) || await this.isValidPairingTopic(e3), !Ya(a4, true)) {
        const { message: l8 } = Bt2("MISSING_OR_INVALID", `connect() relays: ${a4}`);
        throw new Error(l8);
      }
      if (!Dt2(s4) && Ye2(s4) !== 0) {
        const l8 = "requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";
        ["fatal", "error", "silent"].includes(this.client.logger.level) ? console.warn(l8) : this.client.logger.warn(l8), this.validateNamespaces(s4, "requiredNamespaces");
      }
      if (!Dt2(i6) && Ye2(i6) !== 0 && this.validateNamespaces(i6, "optionalNamespaces"), Dt2(r4) || this.validateSessionProps(r4, "sessionProperties"), !Dt2(n6)) {
        this.validateSessionProps(n6, "scopedProperties");
        const l8 = Object.keys(s4 || {}).concat(Object.keys(i6 || {}));
        if (!Object.keys(n6).every((p5) => l8.includes(p5.split(":")[0])))
          throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(n6)}, required/optional namespaces: ${JSON.stringify(l8)}`);
      }
    }), c6(this, "validateNamespaces", (t2, e3) => {
      const s4 = za(t2, "connect()", e3);
      if (s4)
        throw new Error(s4.message);
    }), c6(this, "isValidApprove", async (t2) => {
      if (!Xa(t2))
        throw new Error(Bt2("MISSING_OR_INVALID", `approve() params: ${t2}`).message);
      const { id: e3, namespaces: s4, relayProtocol: i6, sessionProperties: r4, scopedProperties: n6 } = t2;
      this.checkRecentlyDeleted(e3), await this.isValidProposalId(e3);
      const a4 = this.client.proposal.get(e3), l8 = Ss(s4, "approve()");
      if (l8)
        throw new Error(l8.message);
      const p5 = Ns(a4.requiredNamespaces, s4, "approve()");
      if (p5)
        throw new Error(p5.message);
      if (!ft2(i6, true)) {
        const { message: h6 } = Bt2("MISSING_OR_INVALID", `approve() relayProtocol: ${i6}`);
        throw new Error(h6);
      }
      if (Dt2(r4) || this.validateSessionProps(r4, "sessionProperties"), !Dt2(n6)) {
        this.validateSessionProps(n6, "scopedProperties");
        const h6 = new Set(Object.keys(s4));
        if (!Object.keys(n6).every((u4) => h6.has(u4.split(":")[0])))
          throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(n6)}, approved namespaces: ${Array.from(h6).join(", ")}`);
      }
    }), c6(this, "isValidReject", async (t2) => {
      if (!Xa(t2)) {
        const { message: i6 } = Bt2("MISSING_OR_INVALID", `reject() params: ${t2}`);
        throw new Error(i6);
      }
      const { id: e3, reason: s4 } = t2;
      if (this.checkRecentlyDeleted(e3), await this.isValidProposalId(e3), !Ja(s4)) {
        const { message: i6 } = Bt2("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s4)}`);
        throw new Error(i6);
      }
    }), c6(this, "isValidSessionSettleRequest", (t2) => {
      if (!Xa(t2)) {
        const { message: l8 } = Bt2("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${t2}`);
        throw new Error(l8);
      }
      const { relay: e3, controller: s4, namespaces: i6, expiry: r4 } = t2;
      if (!Os(e3)) {
        const { message: l8 } = Bt2("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l8);
      }
      const n6 = Ga(s4, "onSessionSettleRequest()");
      if (n6)
        throw new Error(n6.message);
      const a4 = Ss(i6, "onSessionSettleRequest()");
      if (a4)
        throw new Error(a4.message);
      if (Oi(r4)) {
        const { message: l8 } = Bt2("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l8);
      }
    }), c6(this, "isValidUpdate", async (t2) => {
      if (!Xa(t2)) {
        const { message: a4 } = Bt2("MISSING_OR_INVALID", `update() params: ${t2}`);
        throw new Error(a4);
      }
      const { topic: e3, namespaces: s4 } = t2;
      this.checkRecentlyDeleted(e3), await this.isValidSessionTopic(e3);
      const i6 = this.client.session.get(e3), r4 = Ss(s4, "update()");
      if (r4)
        throw new Error(r4.message);
      const n6 = Ns(i6.requiredNamespaces, s4, "update()");
      if (n6)
        throw new Error(n6.message);
    }), c6(this, "isValidExtend", async (t2) => {
      if (!Xa(t2)) {
        const { message: s4 } = Bt2("MISSING_OR_INVALID", `extend() params: ${t2}`);
        throw new Error(s4);
      }
      const { topic: e3 } = t2;
      this.checkRecentlyDeleted(e3), await this.isValidSessionTopic(e3);
    }), c6(this, "isValidRequest", async (t2) => {
      if (!Xa(t2)) {
        const { message: a4 } = Bt2("MISSING_OR_INVALID", `request() params: ${t2}`);
        throw new Error(a4);
      }
      const { topic: e3, request: s4, chainId: i6, expiry: r4 } = t2;
      this.checkRecentlyDeleted(e3), await this.isValidSessionTopic(e3);
      const { namespaces: n6 } = this.client.session.get(e3);
      if (!nu(n6, i6)) {
        const { message: a4 } = Bt2("MISSING_OR_INVALID", `request() chainId: ${i6}`);
        throw new Error(a4);
      }
      if (!Qa(s4)) {
        const { message: a4 } = Bt2("MISSING_OR_INVALID", `request() ${JSON.stringify(s4)}`);
        throw new Error(a4);
      }
      if (!ru(n6, i6, s4.method)) {
        const { message: a4 } = Bt2("MISSING_OR_INVALID", `request() method: ${s4.method}`);
        throw new Error(a4);
      }
      if (r4 && !cu(r4, _e3)) {
        const { message: a4 } = Bt2("MISSING_OR_INVALID", `request() expiry: ${r4}. Expiry must be a number (in seconds) between ${_e3.min} and ${_e3.max}`);
        throw new Error(a4);
      }
    }), c6(this, "isValidRespond", async (t2) => {
      var e3;
      if (!Xa(t2)) {
        const { message: r4 } = Bt2("MISSING_OR_INVALID", `respond() params: ${t2}`);
        throw new Error(r4);
      }
      const { topic: s4, response: i6 } = t2;
      try {
        await this.isValidSessionTopic(s4);
      } catch (r4) {
        throw (e3 = t2 == null ? void 0 : t2.response) != null && e3.id && this.cleanupAfterResponse(t2), r4;
      }
      if (!tu(i6)) {
        const { message: r4 } = Bt2("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i6)}`);
        throw new Error(r4);
      }
    }), c6(this, "isValidPing", async (t2) => {
      if (!Xa(t2)) {
        const { message: s4 } = Bt2("MISSING_OR_INVALID", `ping() params: ${t2}`);
        throw new Error(s4);
      }
      const { topic: e3 } = t2;
      await this.isValidSessionOrPairingTopic(e3);
    }), c6(this, "isValidEmit", async (t2) => {
      if (!Xa(t2)) {
        const { message: n6 } = Bt2("MISSING_OR_INVALID", `emit() params: ${t2}`);
        throw new Error(n6);
      }
      const { topic: e3, event: s4, chainId: i6 } = t2;
      await this.isValidSessionTopic(e3);
      const { namespaces: r4 } = this.client.session.get(e3);
      if (!nu(r4, i6)) {
        const { message: n6 } = Bt2("MISSING_OR_INVALID", `emit() chainId: ${i6}`);
        throw new Error(n6);
      }
      if (!eu(s4)) {
        const { message: n6 } = Bt2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s4)}`);
        throw new Error(n6);
      }
      if (!ou(r4, i6, s4.name)) {
        const { message: n6 } = Bt2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s4)}`);
        throw new Error(n6);
      }
    }), c6(this, "isValidDisconnect", async (t2) => {
      if (!Xa(t2)) {
        const { message: s4 } = Bt2("MISSING_OR_INVALID", `disconnect() params: ${t2}`);
        throw new Error(s4);
      }
      const { topic: e3 } = t2;
      await this.isValidSessionOrPairingTopic(e3);
    }), c6(this, "isValidAuthenticate", (t2) => {
      const { chains: e3, uri: s4, domain: i6, nonce: r4 } = t2;
      if (!Array.isArray(e3) || e3.length === 0)
        throw new Error("chains is required and must be a non-empty array");
      if (!ft2(s4, false))
        throw new Error("uri is required parameter");
      if (!ft2(i6, false))
        throw new Error("domain is required parameter");
      if (!ft2(r4, false))
        throw new Error("nonce is required parameter");
      if ([...new Set(e3.map((a4) => Je2(a4).namespace))].length > 1)
        throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: n6 } = Je2(e3[0]);
      if (n6 !== "eip155")
        throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c6(this, "getVerifyContext", async (t2) => {
      const { attestationId: e3, hash: s4, encryptedId: i6, metadata: r4, transportType: n6 } = t2, a4 = { verified: { verifyUrl: r4.verifyUrl || be3, validation: "UNKNOWN", origin: r4.url || "" } };
      try {
        if (n6 === ee2.link_mode) {
          const p5 = this.getAppLinkIfEnabled(r4, n6);
          return a4.verified.validation = p5 && new URL(p5).origin === new URL(r4.url).origin ? "VALID" : "INVALID", a4;
        }
        const l8 = await this.client.core.verify.resolve({ attestationId: e3, hash: s4, encryptedId: i6, verifyUrl: r4.verifyUrl });
        l8 && (a4.verified.origin = l8.origin, a4.verified.isScam = l8.isScam, a4.verified.validation = l8.origin === new URL(r4.url).origin ? "VALID" : "INVALID");
      } catch (l8) {
        this.client.logger.warn(l8);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a4)}`), a4;
    }), c6(this, "validateSessionProps", (t2, e3) => {
      Object.values(t2).forEach((s4, i6) => {
        if (s4 == null) {
          const { message: r4 } = Bt2("MISSING_OR_INVALID", `${e3} must contain an existing value for each key. Received: ${s4} for key ${Object.keys(t2)[i6]}`);
          throw new Error(r4);
        }
      });
    }), c6(this, "getPendingAuthRequest", (t2) => {
      const e3 = this.client.auth.requests.get(t2);
      return typeof e3 == "object" ? e3 : void 0;
    }), c6(this, "addToRecentlyDeleted", (t2, e3) => {
      if (this.recentlyDeletedMap.set(t2, e3), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s4 = 0;
        const i6 = this.recentlyDeletedLimit / 2;
        for (const r4 of this.recentlyDeletedMap.keys()) {
          if (s4++ >= i6)
            break;
          this.recentlyDeletedMap.delete(r4);
        }
      }
    }), c6(this, "checkRecentlyDeleted", (t2) => {
      const e3 = this.recentlyDeletedMap.get(t2);
      if (e3) {
        const { message: s4 } = Bt2("MISSING_OR_INVALID", `Record was recently deleted - ${e3}: ${t2}`);
        throw new Error(s4);
      }
    }), c6(this, "isLinkModeEnabled", (t2, e3) => {
      var s4, i6, r4, n6, a4, l8, p5, h6, u4;
      return !t2 || e3 !== ee2.link_mode ? false : ((i6 = (s4 = this.client.metadata) == null ? void 0 : s4.redirect) == null ? void 0 : i6.linkMode) === true && ((n6 = (r4 = this.client.metadata) == null ? void 0 : r4.redirect) == null ? void 0 : n6.universal) !== void 0 && ((l8 = (a4 = this.client.metadata) == null ? void 0 : a4.redirect) == null ? void 0 : l8.universal) !== "" && ((p5 = t2 == null ? void 0 : t2.redirect) == null ? void 0 : p5.universal) !== void 0 && ((h6 = t2 == null ? void 0 : t2.redirect) == null ? void 0 : h6.universal) !== "" && ((u4 = t2 == null ? void 0 : t2.redirect) == null ? void 0 : u4.linkMode) === true && this.client.core.linkModeSupportedApps.includes(t2.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c6(this, "getAppLinkIfEnabled", (t2, e3) => {
      var s4;
      return this.isLinkModeEnabled(t2, e3) ? (s4 = t2 == null ? void 0 : t2.redirect) == null ? void 0 : s4.universal : void 0;
    }), c6(this, "handleLinkModeMessage", ({ url: t2 }) => {
      if (!t2 || !t2.includes("wc_ev") || !t2.includes("topic"))
        return;
      const e3 = Ri(t2, "topic") || "", s4 = decodeURIComponent(Ri(t2, "wc_ev") || ""), i6 = this.client.session.keys.includes(e3);
      i6 && this.client.session.update(e3, { transportType: ee2.link_mode }), this.client.core.dispatchEnvelope({ topic: e3, message: s4, sessionExists: i6 });
    }), c6(this, "registerLinkModeListeners", async () => {
      var t2;
      if (Ti() || At() && (t2 = this.client.metadata.redirect) != null && t2.linkMode) {
        const e3 = global == null ? void 0 : global.Linking;
        if (typeof e3 < "u") {
          e3.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s4 = await e3.getInitialURL();
          s4 && setTimeout(() => {
            this.handleLinkModeMessage({ url: s4 });
          }, 50);
        }
      }
    }), c6(this, "getTVFParams", (t2, e3, s4) => {
      var i6, r4, n6;
      if (!((i6 = e3.request) != null && i6.method))
        return {};
      const a4 = { correlationId: t2, rpcMethods: [e3.request.method], chainId: e3.chainId };
      try {
        const l8 = this.extractTxHashesFromResult(e3.request, s4);
        a4.txHashes = l8, a4.contractAddresses = this.isValidContractData(e3.request.params) ? [(n6 = (r4 = e3.request.params) == null ? void 0 : r4[0]) == null ? void 0 : n6.to] : [];
      } catch (l8) {
        this.client.logger.warn("Error getting TVF params", l8);
      }
      return a4;
    }), c6(this, "isValidContractData", (t2) => {
      var e3;
      if (!t2)
        return false;
      try {
        const s4 = (t2 == null ? void 0 : t2.data) || ((e3 = t2 == null ? void 0 : t2[0]) == null ? void 0 : e3.data);
        if (!s4.startsWith("0x"))
          return false;
        const i6 = s4.slice(2);
        return /^[0-9a-fA-F]*$/.test(i6) ? i6.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c6(this, "extractTxHashesFromResult", (t2, e3) => {
      var s4;
      try {
        if (!e3)
          return [];
        const i6 = t2.method, r4 = yt3[i6];
        if (i6 === "sui_signTransaction")
          return [Ic(e3.transactionBytes)];
        if (i6 === "near_signTransaction")
          return [Sc(e3)];
        if (i6 === "near_signTransactions")
          return e3.map((a4) => Sc(a4));
        if (i6 === "xrpl_signTransactionFor" || i6 === "xrpl_signTransaction")
          return [(s4 = e3.tx_json) == null ? void 0 : s4.hash];
        if (i6 === "polkadot_signTransaction")
          return [bu({ transaction: t2.params.transactionPayload, signature: e3.signature })];
        if (i6 === "algo_signTxn")
          return Ee2(e3) ? e3.map((a4) => Oc(a4)) : [Oc(e3)];
        if (i6 === "cosmos_signDirect")
          return [Nc(e3)];
        if (i6 === "wallet_sendCalls")
          return Uc(e3);
        if (typeof e3 == "string")
          return [e3];
        const n6 = e3[r4.key];
        if (Ee2(n6))
          return i6 === "solana_signAllTransactions" ? n6.map((a4) => Ac(a4)) : n6;
        if (typeof n6 == "string")
          return [n6];
      } catch (i6) {
        this.client.logger.warn("Error extracting tx hashes from result", i6);
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const o6 = this.client.session.keys, t2 = this.client.core.relayer.messages.getWithoutAck(o6);
      for (const [e3, s4] of Object.entries(t2))
        for (const i6 of s4)
          try {
            await this.onProviderMessageEvent({ topic: e3, message: i6, publishedAt: Date.now() });
          } catch {
            this.client.logger.warn(`Error processing pending message event for topic: ${e3}, message: ${i6}`);
          }
    } catch (o6) {
      this.client.logger.warn("processPendingMessageEvents failed", o6);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: o6 } = Bt2("NOT_INITIALIZED", this.name);
      throw new Error(o6);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C4.message, (o6) => {
      this.onProviderMessageEvent(o6);
    });
  }
  async onRelayMessage(o6) {
    const { topic: t2, message: e3, attestation: s4, transportType: i6 } = o6, { publicKey: r4 } = this.client.auth.authKeys.keys.includes(pe4) ? this.client.auth.authKeys.get(pe4) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const n6 = await this.client.core.crypto.decode(t2, e3, { receiverPublicKey: r4, encoding: i6 === ee2.link_mode ? Ge2 : oe });
      isJsonRpcRequest(n6) ? (this.client.core.history.set(t2, n6), await this.onRelayEventRequest({ topic: t2, payload: n6, attestation: s4, transportType: i6, encryptedId: da(e3) })) : isJsonRpcResponse(n6) ? (await this.client.core.history.resolve(n6), await this.onRelayEventResponse({ topic: t2, payload: n6, transportType: i6 }), this.client.core.history.delete(t2, n6.id)) : await this.onRelayEventUnknownPayload({ topic: t2, payload: n6, transportType: i6 }), await this.client.core.relayer.messages.ack(t2, e3);
    } catch (n6) {
      this.client.logger.error(n6);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(q2.expired, async (o6) => {
      const { topic: t2, id: e3 } = Ii(o6.target);
      if (e3 && this.client.pendingRequest.keys.includes(e3))
        return await this.deletePendingSessionRequest(e3, Bt2("EXPIRED"), true);
      if (e3 && this.client.auth.requests.keys.includes(e3))
        return await this.deletePendingAuthRequest(e3, Bt2("EXPIRED"), true);
      t2 ? this.client.session.keys.includes(t2) && (await this.deleteSession({ topic: t2, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: t2 })) : e3 && (await this.deleteProposal(e3, true), this.client.events.emit("proposal_expire", { id: e3 }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(ae2.create, (o6) => this.onPairingCreated(o6)), this.client.core.pairing.events.on(ae2.delete, (o6) => {
      this.addToRecentlyDeleted(o6.topic, "pairing");
    });
  }
  isValidPairingTopic(o6) {
    if (!ft2(o6, false)) {
      const { message: t2 } = Bt2("MISSING_OR_INVALID", `pairing topic should be a string: ${o6}`);
      throw new Error(t2);
    }
    if (!this.client.core.pairing.pairings.keys.includes(o6)) {
      const { message: t2 } = Bt2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o6}`);
      throw new Error(t2);
    }
    if (Oi(this.client.core.pairing.pairings.get(o6).expiry)) {
      const { message: t2 } = Bt2("EXPIRED", `pairing topic: ${o6}`);
      throw new Error(t2);
    }
  }
  async isValidSessionTopic(o6) {
    if (!ft2(o6, false)) {
      const { message: t2 } = Bt2("MISSING_OR_INVALID", `session topic should be a string: ${o6}`);
      throw new Error(t2);
    }
    if (this.checkRecentlyDeleted(o6), !this.client.session.keys.includes(o6)) {
      const { message: t2 } = Bt2("NO_MATCHING_KEY", `session topic doesn't exist: ${o6}`);
      throw new Error(t2);
    }
    if (Oi(this.client.session.get(o6).expiry)) {
      await this.deleteSession({ topic: o6 });
      const { message: t2 } = Bt2("EXPIRED", `session topic: ${o6}`);
      throw new Error(t2);
    }
    if (!this.client.core.crypto.keychain.has(o6)) {
      const { message: t2 } = Bt2("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o6}`);
      throw await this.deleteSession({ topic: o6 }), new Error(t2);
    }
  }
  async isValidSessionOrPairingTopic(o6) {
    if (this.checkRecentlyDeleted(o6), this.client.session.keys.includes(o6))
      await this.isValidSessionTopic(o6);
    else if (this.client.core.pairing.pairings.keys.includes(o6))
      this.isValidPairingTopic(o6);
    else if (ft2(o6, false)) {
      const { message: t2 } = Bt2("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o6}`);
      throw new Error(t2);
    } else {
      const { message: t2 } = Bt2("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o6}`);
      throw new Error(t2);
    }
  }
  async isValidProposalId(o6) {
    if (!Wa(o6)) {
      const { message: t2 } = Bt2("MISSING_OR_INVALID", `proposal id should be a number: ${o6}`);
      throw new Error(t2);
    }
    if (!this.client.proposal.keys.includes(o6)) {
      const { message: t2 } = Bt2("NO_MATCHING_KEY", `proposal id doesn't exist: ${o6}`);
      throw new Error(t2);
    }
    if (Oi(this.client.proposal.get(o6).expiryTimestamp)) {
      await this.deleteProposal(o6);
      const { message: t2 } = Bt2("EXPIRED", `proposal id: ${o6}`);
      throw new Error(t2);
    }
  }
};
var Ds2 = class extends Ui2 {
  constructor(o6, t2) {
    super(o6, t2, dt3, we4), this.core = o6, this.logger = t2;
  }
};
var It4 = class extends Ui2 {
  constructor(o6, t2) {
    super(o6, t2, ut3, we4), this.core = o6, this.logger = t2;
  }
};
var Ls2 = class extends Ui2 {
  constructor(o6, t2) {
    super(o6, t2, wt3, we4, (e3) => e3.id), this.core = o6, this.logger = t2;
  }
};
var Ms = class extends Ui2 {
  constructor(o6, t2) {
    super(o6, t2, St4, le3, () => pe4), this.core = o6, this.logger = t2;
  }
};
var $s2 = class extends Ui2 {
  constructor(o6, t2) {
    super(o6, t2, Et3, le3), this.core = o6, this.logger = t2;
  }
};
var Ks = class extends Ui2 {
  constructor(o6, t2) {
    super(o6, t2, Rt4, le3, (e3) => e3.id), this.core = o6, this.logger = t2;
  }
};
var Us2 = Object.defineProperty;
var Gs2 = (S6, o6, t2) => o6 in S6 ? Us2(S6, o6, { enumerable: true, configurable: true, writable: true, value: t2 }) : S6[o6] = t2;
var Ke4 = (S6, o6, t2) => Gs2(S6, typeof o6 != "symbol" ? o6 + "" : o6, t2);
var js2 = class {
  constructor(o6, t2) {
    this.core = o6, this.logger = t2, Ke4(this, "authKeys"), Ke4(this, "pairingTopics"), Ke4(this, "requests"), this.authKeys = new Ms(this.core, this.logger), this.pairingTopics = new $s2(this.core, this.logger), this.requests = new Ks(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var Fs = Object.defineProperty;
var Qs3 = (S6, o6, t2) => o6 in S6 ? Fs(S6, o6, { enumerable: true, configurable: true, writable: true, value: t2 }) : S6[o6] = t2;
var f9 = (S6, o6, t2) => Qs3(S6, typeof o6 != "symbol" ? o6 + "" : o6, t2);
var fe3 = class _fe extends J3 {
  constructor(o6) {
    super(o6), f9(this, "protocol", Ve4), f9(this, "version", ke3), f9(this, "name", me4.name), f9(this, "metadata"), f9(this, "core"), f9(this, "logger"), f9(this, "events", new import_events10.EventEmitter()), f9(this, "engine"), f9(this, "session"), f9(this, "proposal"), f9(this, "pendingRequest"), f9(this, "auth"), f9(this, "signConfig"), f9(this, "on", (e3, s4) => this.events.on(e3, s4)), f9(this, "once", (e3, s4) => this.events.once(e3, s4)), f9(this, "off", (e3, s4) => this.events.off(e3, s4)), f9(this, "removeListener", (e3, s4) => this.events.removeListener(e3, s4)), f9(this, "removeAllListeners", (e3) => this.events.removeAllListeners(e3)), f9(this, "connect", async (e3) => {
      try {
        return await this.engine.connect(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "pair", async (e3) => {
      try {
        return await this.engine.pair(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "approve", async (e3) => {
      try {
        return await this.engine.approve(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "reject", async (e3) => {
      try {
        return await this.engine.reject(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "update", async (e3) => {
      try {
        return await this.engine.update(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "extend", async (e3) => {
      try {
        return await this.engine.extend(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "request", async (e3) => {
      try {
        return await this.engine.request(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "respond", async (e3) => {
      try {
        return await this.engine.respond(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "ping", async (e3) => {
      try {
        return await this.engine.ping(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "emit", async (e3) => {
      try {
        return await this.engine.emit(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "disconnect", async (e3) => {
      try {
        return await this.engine.disconnect(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "find", (e3) => {
      try {
        return this.engine.find(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (e3) {
        throw this.logger.error(e3.message), e3;
      }
    }), f9(this, "authenticate", async (e3, s4) => {
      try {
        return await this.engine.authenticate(e3, s4);
      } catch (i6) {
        throw this.logger.error(i6.message), i6;
      }
    }), f9(this, "formatAuthMessage", (e3) => {
      try {
        return this.engine.formatAuthMessage(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "approveSessionAuthenticate", async (e3) => {
      try {
        return await this.engine.approveSessionAuthenticate(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), f9(this, "rejectSessionAuthenticate", async (e3) => {
      try {
        return await this.engine.rejectSessionAuthenticate(e3);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), this.name = (o6 == null ? void 0 : o6.name) || me4.name, this.metadata = ui(o6 == null ? void 0 : o6.metadata), this.signConfig = o6 == null ? void 0 : o6.signConfig;
    const t2 = typeof (o6 == null ? void 0 : o6.logger) < "u" && typeof (o6 == null ? void 0 : o6.logger) != "string" ? o6.logger : (0, import_pino2.default)(k4({ level: (o6 == null ? void 0 : o6.logger) || me4.logger }));
    this.core = (o6 == null ? void 0 : o6.core) || new ta2(o6), this.logger = E3(t2, this.name), this.session = new It4(this.core, this.logger), this.proposal = new Ds2(this.core, this.logger), this.pendingRequest = new Ls2(this.core, this.logger), this.engine = new ks2(this), this.auth = new js2(this.core, this.logger);
  }
  static async init(o6) {
    const t2 = new _fe(o6);
    return await t2.initialize(), t2;
  }
  get context() {
    return y3(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success");
    } catch (o6) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(o6.message), o6;
    }
  }
};

// node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js
var import_events11 = __toESM(require_events());
var import_cross_fetch3 = __toESM(require_browser_ponyfill2());
var P6 = Object.defineProperty;
var w4 = Object.defineProperties;
var E4 = Object.getOwnPropertyDescriptors;
var c7 = Object.getOwnPropertySymbols;
var L3 = Object.prototype.hasOwnProperty;
var O6 = Object.prototype.propertyIsEnumerable;
var l7 = (r4, t2, e3) => t2 in r4 ? P6(r4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : r4[t2] = e3;
var p4 = (r4, t2) => {
  for (var e3 in t2 || (t2 = {}))
    L3.call(t2, e3) && l7(r4, e3, t2[e3]);
  if (c7)
    for (var e3 of c7(t2))
      O6.call(t2, e3) && l7(r4, e3, t2[e3]);
  return r4;
};
var v9 = (r4, t2) => w4(r4, E4(t2));
var j4 = { Accept: "application/json", "Content-Type": "application/json" };
var T5 = "POST";
var d6 = { headers: j4, method: T5 };
var g5 = 10;
var f10 = class {
  constructor(t2, e3 = false) {
    if (this.url = t2, this.disableProviderPing = e3, this.events = new import_events11.EventEmitter(), this.isAvailable = false, this.registering = false, !isHttpUrl(t2))
      throw new Error(`Provided URL is not compatible with HTTP connection: ${t2}`);
    this.url = t2, this.disableProviderPing = e3;
  }
  get connected() {
    return this.isAvailable;
  }
  get connecting() {
    return this.registering;
  }
  on(t2, e3) {
    this.events.on(t2, e3);
  }
  once(t2, e3) {
    this.events.once(t2, e3);
  }
  off(t2, e3) {
    this.events.off(t2, e3);
  }
  removeListener(t2, e3) {
    this.events.removeListener(t2, e3);
  }
  async open(t2 = this.url) {
    await this.register(t2);
  }
  async close() {
    if (!this.isAvailable)
      throw new Error("Connection already closed");
    this.onClose();
  }
  async send(t2) {
    this.isAvailable || await this.register();
    try {
      const e3 = safeJsonStringify(t2), s4 = await (await (0, import_cross_fetch3.default)(this.url, v9(p4({}, d6), { body: e3 }))).json();
      this.onPayload({ data: s4 });
    } catch (e3) {
      this.onError(t2.id, e3);
    }
  }
  async register(t2 = this.url) {
    if (!isHttpUrl(t2))
      throw new Error(`Provided URL is not compatible with HTTP connection: ${t2}`);
    if (this.registering) {
      const e3 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= e3 || this.events.listenerCount("open") >= e3) && this.events.setMaxListeners(e3 + 1), new Promise((s4, i6) => {
        this.events.once("register_error", (n6) => {
          this.resetMaxListeners(), i6(n6);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.isAvailable > "u")
            return i6(new Error("HTTP connection is missing or invalid"));
          s4();
        });
      });
    }
    this.url = t2, this.registering = true;
    try {
      if (!this.disableProviderPing) {
        const e3 = safeJsonStringify({ id: 1, jsonrpc: "2.0", method: "test", params: [] });
        await (0, import_cross_fetch3.default)(t2, v9(p4({}, d6), { body: e3 }));
      }
      this.onOpen();
    } catch (e3) {
      const s4 = this.parseError(e3);
      throw this.events.emit("register_error", s4), this.onClose(), s4;
    }
  }
  onOpen() {
    this.isAvailable = true, this.registering = false, this.events.emit("open");
  }
  onClose() {
    this.isAvailable = false, this.registering = false, this.events.emit("close");
  }
  onPayload(t2) {
    if (typeof t2.data > "u")
      return;
    const e3 = typeof t2.data == "string" ? safeJsonParse(t2.data) : t2.data;
    this.events.emit("payload", e3);
  }
  onError(t2, e3) {
    const s4 = this.parseError(e3), i6 = s4.message || s4.toString(), n6 = formatJsonRpcError(t2, i6);
    this.events.emit("payload", n6);
  }
  parseError(t2, e3 = this.url) {
    return parseConnectionError(t2, e3, "HTTP");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > g5 && this.events.setMaxListeners(g5);
  }
};

// node_modules/@walletconnect/universal-provider/dist/index.es.js
var import_events12 = __toESM(require_events());
var Z = "error";
var Fe3 = "wss://relay.walletconnect.org";
var He4 = "wc";
var Ue4 = "universal_provider";
var $3 = `${He4}@2:${Ue4}:`;
var T6 = "https://rpc.walletconnect.org/v1/";
var ee3 = "generic";
var Be4 = `${T6}bundler`;
var y5 = "call_status";
var Le4 = 86400;
var _5 = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
function x6(t2) {
  return t2 == null || typeof t2 != "object" && typeof t2 != "function";
}
function te3(t2) {
  return Object.getOwnPropertySymbols(t2).filter((e3) => Object.prototype.propertyIsEnumerable.call(t2, e3));
}
function se2(t2) {
  return t2 == null ? t2 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(t2);
}
var Me5 = "[object RegExp]";
var ie3 = "[object String]";
var ne2 = "[object Number]";
var re3 = "[object Boolean]";
var ae3 = "[object Arguments]";
var ze3 = "[object Symbol]";
var Ge4 = "[object Date]";
var We4 = "[object Map]";
var Je4 = "[object Set]";
var Ke5 = "[object Array]";
var Ve5 = "[object ArrayBuffer]";
var Ye4 = "[object Object]";
var Xe4 = "[object DataView]";
var ke4 = "[object Uint8Array]";
var Qe3 = "[object Uint8ClampedArray]";
var Ze4 = "[object Uint16Array]";
var Te3 = "[object Uint32Array]";
var et3 = "[object Int8Array]";
var tt3 = "[object Int16Array]";
var st3 = "[object Int32Array]";
var it2 = "[object Float32Array]";
var nt3 = "[object Float64Array]";
function F3(t2) {
  return ArrayBuffer.isView(t2) && !(t2 instanceof DataView);
}
function rt4(t2, e3) {
  return v10(t2, void 0, t2, /* @__PURE__ */ new Map(), e3);
}
function v10(t2, e3, s4, i6 = /* @__PURE__ */ new Map(), r4 = void 0) {
  const a4 = r4 == null ? void 0 : r4(t2, e3, s4, i6);
  if (a4 != null)
    return a4;
  if (x6(t2))
    return t2;
  if (i6.has(t2))
    return i6.get(t2);
  if (Array.isArray(t2)) {
    const n6 = new Array(t2.length);
    i6.set(t2, n6);
    for (let c8 = 0; c8 < t2.length; c8++)
      n6[c8] = v10(t2[c8], c8, s4, i6, r4);
    return Object.hasOwn(t2, "index") && (n6.index = t2.index), Object.hasOwn(t2, "input") && (n6.input = t2.input), n6;
  }
  if (t2 instanceof Date)
    return new Date(t2.getTime());
  if (t2 instanceof RegExp) {
    const n6 = new RegExp(t2.source, t2.flags);
    return n6.lastIndex = t2.lastIndex, n6;
  }
  if (t2 instanceof Map) {
    const n6 = /* @__PURE__ */ new Map();
    i6.set(t2, n6);
    for (const [c8, o6] of t2)
      n6.set(c8, v10(o6, c8, s4, i6, r4));
    return n6;
  }
  if (t2 instanceof Set) {
    const n6 = /* @__PURE__ */ new Set();
    i6.set(t2, n6);
    for (const c8 of t2)
      n6.add(v10(c8, void 0, s4, i6, r4));
    return n6;
  }
  if (typeof Buffer < "u" && Buffer.isBuffer(t2))
    return t2.subarray();
  if (F3(t2)) {
    const n6 = new (Object.getPrototypeOf(t2)).constructor(t2.length);
    i6.set(t2, n6);
    for (let c8 = 0; c8 < t2.length; c8++)
      n6[c8] = v10(t2[c8], c8, s4, i6, r4);
    return n6;
  }
  if (t2 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && t2 instanceof SharedArrayBuffer)
    return t2.slice(0);
  if (t2 instanceof DataView) {
    const n6 = new DataView(t2.buffer.slice(0), t2.byteOffset, t2.byteLength);
    return i6.set(t2, n6), m5(n6, t2, s4, i6, r4), n6;
  }
  if (typeof File < "u" && t2 instanceof File) {
    const n6 = new File([t2], t2.name, { type: t2.type });
    return i6.set(t2, n6), m5(n6, t2, s4, i6, r4), n6;
  }
  if (t2 instanceof Blob) {
    const n6 = new Blob([t2], { type: t2.type });
    return i6.set(t2, n6), m5(n6, t2, s4, i6, r4), n6;
  }
  if (t2 instanceof Error) {
    const n6 = new t2.constructor();
    return i6.set(t2, n6), n6.message = t2.message, n6.name = t2.name, n6.stack = t2.stack, n6.cause = t2.cause, m5(n6, t2, s4, i6, r4), n6;
  }
  if (typeof t2 == "object" && at(t2)) {
    const n6 = Object.create(Object.getPrototypeOf(t2));
    return i6.set(t2, n6), m5(n6, t2, s4, i6, r4), n6;
  }
  return t2;
}
function m5(t2, e3, s4 = t2, i6, r4) {
  const a4 = [...Object.keys(e3), ...te3(e3)];
  for (let n6 = 0; n6 < a4.length; n6++) {
    const c8 = a4[n6], o6 = Object.getOwnPropertyDescriptor(t2, c8);
    (o6 == null || o6.writable) && (t2[c8] = v10(e3[c8], c8, s4, i6, r4));
  }
}
function at(t2) {
  switch (se2(t2)) {
    case ae3:
    case Ke5:
    case Ve5:
    case Xe4:
    case re3:
    case Ge4:
    case it2:
    case nt3:
    case et3:
    case tt3:
    case st3:
    case We4:
    case ne2:
    case Ye4:
    case Me5:
    case Je4:
    case ie3:
    case ze3:
    case ke4:
    case Qe3:
    case Ze4:
    case Te3:
      return true;
    default:
      return false;
  }
}
function ct4(t2, e3) {
  return rt4(t2, (s4, i6, r4, a4) => {
    const n6 = e3 == null ? void 0 : e3(s4, i6, r4, a4);
    if (n6 != null)
      return n6;
    if (typeof t2 == "object")
      switch (Object.prototype.toString.call(t2)) {
        case ne2:
        case ie3:
        case re3: {
          const c8 = new t2.constructor(t2 == null ? void 0 : t2.valueOf());
          return m5(c8, t2), c8;
        }
        case ae3: {
          const c8 = {};
          return m5(c8, t2), c8.length = t2.length, c8[Symbol.iterator] = t2[Symbol.iterator], c8;
        }
        default:
          return;
      }
  });
}
function ce2(t2) {
  return ct4(t2);
}
function oe3(t2) {
  return t2 !== null && typeof t2 == "object" && se2(t2) === "[object Arguments]";
}
function pe5(t2) {
  return typeof t2 == "object" && t2 !== null;
}
function ot2() {
}
function pt3(t2) {
  return F3(t2);
}
function ht3(t2) {
  var _a2;
  if (typeof t2 != "object" || t2 == null)
    return false;
  if (Object.getPrototypeOf(t2) === null)
    return true;
  if (Object.prototype.toString.call(t2) !== "[object Object]") {
    const s4 = t2[Symbol.toStringTag];
    return s4 == null || !((_a2 = Object.getOwnPropertyDescriptor(t2, Symbol.toStringTag)) == null ? void 0 : _a2.writable) ? false : t2.toString() === `[object ${s4}]`;
  }
  let e3 = t2;
  for (; Object.getPrototypeOf(e3) !== null; )
    e3 = Object.getPrototypeOf(e3);
  return Object.getPrototypeOf(t2) === e3;
}
function lt4(t2) {
  if (x6(t2))
    return t2;
  if (Array.isArray(t2) || F3(t2) || t2 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && t2 instanceof SharedArrayBuffer)
    return t2.slice(0);
  const e3 = Object.getPrototypeOf(t2), s4 = e3.constructor;
  if (t2 instanceof Date || t2 instanceof Map || t2 instanceof Set)
    return new s4(t2);
  if (t2 instanceof RegExp) {
    const i6 = new s4(t2);
    return i6.lastIndex = t2.lastIndex, i6;
  }
  if (t2 instanceof DataView)
    return new s4(t2.buffer.slice(0));
  if (t2 instanceof Error) {
    const i6 = new s4(t2.message);
    return i6.stack = t2.stack, i6.name = t2.name, i6.cause = t2.cause, i6;
  }
  if (typeof File < "u" && t2 instanceof File)
    return new s4([t2], t2.name, { type: t2.type, lastModified: t2.lastModified });
  if (typeof t2 == "object") {
    const i6 = Object.create(e3);
    return Object.assign(i6, t2);
  }
  return t2;
}
function ut4(t2, ...e3) {
  const s4 = e3.slice(0, -1), i6 = e3[e3.length - 1];
  let r4 = t2;
  for (let a4 = 0; a4 < s4.length; a4++) {
    const n6 = s4[a4];
    r4 = A4(r4, n6, i6, /* @__PURE__ */ new Map());
  }
  return r4;
}
function A4(t2, e3, s4, i6) {
  if (x6(t2) && (t2 = Object(t2)), e3 == null || typeof e3 != "object")
    return t2;
  if (i6.has(e3))
    return lt4(i6.get(e3));
  if (i6.set(e3, t2), Array.isArray(e3)) {
    e3 = e3.slice();
    for (let a4 = 0; a4 < e3.length; a4++)
      e3[a4] = e3[a4] ?? void 0;
  }
  const r4 = [...Object.keys(e3), ...te3(e3)];
  for (let a4 = 0; a4 < r4.length; a4++) {
    const n6 = r4[a4];
    let c8 = e3[n6], o6 = t2[n6];
    if (oe3(c8) && (c8 = { ...c8 }), oe3(o6) && (o6 = { ...o6 }), typeof Buffer < "u" && Buffer.isBuffer(c8) && (c8 = ce2(c8)), Array.isArray(c8))
      if (typeof o6 == "object" && o6 != null) {
        const l8 = [], p5 = Reflect.ownKeys(o6);
        for (let f11 = 0; f11 < p5.length; f11++) {
          const u4 = p5[f11];
          l8[u4] = o6[u4];
        }
        o6 = l8;
      } else
        o6 = [];
    const h6 = s4(o6, c8, n6, t2, e3, i6);
    h6 != null ? t2[n6] = h6 : Array.isArray(c8) || pe5(o6) && pe5(c8) ? t2[n6] = A4(o6, c8, s4, i6) : o6 == null && ht3(c8) ? t2[n6] = A4({}, c8, s4, i6) : o6 == null && pt3(c8) ? t2[n6] = ce2(c8) : (o6 === void 0 || c8 !== void 0) && (t2[n6] = c8);
  }
  return t2;
}
function dt4(t2, ...e3) {
  return ut4(t2, ...e3, ot2);
}
var ft4 = Object.defineProperty;
var mt3 = Object.defineProperties;
var gt4 = Object.getOwnPropertyDescriptors;
var he4 = Object.getOwnPropertySymbols;
var yt4 = Object.prototype.hasOwnProperty;
var vt4 = Object.prototype.propertyIsEnumerable;
var le4 = (t2, e3, s4) => e3 in t2 ? ft4(t2, e3, { enumerable: true, configurable: true, writable: true, value: s4 }) : t2[e3] = s4;
var E5 = (t2, e3) => {
  for (var s4 in e3 || (e3 = {}))
    yt4.call(e3, s4) && le4(t2, s4, e3[s4]);
  if (he4)
    for (var s4 of he4(e3))
      vt4.call(e3, s4) && le4(t2, s4, e3[s4]);
  return t2;
};
var wt4 = (t2, e3) => mt3(t2, gt4(e3));
function ue(t2, e3, s4) {
  var i6;
  const r4 = Je2(t2);
  return ((i6 = e3.rpcMap) == null ? void 0 : i6[r4.reference]) || `${T6}?chainId=${r4.namespace}:${r4.reference}&projectId=${s4}`;
}
function bt3(t2) {
  return t2.includes(":") ? t2.split(":")[1] : t2;
}
function de3(t2) {
  return t2.map((e3) => `${e3.split(":")[0]}:${e3.split(":")[1]}`);
}
function Pt4(t2, e3) {
  const s4 = Object.keys(e3.namespaces).filter((r4) => r4.includes(t2));
  if (!s4.length)
    return [];
  const i6 = [];
  return s4.forEach((r4) => {
    const a4 = e3.namespaces[r4].accounts;
    i6.push(...a4);
  }), i6;
}
function fe4(t2) {
  return Object.fromEntries(Object.entries(t2).filter(([e3, s4]) => {
    var i6, r4;
    return ((i6 = s4 == null ? void 0 : s4.chains) == null ? void 0 : i6.length) && ((r4 = s4 == null ? void 0 : s4.chains) == null ? void 0 : r4.length) > 0;
  }));
}
function j5(t2 = {}, e3 = {}) {
  const s4 = fe4(me5(t2)), i6 = fe4(me5(e3));
  return dt4(s4, i6);
}
function me5(t2) {
  var e3, s4, i6, r4, a4;
  const n6 = {};
  if (!Ye2(t2))
    return n6;
  for (const [c8, o6] of Object.entries(t2)) {
    const h6 = Gn2(c8) ? [c8] : o6.chains, l8 = o6.methods || [], p5 = o6.events || [], f11 = o6.rpcMap || {}, u4 = bs(c8);
    n6[u4] = wt4(E5(E5({}, n6[u4]), o6), { chains: ut2(h6, (e3 = n6[u4]) == null ? void 0 : e3.chains), methods: ut2(l8, (s4 = n6[u4]) == null ? void 0 : s4.methods), events: ut2(p5, (i6 = n6[u4]) == null ? void 0 : i6.events) }), (Ye2(f11) || Ye2(((r4 = n6[u4]) == null ? void 0 : r4.rpcMap) || {})) && (n6[u4].rpcMap = E5(E5({}, f11), (a4 = n6[u4]) == null ? void 0 : a4.rpcMap));
  }
  return n6;
}
function ge3(t2) {
  return t2.includes(":") ? t2.split(":")[2] : t2;
}
function ye4(t2) {
  const e3 = {};
  for (const [s4, i6] of Object.entries(t2)) {
    const r4 = i6.methods || [], a4 = i6.events || [], n6 = i6.accounts || [], c8 = Gn2(s4) ? [s4] : i6.chains ? i6.chains : de3(i6.accounts);
    e3[s4] = { chains: c8, methods: r4, events: a4, accounts: n6 };
  }
  return e3;
}
function H2(t2) {
  return typeof t2 == "number" ? t2 : t2.includes("0x") ? parseInt(t2, 16) : (t2 = t2.includes(":") ? t2.split(":")[1] : t2, isNaN(Number(t2)) ? t2 : Number(t2));
}
function Ot4(t2) {
  try {
    const e3 = JSON.parse(t2);
    return typeof e3 == "object" && e3 !== null && !Array.isArray(e3);
  } catch {
    return false;
  }
}
var ve4 = {};
var w5 = (t2) => ve4[t2];
var U3 = (t2, e3) => {
  ve4[t2] = e3;
};
var It5 = Object.defineProperty;
var we5 = Object.getOwnPropertySymbols;
var St5 = Object.prototype.hasOwnProperty;
var $t4 = Object.prototype.propertyIsEnumerable;
var be4 = (t2, e3, s4) => e3 in t2 ? It5(t2, e3, { enumerable: true, configurable: true, writable: true, value: s4 }) : t2[e3] = s4;
var Pe4 = (t2, e3) => {
  for (var s4 in e3 || (e3 = {}))
    St5.call(e3, s4) && be4(t2, s4, e3[s4]);
  if (we5)
    for (var s4 of we5(e3))
      $t4.call(e3, s4) && be4(t2, s4, e3[s4]);
  return t2;
};
var Oe4 = "eip155";
var At3 = ["atomic", "flow-control", "paymasterService", "sessionKeys", "auxiliaryFunds"];
var Et4 = (t2) => t2 && t2.startsWith("0x") ? BigInt(t2).toString(10) : t2;
var B4 = (t2) => t2 && t2.startsWith("0x") ? t2 : `0x${BigInt(t2).toString(16)}`;
var Ie3 = (t2) => Object.keys(t2).filter((e3) => At3.includes(e3)).reduce((e3, s4) => (e3[s4] = jt4(t2[s4]), e3), {});
var jt4 = (t2) => typeof t2 == "string" && Ot4(t2) ? JSON.parse(t2) : t2;
var Ct3 = (t2, e3, s4) => {
  const { sessionProperties: i6 = {}, scopedProperties: r4 = {} } = t2, a4 = {};
  if (!Ye2(r4) && !Ye2(i6))
    return;
  const n6 = Ie3(i6);
  for (const c8 of s4) {
    const o6 = Et4(c8);
    if (!o6)
      continue;
    a4[B4(o6)] = n6;
    const h6 = r4 == null ? void 0 : r4[`${Oe4}:${o6}`];
    if (h6) {
      const l8 = h6 == null ? void 0 : h6[`${Oe4}:${o6}:${e3}`];
      a4[B4(o6)] = Pe4(Pe4({}, a4[B4(o6)]), Ie3(l8 || h6));
    }
  }
  for (const [c8, o6] of Object.entries(a4))
    Object.keys(o6).length === 0 && delete a4[c8];
  return Object.keys(a4).length > 0 ? a4 : void 0;
};
var Nt4 = Object.defineProperty;
var Dt3 = (t2, e3, s4) => e3 in t2 ? Nt4(t2, e3, { enumerable: true, configurable: true, writable: true, value: s4 }) : t2[e3] = s4;
var qt4 = (t2, e3, s4) => Dt3(t2, typeof e3 != "symbol" ? e3 + "" : e3, s4);
var L4;
var J5 = class _J {
  constructor(e3) {
    qt4(this, "storage"), this.storage = e3;
  }
  async getItem(e3) {
    return await this.storage.getItem(e3);
  }
  async setItem(e3, s4) {
    return await this.storage.setItem(e3, s4);
  }
  async removeItem(e3) {
    return await this.storage.removeItem(e3);
  }
  static getStorage(e3) {
    return L4 || (L4 = new _J(e3)), L4;
  }
};
var Rt5 = Object.defineProperty;
var _t4 = Object.defineProperties;
var xt4 = Object.getOwnPropertyDescriptors;
var Se3 = Object.getOwnPropertySymbols;
var Ft4 = Object.prototype.hasOwnProperty;
var Ht4 = Object.prototype.propertyIsEnumerable;
var $e4 = (t2, e3, s4) => e3 in t2 ? Rt5(t2, e3, { enumerable: true, configurable: true, writable: true, value: s4 }) : t2[e3] = s4;
var Ut4 = (t2, e3) => {
  for (var s4 in e3 || (e3 = {}))
    Ft4.call(e3, s4) && $e4(t2, s4, e3[s4]);
  if (Se3)
    for (var s4 of Se3(e3))
      Ht4.call(e3, s4) && $e4(t2, s4, e3[s4]);
  return t2;
};
var Bt4 = (t2, e3) => _t4(t2, xt4(e3));
async function Lt4(t2, e3) {
  const s4 = Je2(t2.result.capabilities.caip345.caip2), i6 = t2.result.capabilities.caip345.transactionHashes, r4 = await Promise.allSettled(i6.map((p5) => Mt4(s4.reference, p5, e3))), a4 = r4.filter((p5) => p5.status === "fulfilled").map((p5) => p5.value).filter((p5) => p5);
  r4.filter((p5) => p5.status === "rejected").forEach((p5) => console.warn("Failed to fetch transaction receipt:", p5.reason));
  const n6 = !a4.length || a4.some((p5) => !p5), c8 = a4.every((p5) => (p5 == null ? void 0 : p5.status) === "0x1"), o6 = a4.every((p5) => (p5 == null ? void 0 : p5.status) === "0x0"), h6 = a4.some((p5) => (p5 == null ? void 0 : p5.status) === "0x0");
  let l8;
  return n6 ? l8 = 100 : c8 ? l8 = 200 : o6 ? l8 = 500 : h6 && (l8 = 600), { id: t2.result.id, version: t2.request.version, atomic: t2.request.atomicRequired, chainId: t2.request.chainId, capabilities: t2.result.capabilities, receipts: a4, status: l8 };
}
async function Mt4(t2, e3, s4) {
  return await s4(parseInt(t2)).request(formatJsonRpcRequest("eth_getTransactionReceipt", [e3]));
}
async function zt4({ sendCalls: t2, storage: e3 }) {
  const s4 = await e3.getItem(y5);
  await e3.setItem(y5, Bt4(Ut4({}, s4), { [t2.result.id]: { request: t2.request, result: t2.result, expiry: Si(Le4) } }));
}
async function Gt4({ resultId: t2, storage: e3 }) {
  const s4 = await e3.getItem(y5);
  if (s4) {
    delete s4[t2], await e3.setItem(y5, s4);
    for (const i6 in s4)
      Oi(s4[i6].expiry) && delete s4[i6];
    await e3.setItem(y5, s4);
  }
}
async function Wt4({ resultId: t2, storage: e3 }) {
  const s4 = await e3.getItem(y5), i6 = s4 == null ? void 0 : s4[t2];
  if (i6 && !Oi(i6.expiry))
    return i6;
  await Gt4({ resultId: t2, storage: e3 });
}
var Jt4 = Object.defineProperty;
var Kt4 = Object.defineProperties;
var Vt4 = Object.getOwnPropertyDescriptors;
var Ae4 = Object.getOwnPropertySymbols;
var Yt3 = Object.prototype.hasOwnProperty;
var Xt4 = Object.prototype.propertyIsEnumerable;
var M6 = (t2, e3, s4) => e3 in t2 ? Jt4(t2, e3, { enumerable: true, configurable: true, writable: true, value: s4 }) : t2[e3] = s4;
var z6 = (t2, e3) => {
  for (var s4 in e3 || (e3 = {}))
    Yt3.call(e3, s4) && M6(t2, s4, e3[s4]);
  if (Ae4)
    for (var s4 of Ae4(e3))
      Xt4.call(e3, s4) && M6(t2, s4, e3[s4]);
  return t2;
};
var G5 = (t2, e3) => Kt4(t2, Vt4(e3));
var g6 = (t2, e3, s4) => M6(t2, typeof e3 != "symbol" ? e3 + "" : e3, s4);
var kt4 = class {
  constructor(e3) {
    g6(this, "name", "eip155"), g6(this, "client"), g6(this, "chainId"), g6(this, "namespace"), g6(this, "httpProviders"), g6(this, "events"), g6(this, "storage"), this.namespace = e3.namespace, this.events = w5("events"), this.client = w5("client"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain()), this.storage = J5.getStorage(this.client.core.storage);
  }
  async request(e3) {
    switch (e3.request.method) {
      case "eth_requestAccounts":
        return this.getAccounts();
      case "eth_accounts":
        return this.getAccounts();
      case "wallet_switchEthereumChain":
        return await this.handleSwitchChain(e3);
      case "eth_chainId":
        return parseInt(this.getDefaultChain());
      case "wallet_getCapabilities":
        return await this.getCapabilities(e3);
      case "wallet_getCallsStatus":
        return await this.getCallStatus(e3);
      case "wallet_sendCalls":
        return await this.sendCalls(e3);
    }
    return this.namespace.methods.includes(e3.request.method) ? await this.client.request(e3) : this.getHttpProvider().request(e3.request);
  }
  updateNamespace(e3) {
    this.namespace = Object.assign(this.namespace, e3);
  }
  setDefaultChain(e3, s4) {
    this.httpProviders[e3] || this.setHttpProvider(parseInt(e3), s4);
    const i6 = this.chainId;
    this.chainId = parseInt(e3), this.events.emit(_5.DEFAULT_CHAIN_CHANGED, { currentCaipChainId: `${this.name}:${e3}`, previousCaipChainId: `${this.name}:${i6}` });
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId.toString();
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const e3 = this.namespace.chains[0];
    if (!e3)
      throw new Error("ChainId not found");
    return e3.split(":")[1];
  }
  createHttpProvider(e3, s4) {
    const i6 = s4 || ue(`${this.name}:${e3}`, this.namespace, this.client.core.projectId);
    if (!i6)
      throw new Error(`No RPC url provided for chainId: ${e3}`);
    return new o4(new f10(i6, w5("disableProviderPing")));
  }
  setHttpProvider(e3, s4) {
    const i6 = this.createHttpProvider(e3, s4);
    i6 && (this.httpProviders[e3] = i6);
  }
  createHttpProviders() {
    const e3 = {};
    return this.namespace.chains.forEach((s4) => {
      var i6;
      const r4 = parseInt(bt3(s4));
      e3[r4] = this.createHttpProvider(r4, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[s4]);
    }), e3;
  }
  getAccounts() {
    const e3 = this.namespace.accounts;
    return e3 ? [...new Set(e3.filter((s4) => s4.split(":")[1] === this.chainId.toString()).map((s4) => s4.split(":")[2]))] : [];
  }
  getHttpProvider(e3) {
    const s4 = e3 || this.chainId;
    return this.httpProviders[s4] || (this.httpProviders = G5(z6({}, this.httpProviders), { [s4]: this.createHttpProvider(s4) }), this.httpProviders[s4]);
  }
  async handleSwitchChain(e3) {
    var s4, i6;
    let r4 = e3.request.params ? (s4 = e3.request.params[0]) == null ? void 0 : s4.chainId : "0x0";
    r4 = r4.startsWith("0x") ? r4 : `0x${r4}`;
    const a4 = parseInt(r4, 16);
    if (this.isChainApproved(a4))
      this.setDefaultChain(`${a4}`);
    else if (this.namespace.methods.includes("wallet_switchEthereumChain"))
      await this.client.request({ topic: e3.topic, request: { method: e3.request.method, params: [{ chainId: r4 }] }, chainId: (i6 = this.namespace.chains) == null ? void 0 : i6[0] }), this.setDefaultChain(`${a4}`);
    else
      throw new Error(`Failed to switch to chain 'eip155:${a4}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);
    return null;
  }
  isChainApproved(e3) {
    return this.namespace.chains.includes(`${this.name}:${e3}`);
  }
  async getCapabilities(e3) {
    var s4, i6, r4, a4, n6;
    const c8 = (i6 = (s4 = e3.request) == null ? void 0 : s4.params) == null ? void 0 : i6[0], o6 = ((a4 = (r4 = e3.request) == null ? void 0 : r4.params) == null ? void 0 : a4[1]) || [];
    if (!c8)
      throw new Error("Missing address parameter in `wallet_getCapabilities` request");
    const h6 = this.client.session.get(e3.topic), l8 = ((n6 = h6 == null ? void 0 : h6.sessionProperties) == null ? void 0 : n6.capabilities) || {}, p5 = `${c8}${o6.join(",")}`, f11 = l8 == null ? void 0 : l8[p5];
    if (f11)
      return f11;
    let u4;
    try {
      u4 = Ct3(h6, c8, o6);
    } catch (D3) {
      console.warn("Failed to extract capabilities from session", D3);
    }
    if (u4)
      return u4;
    const K7 = await this.client.request(e3);
    try {
      await this.client.session.update(e3.topic, { sessionProperties: G5(z6({}, h6.sessionProperties || {}), { capabilities: G5(z6({}, l8 || {}), { [p5]: K7 }) }) });
    } catch (D3) {
      console.warn("Failed to update session with capabilities", D3);
    }
    return K7;
  }
  async getCallStatus(e3) {
    var s4, i6, r4;
    const a4 = this.client.session.get(e3.topic), n6 = (s4 = a4.sessionProperties) == null ? void 0 : s4.bundler_name;
    if (n6) {
      const h6 = this.getBundlerUrl(e3.chainId, n6);
      try {
        return await this.getUserOperationReceipt(h6, e3);
      } catch (l8) {
        console.warn("Failed to fetch call status from bundler", l8, h6);
      }
    }
    const c8 = (i6 = a4.sessionProperties) == null ? void 0 : i6.bundler_url;
    if (c8)
      try {
        return await this.getUserOperationReceipt(c8, e3);
      } catch (h6) {
        console.warn("Failed to fetch call status from custom bundler", h6, c8);
      }
    const o6 = await Wt4({ resultId: (r4 = e3.request.params) == null ? void 0 : r4[0], storage: this.storage });
    if (o6)
      try {
        return await Lt4(o6, this.getHttpProvider.bind(this));
      } catch (h6) {
        console.warn("Failed to fetch call status from stored send calls", h6, o6);
      }
    if (this.namespace.methods.includes(e3.request.method))
      return await this.client.request(e3);
    throw new Error("Fetching call status not approved by the wallet.");
  }
  async getUserOperationReceipt(e3, s4) {
    var i6;
    const r4 = new URL(e3), a4 = await fetch(r4, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formatJsonRpcRequest("eth_getUserOperationReceipt", [(i6 = s4.request.params) == null ? void 0 : i6[0]])) });
    if (!a4.ok)
      throw new Error(`Failed to fetch user operation receipt - ${a4.status}`);
    return await a4.json();
  }
  getBundlerUrl(e3, s4) {
    return `${Be4}?projectId=${this.client.core.projectId}&chainId=${e3}&bundler=${s4}`;
  }
  async sendCalls(e3) {
    var s4, i6, r4;
    const a4 = await this.client.request(e3), n6 = (s4 = e3.request.params) == null ? void 0 : s4[0], c8 = a4 == null ? void 0 : a4.id, o6 = (a4 == null ? void 0 : a4.capabilities) || {}, h6 = (i6 = o6 == null ? void 0 : o6.caip345) == null ? void 0 : i6.caip2, l8 = (r4 = o6 == null ? void 0 : o6.caip345) == null ? void 0 : r4.transactionHashes;
    return !c8 || !h6 || !(l8 != null && l8.length) || await zt4({ sendCalls: { request: n6, result: a4 }, storage: this.storage }), a4;
  }
};
var Qt4 = Object.defineProperty;
var Zt4 = (t2, e3, s4) => e3 in t2 ? Qt4(t2, e3, { enumerable: true, configurable: true, writable: true, value: s4 }) : t2[e3] = s4;
var b4 = (t2, e3, s4) => Zt4(t2, typeof e3 != "symbol" ? e3 + "" : e3, s4);
var Tt4 = class {
  constructor(e3) {
    b4(this, "name", ee3), b4(this, "client"), b4(this, "httpProviders"), b4(this, "events"), b4(this, "namespace"), b4(this, "chainId"), this.namespace = e3.namespace, this.events = w5("events"), this.client = w5("client"), this.chainId = this.getDefaultChain(), this.name = this.getNamespaceName(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(e3) {
    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(e3.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(e3.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(e3.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(e3.events || []))], this.httpProviders = this.createHttpProviders();
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(e3) {
    return this.namespace.methods.includes(e3.request.method) ? this.client.request(e3) : this.getHttpProvider(e3.chainId).request(e3.request);
  }
  setDefaultChain(e3, s4) {
    this.httpProviders[e3] || this.setHttpProvider(e3, s4);
    const i6 = this.chainId;
    this.chainId = e3, this.events.emit(_5.DEFAULT_CHAIN_CHANGED, { currentCaipChainId: `${this.name}:${e3}`, previousCaipChainId: `${this.name}:${i6}` });
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const e3 = this.namespace.chains[0];
    if (!e3)
      throw new Error("ChainId not found");
    return e3.split(":")[1];
  }
  getNamespaceName() {
    const e3 = this.namespace.chains[0];
    if (!e3)
      throw new Error("ChainId not found");
    return Je2(e3).namespace;
  }
  getAccounts() {
    const e3 = this.namespace.accounts;
    return e3 ? [...new Set(e3.filter((s4) => s4.split(":")[1] === this.chainId.toString()).map((s4) => s4.split(":")[2]))] : [];
  }
  createHttpProviders() {
    var e3, s4;
    const i6 = {};
    return (s4 = (e3 = this.namespace) == null ? void 0 : e3.accounts) == null || s4.forEach((r4) => {
      var a4, n6;
      const c8 = Je2(r4), o6 = (n6 = (a4 = this.namespace) == null ? void 0 : a4.rpcMap) == null ? void 0 : n6[`${c8.namespace}:${c8.reference}`];
      i6[c8.reference] = this.createHttpProvider(r4, o6);
    }), i6;
  }
  getHttpProvider(e3) {
    const s4 = Je2(e3).reference, i6 = this.httpProviders[s4];
    if (typeof i6 > "u")
      throw new Error(`JSON-RPC provider for ${e3} not found`);
    return i6;
  }
  setHttpProvider(e3, s4) {
    const i6 = this.createHttpProvider(e3, s4);
    i6 && (this.httpProviders[e3] = i6);
  }
  createHttpProvider(e3, s4) {
    const i6 = s4 || ue(e3, this.namespace, this.client.core.projectId);
    if (!i6)
      throw new Error(`No RPC url provided for chainId: ${e3}`);
    return new o4(new f10(i6, w5("disableProviderPing")));
  }
};
var es2 = Object.defineProperty;
var ts2 = Object.defineProperties;
var ss2 = Object.getOwnPropertyDescriptors;
var Ee3 = Object.getOwnPropertySymbols;
var is4 = Object.prototype.hasOwnProperty;
var ns2 = Object.prototype.propertyIsEnumerable;
var W4 = (t2, e3, s4) => e3 in t2 ? es2(t2, e3, { enumerable: true, configurable: true, writable: true, value: s4 }) : t2[e3] = s4;
var S5 = (t2, e3) => {
  for (var s4 in e3 || (e3 = {}))
    is4.call(e3, s4) && W4(t2, s4, e3[s4]);
  if (Ee3)
    for (var s4 of Ee3(e3))
      ns2.call(e3, s4) && W4(t2, s4, e3[s4]);
  return t2;
};
var C6 = (t2, e3) => ts2(t2, ss2(e3));
var d7 = (t2, e3, s4) => W4(t2, typeof e3 != "symbol" ? e3 + "" : e3, s4);
var N13 = class _N {
  constructor(e3) {
    d7(this, "client"), d7(this, "namespaces"), d7(this, "optionalNamespaces"), d7(this, "sessionProperties"), d7(this, "scopedProperties"), d7(this, "events", new import_events12.default()), d7(this, "rpcProviders", {}), d7(this, "session"), d7(this, "providerOpts"), d7(this, "logger"), d7(this, "uri"), d7(this, "disableProviderPing", false), this.providerOpts = e3, this.logger = typeof (e3 == null ? void 0 : e3.logger) < "u" && typeof (e3 == null ? void 0 : e3.logger) != "string" ? e3.logger : (0, import_pino2.default)(k4({ level: (e3 == null ? void 0 : e3.logger) || Z })), this.disableProviderPing = (e3 == null ? void 0 : e3.disableProviderPing) || false;
  }
  static async init(e3) {
    const s4 = new _N(e3);
    return await s4.initialize(), s4;
  }
  async request(e3, s4, i6) {
    const [r4, a4] = this.validateChain(s4);
    if (!this.session)
      throw new Error("Please call connect() before request()");
    return await this.getProvider(r4).request({ request: S5({}, e3), chainId: `${r4}:${a4}`, topic: this.session.topic, expiry: i6 });
  }
  sendAsync(e3, s4, i6, r4) {
    const a4 = (/* @__PURE__ */ new Date()).getTime();
    this.request(e3, i6, r4).then((n6) => s4(null, formatJsonRpcResult(a4, n6))).catch((n6) => s4(n6, void 0));
  }
  async enable() {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    return this.session || await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties }), await this.requestAccounts();
  }
  async disconnect() {
    var e3;
    if (!this.session)
      throw new Error("Please call connect() before enable()");
    await this.client.disconnect({ topic: (e3 = this.session) == null ? void 0 : e3.topic, reason: zt2("USER_DISCONNECTED") }), await this.cleanup();
  }
  async connect(e3) {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    if (this.setNamespaces(e3), this.cleanupPendingPairings(), !e3.skipPairing)
      return await this.pair(e3.pairingTopic);
  }
  async authenticate(e3, s4) {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    this.setNamespaces(e3), await this.cleanupPendingPairings();
    const { uri: i6, response: r4 } = await this.client.authenticate(e3, s4);
    i6 && (this.uri = i6, this.events.emit("display_uri", i6));
    const a4 = await r4();
    if (this.session = a4.session, this.session) {
      const n6 = ye4(this.session.namespaces);
      this.namespaces = j5(this.namespaces, n6), await this.persist("namespaces", this.namespaces), this.onConnect();
    }
    return a4;
  }
  on(e3, s4) {
    this.events.on(e3, s4);
  }
  once(e3, s4) {
    this.events.once(e3, s4);
  }
  removeListener(e3, s4) {
    this.events.removeListener(e3, s4);
  }
  off(e3, s4) {
    this.events.off(e3, s4);
  }
  get isWalletConnect() {
    return true;
  }
  async pair(e3) {
    const { uri: s4, approval: i6 } = await this.client.connect({ pairingTopic: e3, requiredNamespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties });
    s4 && (this.uri = s4, this.events.emit("display_uri", s4));
    const r4 = await i6();
    this.session = r4;
    const a4 = ye4(r4.namespaces);
    return this.namespaces = j5(this.namespaces, a4), await this.persist("namespaces", this.namespaces), await this.persist("optionalNamespaces", this.optionalNamespaces), this.onConnect(), this.session;
  }
  setDefaultChain(e3, s4) {
    try {
      if (!this.session)
        return;
      const [i6, r4] = this.validateChain(e3);
      this.getProvider(i6).setDefaultChain(r4, s4);
    } catch (i6) {
      if (!/Please call connect/.test(i6.message))
        throw i6;
    }
  }
  async cleanupPendingPairings(e3 = {}) {
    try {
      this.logger.info("Cleaning up inactive pairings...");
      const s4 = this.client.pairing.getAll();
      if (!Ee2(s4))
        return;
      for (const i6 of s4)
        e3.deletePairings ? this.client.core.expirer.set(i6.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i6.topic);
      this.logger.info(`Inactive pairings cleared: ${s4.length}`);
    } catch (s4) {
      this.logger.warn("Failed to cleanup pending pairings", s4);
    }
  }
  abortPairingAttempt() {
    this.logger.warn("abortPairingAttempt is deprecated. This is now a no-op.");
  }
  async checkStorage() {
    this.namespaces = await this.getFromStore("namespaces") || {}, this.optionalNamespaces = await this.getFromStore("optionalNamespaces") || {}, this.session && this.createProviders();
  }
  async initialize() {
    this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
  }
  async createClient() {
    var e3, s4;
    if (this.client = this.providerOpts.client || await fe3.init({ core: this.providerOpts.core, logger: this.providerOpts.logger || Z, relayUrl: this.providerOpts.relayUrl || Fe3, projectId: this.providerOpts.projectId, metadata: this.providerOpts.metadata, storageOptions: this.providerOpts.storageOptions, storage: this.providerOpts.storage, name: this.providerOpts.name, customStoragePrefix: this.providerOpts.customStoragePrefix, telemetryEnabled: this.providerOpts.telemetryEnabled }), this.providerOpts.session)
      try {
        this.session = this.client.session.get(this.providerOpts.session.topic);
      } catch (i6) {
        throw this.logger.error("Failed to get session", i6), new Error(`The provided session: ${(s4 = (e3 = this.providerOpts) == null ? void 0 : e3.session) == null ? void 0 : s4.topic} doesn't exist in the Sign client`);
      }
    else {
      const i6 = this.client.session.getAll();
      this.session = i6[0];
    }
    this.logger.trace("SignClient Initialized");
  }
  createProviders() {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    if (!this.session)
      throw new Error("Session not initialized. Please call connect() before enable()");
    const e3 = [...new Set(Object.keys(this.session.namespaces).map((s4) => bs(s4)))];
    U3("client", this.client), U3("events", this.events), U3("disableProviderPing", this.disableProviderPing), e3.forEach((s4) => {
      if (!this.session)
        return;
      const i6 = Pt4(s4, this.session);
      if ((i6 == null ? void 0 : i6.length) === 0)
        return;
      const r4 = de3(i6), a4 = j5(this.namespaces, this.optionalNamespaces), n6 = C6(S5({}, a4[s4]), { accounts: i6, chains: r4 });
      switch (s4) {
        case "eip155":
          this.rpcProviders[s4] = new kt4({ namespace: n6 });
          break;
        default:
          this.rpcProviders[s4] = new Tt4({ namespace: n6 });
      }
    });
  }
  registerEventListeners() {
    if (typeof this.client > "u")
      throw new Error("Sign Client is not initialized");
    this.client.on("session_ping", (e3) => {
      var s4;
      const { topic: i6 } = e3;
      i6 === ((s4 = this.session) == null ? void 0 : s4.topic) && this.events.emit("session_ping", e3);
    }), this.client.on("session_event", (e3) => {
      var s4;
      const { params: i6, topic: r4 } = e3;
      if (r4 !== ((s4 = this.session) == null ? void 0 : s4.topic))
        return;
      const { event: a4 } = i6;
      if (a4.name === "accountsChanged") {
        const n6 = a4.data;
        n6 && Ee2(n6) && this.events.emit("accountsChanged", n6.map(ge3));
      } else if (a4.name === "chainChanged") {
        const n6 = i6.chainId, c8 = i6.event.data, o6 = bs(n6), h6 = H2(n6) !== H2(c8) ? `${o6}:${H2(c8)}` : n6;
        this.onChainChanged({ currentCaipChainId: h6 });
      } else
        this.events.emit(a4.name, a4.data);
      this.events.emit("session_event", e3);
    }), this.client.on("session_update", ({ topic: e3, params: s4 }) => {
      var i6, r4;
      if (e3 !== ((i6 = this.session) == null ? void 0 : i6.topic))
        return;
      const { namespaces: a4 } = s4, n6 = (r4 = this.client) == null ? void 0 : r4.session.get(e3);
      this.session = C6(S5({}, n6), { namespaces: a4 }), this.onSessionUpdate(), this.events.emit("session_update", { topic: e3, params: s4 });
    }), this.client.on("session_delete", async (e3) => {
      var s4;
      e3.topic === ((s4 = this.session) == null ? void 0 : s4.topic) && (await this.cleanup(), this.events.emit("session_delete", e3), this.events.emit("disconnect", C6(S5({}, zt2("USER_DISCONNECTED")), { data: e3.topic })));
    }), this.on(_5.DEFAULT_CHAIN_CHANGED, (e3) => {
      this.onChainChanged(C6(S5({}, e3), { internal: true }));
    });
  }
  getProvider(e3) {
    return this.rpcProviders[e3] || this.rpcProviders[ee3];
  }
  onSessionUpdate() {
    Object.keys(this.rpcProviders).forEach((e3) => {
      var s4;
      this.getProvider(e3).updateNamespace((s4 = this.session) == null ? void 0 : s4.namespaces[e3]);
    });
  }
  setNamespaces(e3) {
    const { namespaces: s4 = {}, optionalNamespaces: i6 = {}, sessionProperties: r4, scopedProperties: a4 } = e3;
    this.optionalNamespaces = j5(s4, i6), this.sessionProperties = r4, this.scopedProperties = a4;
  }
  validateChain(e3) {
    const [s4, i6] = (e3 == null ? void 0 : e3.split(":")) || ["", ""];
    if (!this.namespaces || !Object.keys(this.namespaces).length)
      return [s4, i6];
    if (s4 && !Object.keys(this.namespaces || {}).map((n6) => bs(n6)).includes(s4))
      throw new Error(`Namespace '${s4}' is not configured. Please call connect() first with namespace config.`);
    if (s4 && i6)
      return [s4, i6];
    const r4 = bs(Object.keys(this.namespaces)[0]), a4 = this.rpcProviders[r4].getDefaultChain();
    return [r4, a4];
  }
  async requestAccounts() {
    const [e3] = this.validateChain();
    return await this.getProvider(e3).requestAccounts();
  }
  async onChainChanged({ currentCaipChainId: e3, previousCaipChainId: s4, internal: i6 = false }) {
    if (!this.namespaces)
      return;
    const [r4, a4] = this.validateChain(e3);
    a4 && (this.updateNamespaceChain(r4, a4), i6 ? (this.events.emit("chainChanged", a4), this.emitAccountsChangedOnChainChange({ namespace: r4, currentCaipChainId: e3, previousCaipChainId: s4 })) : this.getProvider(r4).setDefaultChain(a4), await this.persist("namespaces", this.namespaces));
  }
  emitAccountsChangedOnChainChange({ namespace: e3, currentCaipChainId: s4, previousCaipChainId: i6 }) {
    var r4, a4;
    try {
      if (i6 === s4)
        return;
      const n6 = (a4 = (r4 = this.session) == null ? void 0 : r4.namespaces[e3]) == null ? void 0 : a4.accounts;
      if (!n6)
        return;
      const c8 = n6.filter((o6) => o6.includes(`${s4}:`)).map(ge3);
      if (!Ee2(c8))
        return;
      this.events.emit("accountsChanged", c8);
    } catch (n6) {
      this.logger.warn("Failed to emit accountsChanged on chain change", n6);
    }
  }
  updateNamespaceChain(e3, s4) {
    if (!this.namespaces)
      return;
    const i6 = this.namespaces[e3] ? e3 : `${e3}:${s4}`, r4 = { chains: [], methods: [], events: [], defaultChain: s4 };
    this.namespaces[i6] ? this.namespaces[i6] && (this.namespaces[i6].defaultChain = s4) : this.namespaces[i6] = r4;
  }
  onConnect() {
    this.createProviders(), this.events.emit("connect", { session: this.session });
  }
  async cleanup() {
    this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore("namespaces"), await this.deleteFromStore("optionalNamespaces"), await this.deleteFromStore("sessionProperties"), this.session = void 0, this.cleanupPendingPairings({ deletePairings: true }), await this.cleanupStorage();
  }
  async persist(e3, s4) {
    var i6;
    const r4 = ((i6 = this.session) == null ? void 0 : i6.topic) || "";
    await this.client.core.storage.setItem(`${$3}/${e3}${r4}`, s4);
  }
  async getFromStore(e3) {
    var s4;
    const i6 = ((s4 = this.session) == null ? void 0 : s4.topic) || "";
    return await this.client.core.storage.getItem(`${$3}/${e3}${i6}`);
  }
  async deleteFromStore(e3) {
    var s4;
    const i6 = ((s4 = this.session) == null ? void 0 : s4.topic) || "";
    await this.client.core.storage.removeItem(`${$3}/${e3}${i6}`);
  }
  async cleanupStorage() {
    var e3;
    try {
      if (((e3 = this.client) == null ? void 0 : e3.session.length) > 0)
        return;
      const s4 = await this.client.core.storage.getKeys();
      for (const i6 of s4)
        i6.startsWith($3) && await this.client.core.storage.removeItem(i6);
    } catch (s4) {
      this.logger.warn("Failed to cleanup storage", s4);
    }
  }
};
var rs2 = N13;

// node_modules/@onflow/fcl-wc/dist/index.module.mjs
var FLOW_METHODS = function(FLOW_METHODS2) {
  FLOW_METHODS2["FLOW_AUTHN"] = "flow_authn";
  FLOW_METHODS2["FLOW_PRE_AUTHZ"] = "flow_pre_authz";
  FLOW_METHODS2["FLOW_AUTHZ"] = "flow_authz";
  FLOW_METHODS2["FLOW_USER_SIGN"] = "flow_user_sign";
  return FLOW_METHODS2;
}({});
var REQUEST_TYPES = function(REQUEST_TYPES2) {
  REQUEST_TYPES2["SESSION_REQUEST"] = "session_proposal";
  REQUEST_TYPES2["SIGNING_REQUEST"] = "signing_request";
  return REQUEST_TYPES2;
}({});
var SERVICE_PLUGIN_NAME = "fcl-plugin-service-walletconnect";
var WC_SERVICE_METHOD = "WC/RPC";
var PRE_AUTHZ_SERVICE_TYPE = "pre-authz";
function isAndroid() {
  return typeof navigator !== "undefined" && /android/i.test(navigator.userAgent);
}
function isSmallIOS() {
  return typeof navigator !== "undefined" && /iPhone|iPod/.test(navigator.userAgent);
}
function isLargeIOS() {
  return typeof navigator !== "undefined" && /iPad/.test(navigator.userAgent);
}
function isIOS() {
  return isSmallIOS() || isLargeIOS();
}
function isMobile() {
  return isAndroid() || isIOS();
}
function openDeeplink(url) {
  if (url.startsWith("http")) {
    const link = document.createElement("a");
    link.href = url;
    link.target = "_blank";
    link.rel = "noreferrer noopener";
    link.click();
  } else {
    window.open(url, "_blank");
  }
}
function shouldDeepLink(_ref) {
  var _a2;
  let {
    service,
    user
  } = _ref;
  if (!isMobile())
    return false;
  if (service.endpoint === FLOW_METHODS.FLOW_AUTHN)
    return false;
  if (service.endpoint === FLOW_METHODS.FLOW_AUTHZ && ((_a2 = user == null ? void 0 : user.services) == null ? void 0 : _a2.find((s4) => s4.method === WC_SERVICE_METHOD && s4.type === PRE_AUTHZ_SERVICE_TYPE)))
    return false;
  return true;
}
function preloadImage(url) {
  if (!url)
    return;
  const img2 = new Image();
  img2.src = url;
}
async function createSessionProposal(_ref) {
  let {
    provider,
    existingPairing,
    network
  } = _ref;
  const _network = network || await getChainId();
  const requiredNamespaces = {
    flow: {
      methods: [FLOW_METHODS.FLOW_AUTHN, FLOW_METHODS.FLOW_PRE_AUTHZ, FLOW_METHODS.FLOW_AUTHZ, FLOW_METHODS.FLOW_USER_SIGN],
      chains: [`flow:${_network}`],
      events: ["chainChanged", "accountsChanged"]
    }
  };
  let cleanup;
  const uri = new Promise((resolve2, reject) => {
    const onDisplayUri = (uri2) => {
      resolve2(uri2);
    };
    provider.on("display_uri", onDisplayUri);
    cleanup = () => {
      provider.removeListener("display_uri", onDisplayUri);
      reject(new Error("WalletConnect Session Request aborted"));
    };
  });
  const sessionPromise = provider.connect({
    pairingTopic: existingPairing == null ? void 0 : existingPairing.topic,
    namespaces: requiredNamespaces
  }).finally(() => {
    cleanup();
  });
  return {
    uri: await uri,
    approval: () => sessionPromise
  };
}
var request = async (_ref2) => {
  var _a2, _b, _c2, _d, _e4, _f2, _g;
  let {
    method,
    body,
    session,
    provider,
    isExternal,
    abortSignal,
    disableNotifications
  } = _ref2;
  const [chainId, addr, address] = makeSessionData(session);
  const data = JSON.stringify({
    ...body,
    addr,
    address
  });
  const result = await Promise.race([provider.client.request({
    request: {
      method,
      params: [data]
    },
    chainId,
    topic: (_a2 = provider.session) == null ? void 0 : _a2.topic
  }), new Promise((_6, reject) => {
    if (abortSignal == null ? void 0 : abortSignal.aborted) {
      reject(new Error("WalletConnect Request aborted"));
    }
    abortSignal == null ? void 0 : abortSignal.addEventListener("abort", () => {
      reject(new Error("WalletConnect Request aborted"));
    });
  })]);
  if (typeof result !== "object" || result == null)
    return;
  switch (result.status) {
    case "APPROVED":
      let addSessionInfo = function(service) {
        if (service.method === "WC/RPC") {
          return {
            ...service,
            params: {
              ...service.params,
              ...isExternal ? {
                externalProvider: session.topic
              } : {},
              ...disableNotifications ? {
                disableNotifications
              } : {}
            }
          };
        }
        return service;
      };
      if (method === FLOW_METHODS.FLOW_AUTHN) {
        const services = (((_b = result == null ? void 0 : result.data) == null ? void 0 : _b.services) ?? []).map(addSessionInfo);
        return {
          ...result.data ? result.data : {},
          services
        };
      }
      if (method === FLOW_METHODS.FLOW_PRE_AUTHZ) {
        return {
          ...result.data,
          ...((_c2 = result.data) == null ? void 0 : _c2.proposer) ? {
            proposer: addSessionInfo(result.data.proposer)
          } : {},
          payer: [...(_e4 = (_d = result.data) == null ? void 0 : _d.payer) == null ? void 0 : _e4.map(addSessionInfo)],
          authorization: [...(_g = (_f2 = result.data) == null ? void 0 : _f2.authorization) == null ? void 0 : _g.map(addSessionInfo)]
        };
      }
      return result.data;
    case "DECLINED":
      throw new Error(`Declined: ${result.reason || "No reason supplied"}`);
    case "REDIRECT":
      return result.data;
    default:
      throw new Error(`Declined: No reason supplied`);
  }
};
function makeSessionData(session) {
  const [namespace, reference, address] = Object.values(session.namespaces).map((namespace2) => namespace2.accounts).flat().filter((account2) => account2.startsWith("flow:"))[0].split(":");
  const chainId = `${namespace}:${reference}`;
  const addr = address;
  return [chainId, addr, address];
}
var css_248z = '*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }/*! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com*/*,:after,:before{border:0 solid #e5e7eb;box-sizing:border-box}:after,:before{--tw-content:""}:host,html{-webkit-text-size-adjust:100%;font-feature-settings:normal;-webkit-tap-highlight-color:transparent;font-family:ui-sans-serif,system-ui,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-variation-settings:normal;line-height:1.5;-moz-tab-size:4;tab-size:4}body{line-height:inherit;margin:0}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-feature-settings:normal;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em;font-variation-settings:normal}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}button,input,optgroup,select,textarea{font-feature-settings:inherit;color:inherit;font-family:inherit;font-size:100%;font-variation-settings:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;margin:0;padding:0}button,select{text-transform:none}button,input:where([type=button]),input:where([type=reset]),input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0}fieldset,legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{color:#9ca3af;opacity:1}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}[hidden]:where(:not([hidden=until-found])){display:none}.container{width:100%}@media (min-width:640px){.container{max-width:640px}}@media (min-width:768px){.container{max-width:768px}}@media (min-width:1024px){.container{max-width:1024px}}@media (min-width:1280px){.container{max-width:1280px}}@media (min-width:1536px){.container{max-width:1536px}}.sr-only{clip:rect(0,0,0,0);border-width:0;height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.fixed{position:fixed}.bottom-3{bottom:.75rem}.left-3{left:.75rem}.right-3{right:.75rem}.z-\\[2147483647\\]{z-index:2147483647}.mx-auto{margin-left:auto;margin-right:auto}.ml-2{margin-left:.5rem}.ml-3{margin-left:.75rem}.mt-1{margin-top:.25rem}.flex{display:flex}.inline-flex{display:inline-flex}.h-10{height:2.5rem}.h-5{height:1.25rem}.w-10{width:2.5rem}.w-5{width:1.25rem}.max-w-sm{max-width:24rem}.grow{flex-grow:1}@keyframes slideUp{0%{transform:translateY(100%)}to{transform:translateY(0)}}.animate-slideUp{animation:slideUp .2s ease-out forwards}.self-start{align-self:flex-start}.self-center{align-self:center}.overflow-hidden{overflow:hidden}.rounded-full{border-radius:9999px}.rounded-lg{border-radius:.5rem}.rounded-md{border-radius:.375rem}.border{border-width:1px}.border-gray-200{--tw-border-opacity:1;border-color:rgb(229 231 235/var(--tw-border-opacity,1))}.border-transparent{border-color:transparent}.bg-transparent{background-color:transparent}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity,1))}.p-0{padding:0}.p-2{padding:.5rem}.p-4{padding:1rem}.text-sm{font-size:.875rem;line-height:1.25rem}.font-medium{font-weight:500}.text-gray-400{--tw-text-opacity:1;color:rgb(156 163 175/var(--tw-text-opacity,1))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity,1))}.text-gray-900{--tw-text-opacity:1;color:rgb(17 24 39/var(--tw-text-opacity,1))}.shadow-lg{--tw-shadow:0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rgba(0,0,0,.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.filter{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.hover\\:text-gray-500:hover{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity,1))}.focus\\:border-transparent:focus{border-color:transparent}.focus\\:ring-0:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000)}.dark\\:border-gray-600:is(.dark *){--tw-border-opacity:1;border-color:rgb(75 85 99/var(--tw-border-opacity,1))}.dark\\:bg-gray-700:is(.dark *){--tw-bg-opacity:1;background-color:rgb(55 65 81/var(--tw-bg-opacity,1))}.dark\\:text-gray-100:is(.dark *){--tw-text-opacity:1;color:rgb(243 244 246/var(--tw-text-opacity,1))}.dark\\:text-gray-200:is(.dark *){--tw-text-opacity:1;color:rgb(229 231 235/var(--tw-text-opacity,1))}.dark\\:text-gray-300:is(.dark *){--tw-text-opacity:1;color:rgb(209 213 219/var(--tw-text-opacity,1))}.dark\\:hover\\:text-gray-300:hover:is(.dark *){--tw-text-opacity:1;color:rgb(209 213 219/var(--tw-text-opacity,1))}@media (min-width:768px){.md\\:bottom-4{bottom:1rem}.md\\:left-auto{left:auto}.md\\:right-4{right:1rem}.md\\:self-start{align-self:flex-start}}';
function Notification(_ref) {
  let {
    title,
    message,
    icon,
    onClick,
    onDismiss,
    animate
  } = _ref;
  return u2("div", {
    className: `fixed bottom-3 left-3 right-3 mx-auto z-[2147483647] flex max-w-sm
        overflow-hidden rounded-lg border border-gray-200 bg-white p-4 shadow-lg
        md:bottom-4 md:left-auto md:right-4 dark:bg-gray-700 dark:border-gray-600
        ${animate ? "animate-slideUp" : ""}`,
    role: "alert",
    onClick: (e3) => {
      if (onClick) {
        e3.stopPropagation();
        onClick == null ? void 0 : onClick();
      }
    },
    children: [icon && u2("img", {
      className: "h-10 w-10 self-center rounded-md md:self-start",
      src: icon,
      alt: title
    }), u2("div", {
      className: "ml-3 grow",
      children: [u2("p", {
        className: "text-sm font-medium text-gray-900 dark:text-gray-100",
        children: title
      }), u2("p", {
        className: "mt-1 text-sm text-gray-500 dark:text-gray-300",
        children: message
      })]
    }), u2("button", {
      className: `ml-2 inline-flex rounded-full text-gray-400 hover:text-gray-500 focus:ring-0
          dark:text-gray-200 dark:hover:text-gray-300 ${isMobile() ? "self-center p-2" : "self-start p-0 bg-transparent border-transparent focus:border-transparent"}`,
      onClick: (e3) => {
        e3.stopPropagation();
        onDismiss == null ? void 0 : onDismiss();
      },
      children: [u2("span", {
        className: "sr-only",
        children: "Close"
      }), u2("svg", {
        className: "h-5 w-5",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        fill: "currentColor",
        "aria-hidden": "true",
        children: u2("path", {
          fillRule: "evenodd",
          d: "M14.354 5.646a.5.5 0 00-.708 0L10 9.293 5.354 4.646a.5.5 0 00-.708.708L9.293 10l-4.647 4.646a.5.5 0 00.708.708L10 10.707l4.646 4.647a.5.5 0 00.708-.708L10.707 10l4.647-4.646a.5.5 0 000-.708z"
        })
      })]
    })]
  });
}
var renderRoot = null;
var id = 0;
var dismissTimeout = null;
function createRenderRoot() {
  const shadowHost = document.createElement("div");
  const shadowRoot = shadowHost.attachShadow({
    mode: "open"
  });
  const container = document.createElement("div");
  shadowRoot.appendChild(container);
  document.body.appendChild(shadowHost);
  const style = document.createElement("style");
  style.textContent = css_248z;
  shadowRoot.appendChild(style);
  const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
  const listener = () => {
    container.classList.toggle("dark", mediaQuery.matches);
  };
  mediaQuery.addEventListener("change", listener);
  listener();
  return container;
}
function showNotification(_ref) {
  let {
    title,
    message,
    icon,
    onClick,
    onDismiss,
    debounceDelay = 0
  } = _ref;
  if (!renderRoot) {
    renderRoot = createRenderRoot();
  }
  const animate = !dismissTimeout;
  if (dismissTimeout) {
    clearTimeout(dismissTimeout);
    dismissTimeout = null;
  }
  G2(u2(Notification, {
    title,
    message,
    icon,
    onClick,
    onDismiss: () => {
      onDismiss == null ? void 0 : onDismiss();
      dismissUi();
    },
    animate
  }, id++), renderRoot);
  function dismissUi() {
    if (renderRoot) {
      G2(null, renderRoot);
    }
  }
  return {
    dismiss: () => {
      dismissTimeout = setTimeout(() => {
        dismissTimeout = null;
        dismissUi();
      }, debounceDelay);
    }
  };
}
var img = "data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 384 512'%3e%3c!--!Font Awesome Free 6.7.1 by %40fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons%2c Inc.--%3e%3cpath d='M16 64C16 28.7 44.7 0 80 0L304 0c35.3 0 64 28.7 64 64l0 384c0 35.3-28.7 64-64 64L80 512c-35.3 0-64-28.7-64-64L16 64zM224 448a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zM304 64L80 64l0 320 224 0 0-320z'/%3e%3c/svg%3e";
function createStore2(initialState) {
  const subscribers = /* @__PURE__ */ new Set();
  let state = initialState;
  const subscribe4 = (subscriber2) => {
    subscribers.add(subscriber2);
    return () => {
      subscribers.delete(subscriber2);
    };
  };
  const setState = (newState) => {
    state = newState;
    subscribers.forEach((subscriber2) => subscriber2(state));
  };
  const getState = () => state;
  return {
    subscribe: subscribe4,
    setState,
    getState
  };
}
var providerStore = createStore2({});
var makeServicePlugin = function(provider) {
  let config3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return {
    name: SERVICE_PLUGIN_NAME,
    f_type: "ServicePlugin",
    type: "discovery-service",
    serviceStrategy: {
      method: WC_SERVICE_METHOD,
      exec: makeExec(provider, config3, import("./dist-TWC4KAC7.js").then((m6) => m6.WalletConnectModal))
    },
    services: []
  };
};
var makeExec = (signerPromise, config3, WalletConnectModal) => {
  return async (_ref) => {
    var _a2, _b, _c2, _d, _e4, _f2;
    let {
      service,
      body,
      opts,
      abortSignal,
      user,
      config: config4
    } = _ref;
    preloadImage((_a2 = service.provider) == null ? void 0 : _a2.icon);
    const {
      wcRequestHook,
      pairingModalOverride,
      disableNotifications: _appDisabledNotifications
    } = config4;
    const appDisabledNotifications = ((_b = service.params) == null ? void 0 : _b.disableNotifications) ?? _appDisabledNotifications;
    const resolvedProvider = await resolveProvider({
      provider: signerPromise,
      externalProviderOrTopic: (_c2 = service.params) == null ? void 0 : _c2.externalProvider
    });
    invariant(!!resolvedProvider, "WalletConnect is not initialized");
    const {
      provider,
      isExternal
    } = resolvedProvider;
    let session = provider.session ?? null, pairing;
    const method = service.endpoint;
    const appLink = validateAppLink(service);
    if (!!(session == null ? void 0 : session.topic) && (session == null ? void 0 : session.topic) === ((_d = service.params) == null ? void 0 : _d.externalProvider) && method === FLOW_METHODS.FLOW_AUTHN) {
      return user;
    }
    if (session == null) {
      session = await new Promise((resolve2, reject) => {
        function onClose() {
          reject(`Declined: Externally Halted`);
        }
        connectWc(WalletConnectModal)({
          service,
          onClose,
          appLink,
          provider,
          method,
          pairing,
          wcRequestHook,
          pairingModalOverride,
          abortSignal,
          network: config4.client.network
        }).then(resolve2, reject);
      });
    }
    if (wcRequestHook && wcRequestHook instanceof Function) {
      wcRequestHook({
        type: REQUEST_TYPES.SIGNING_REQUEST,
        method,
        service,
        session: session ?? null,
        pairing: null,
        uri: null
      });
    }
    if (shouldDeepLink({
      service,
      user
    })) {
      openDeeplink(appLink);
    }
    const walletDisabledNotifications = ((_e4 = session == null ? void 0 : session.sessionProperties) == null ? void 0 : _e4["fclWc.disableNotificationsOnMobile"]) === "true";
    const notification = !appDisabledNotifications && !walletDisabledNotifications ? showWcRequestNotification({
      user,
      service
    }) : null;
    return await request({
      method,
      body,
      session,
      provider,
      abortSignal,
      isExternal,
      disableNotifications: (_f2 = service.params) == null ? void 0 : _f2.disableNotifications
    }).finally(() => notification == null ? void 0 : notification.dismiss());
    function validateAppLink(_ref2) {
      let {
        uid: uid3
      } = _ref2;
      if (!(uid3 && /^(ftp|http|https):\/\/[^ "]+$/.test(uid3))) {
        log({
          title: "WalletConnect Service Warning",
          message: `service.uid should be a valid universal link url. Found: ${uid3}`,
          level: LEVELS.warn
        });
      }
      return uid3;
    }
  };
};
function connectWc(WalletConnectModal) {
  return async (_ref3) => {
    let {
      service,
      onClose,
      appLink,
      provider,
      method,
      pairing,
      wcRequestHook,
      pairingModalOverride,
      abortSignal,
      network
    } = _ref3;
    const projectId = provider.providerOpts.projectId;
    invariant(!!projectId, "Cannot establish connection, WalletConnect projectId is undefined");
    let _uri = null, walletConnectModal = null;
    try {
      const {
        uri,
        approval
      } = await createSessionProposal({
        provider,
        existingPairing: pairing,
        network
      });
      if (wcRequestHook && wcRequestHook instanceof Function) {
        wcRequestHook({
          type: REQUEST_TYPES.SESSION_REQUEST,
          method,
          service,
          session: null,
          pairing: pairing ?? null,
          uri: uri ?? null
        });
      }
      if (isMobile()) {
        const queryString = new URLSearchParams({
          uri
        }).toString();
        let url = pairing == null ? appLink + "?" + queryString : appLink;
        openDeeplink(url);
      } else if (!pairing) {
        if (!pairingModalOverride) {
          walletConnectModal = new (await WalletConnectModal)({
            projectId
          });
          walletConnectModal.openModal({
            uri,
            onClose
          });
          const unsubscribeModal = walletConnectModal.subscribeModal((state) => {
            if (state.open === false) {
              onClose == null ? void 0 : onClose();
              unsubscribeModal();
            }
          });
        } else {
          pairingModalOverride(uri, onClose);
        }
      }
      const session = await Promise.race([approval(), new Promise((_6, reject) => {
        if (abortSignal == null ? void 0 : abortSignal.aborted) {
          reject(new Error("Session request aborted"));
        }
        abortSignal == null ? void 0 : abortSignal.addEventListener("abort", () => {
          reject(new Error("Session request aborted"));
        });
      })]);
      if (session == null) {
        throw new Error("Session request failed");
      }
      return session;
    } catch (error) {
      if (error instanceof Error) {
        log({
          title: `${error.name} Error establishing WalletConnect session`,
          message: `
          ${error.message}
          uri: ${_uri}
        `,
          level: LEVELS.error
        });
      }
      onClose();
      throw error;
    } finally {
      walletConnectModal == null ? void 0 : walletConnectModal.closeModal();
    }
  };
}
function showWcRequestNotification(_ref4) {
  var _a2;
  let {
    service,
    user
  } = _ref4;
  const authnService = (_a2 = user == null ? void 0 : user.services) == null ? void 0 : _a2.find((s4) => s4.type === "authn");
  const walletProvider = (authnService == null ? void 0 : authnService.provider) || service.provider;
  return showNotification({
    title: (walletProvider == null ? void 0 : walletProvider.name) || "Mobile Wallet",
    message: isMobile() ? "Tap to view request in app" : "Pending request on your mobile device",
    icon: (walletProvider == null ? void 0 : walletProvider.icon) || img,
    onClick: isMobile() && service.uid ? () => openDeeplink(service.uid) : void 0,
    debounceDelay: service.type === "pre-authz" ? 500 : 0
  });
}
async function resolveProvider(_ref5) {
  var _a2;
  let {
    provider,
    externalProviderOrTopic
  } = _ref5;
  if (!externalProviderOrTopic) {
    const resolved2 = await provider;
    return resolved2 ? {
      provider: resolved2,
      isExternal: false
    } : null;
  }
  if (typeof externalProviderOrTopic !== "string") {
    const topic = (_a2 = externalProviderOrTopic.session) == null ? void 0 : _a2.topic;
    if (!topic) {
      throw new Error("Cannot resolve provider: UniversalProvider is not initialized");
    }
    providerStore.setState({
      [topic]: externalProviderOrTopic
    });
    return {
      provider: externalProviderOrTopic,
      isExternal: true
    };
  }
  const externalTopic = externalProviderOrTopic;
  if (externalTopic) {
    let storedProvider = providerStore.getState()[externalTopic];
    if (!storedProvider) {
      let unsubStore;
      let timeout;
      storedProvider = await new Promise((resolve2, reject) => {
        unsubStore = providerStore.subscribe(() => {
          const provider2 = providerStore.getState()[externalTopic];
          if (provider2) {
            resolve2(provider2);
          }
        });
        timeout = setTimeout(() => {
          reject(new Error(`Provider for external topic ${externalTopic} not found after 5 seconds`));
        }, 5e3);
      }).finally(() => {
        clearTimeout(timeout);
        unsubStore();
      });
    }
    return {
      provider: storedProvider,
      isExternal: true
    };
  }
  const resolved = await provider;
  return resolved ? {
    provider: resolved,
    isExternal: false
  } : null;
}
var DEFAULT_RELAY_URL = "wss://relay.walletconnect.com";
var DEFAULT_LOGGER = "debug";
var providerPromise = Promise.resolve(null);
var initClient = async (_ref) => {
  let {
    projectId,
    metadata
  } = _ref;
  invariant(projectId != null, "FCL Wallet Connect Error: WalletConnect projectId is required");
  try {
    return rs2.init({
      logger: DEFAULT_LOGGER,
      relayUrl: DEFAULT_RELAY_URL,
      projectId,
      metadata
    });
  } catch (error) {
    if (error instanceof Error) {
      log({
        title: `${error.name} fcl-wc Init Client`,
        message: error.message,
        level: LEVELS.error
      });
    }
    throw error;
  }
};
var initLazy = (config3) => {
  const {
    FclWcServicePlugin,
    providerPromise: providerPromise2
  } = initHelper(config3);
  discovery.authn.update();
  return {
    FclWcServicePlugin,
    providerPromise: providerPromise2
  };
};
var initHelper = (config3) => {
  if (typeof window === "undefined") {
    throw new Error("FCL Wallet Connect Plugin can only be initialized in the browser");
  }
  providerPromise = providerPromise.catch(() => null).then((_client) => {
    if (_client) {
      return _client;
    } else {
      return initClient({
        projectId: config3.projectId,
        metadata: config3.metadata
      });
    }
  }).catch((e3) => {
    log({
      title: `WalletConnect Client Initialization Error`,
      message: e3.message ? e3.message : e3,
      level: LEVELS.error
    });
    throw e3;
  });
  const FclWcServicePlugin = makeServicePlugin(providerPromise, config3);
  return {
    FclWcServicePlugin,
    providerPromise
  };
};
async function getProvider() {
  return providerPromise.then((provider) => {
    if (!provider) {
      throw new Error("WalletConnect client not initialized");
    }
    return provider;
  });
}

// node_modules/@onflow/util-rpc/dist/index.module.js
var RpcErrorCode = function(RpcErrorCode2) {
  RpcErrorCode2[RpcErrorCode2["INVALID_REQUEST"] = -32600] = "INVALID_REQUEST";
  RpcErrorCode2[RpcErrorCode2["METHOD_NOT_FOUND"] = -32601] = "METHOD_NOT_FOUND";
  RpcErrorCode2[RpcErrorCode2["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
  RpcErrorCode2[RpcErrorCode2["INTERNAL_ERROR"] = -32603] = "INTERNAL_ERROR";
  RpcErrorCode2[RpcErrorCode2["PARSE_ERROR"] = -32700] = "PARSE_ERROR";
  return RpcErrorCode2;
}({});
var RpcError2 = class extends Error {
  constructor(code2, message, data) {
    super(message);
    this.code = code2;
    this.message = message;
    this.data = data;
  }
};
var ReservedRpcMethods = function(ReservedRpcMethods2) {
  ReservedRpcMethods2["HELLO"] = "rpc_hello";
  return ReservedRpcMethods2;
}(ReservedRpcMethods || {});
var RpcClient = class {
  constructor(_ref) {
    __publicField(this, "id", 0);
    __publicField(this, "setSend", () => {
    });
    __publicField(this, "_send", (() => new Promise((resolve2) => {
      this.setSend = resolve2;
    }))());
    __publicField(this, "peerInfo", (() => new Promise((resolve2, reject) => {
      this.resolvePeerInfo = resolve2;
      this.rejectPeerInfo = reject;
    }))());
    __publicField(this, "enabledNotifications", []);
    __publicField(this, "requestHandlers", (() => ({}))());
    __publicField(this, "subscriptions", (() => ({}))());
    __publicField(this, "messageListeners", []);
    let {
      notifications
    } = _ref;
    this.enabledNotifications = notifications || [];
    this.on(ReservedRpcMethods.HELLO, (info) => {
      this.resolvePeerInfo(info);
      return this.ownInfo();
    });
  }
  connect(_ref2) {
    let {
      send: send4
    } = _ref2;
    this.setSend(send4);
    this.requestWithoutConnection(ReservedRpcMethods.HELLO, this.ownInfo()).then((info) => {
      this.resolvePeerInfo(info);
    }).catch(this.rejectPeerInfo);
  }
  ownInfo() {
    return {
      requests: Object.keys(this.requestHandlers),
      notifications: this.enabledNotifications
    };
  }
  async send(msg) {
    return (await this._send)(msg);
  }
  receive(msg) {
    if ((msg == null ? void 0 : msg.jsonrpc) !== "2.0") {
      return;
    }
    if ("method" in msg) {
      if ("id" in msg) {
        this.handleRequest(msg);
      } else {
        this.handleNotification(msg);
      }
    }
    this.messageListeners.forEach((listener) => listener(msg));
  }
  async handleRequest(msg) {
    const handler = this.requestHandlers[msg.method];
    if (handler) {
      try {
        const result = await handler(msg.params);
        this.send({
          jsonrpc: "2.0",
          id: msg.id,
          result
        });
      } catch (error) {
        if (error instanceof RpcError2) {
          this.send({
            jsonrpc: "2.0",
            id: msg.id,
            error: {
              code: error.code,
              message: error.message,
              data: error.data
            }
          });
        } else {
          this.send({
            jsonrpc: "2.0",
            id: msg.id,
            error: {
              code: RpcErrorCode.INTERNAL_ERROR,
              message: error == null ? void 0 : error.message
            }
          });
        }
      }
    } else {
      this.send({
        jsonrpc: "2.0",
        id: msg.id,
        error: {
          code: RpcErrorCode.METHOD_NOT_FOUND,
          message: `Method not found: ${msg.method}`
        }
      });
    }
  }
  handleNotification(msg) {
    if (this.subscriptions[msg.method]) {
      this.subscriptions[msg.method].forEach((handler) => handler(msg.params));
    }
  }
  onMessage(listener) {
    this.messageListeners.push(listener);
    return () => {
      this.messageListeners = this.messageListeners.filter((l8) => l8 !== listener);
    };
  }
  async notify(method, params2) {
    await this.onceConnected();
    this.send({
      jsonrpc: "2.0",
      method,
      params: params2
    });
  }
  async request(method, params2) {
    await this.onceConnected();
    return this.requestWithoutConnection(method, params2);
  }
  async requestWithoutConnection(method, params2) {
    const id2 = this.id++;
    let unsub = () => {
    };
    const result = new Promise((resolve2, reject) => {
      unsub = this.onMessage((msg) => {
        if (msg.id === id2 && ("result" in msg || "error" in msg)) {
          if (msg.error) {
            const rpcError = new RpcError2(msg.error.code, msg.error.message, msg.error.data);
            reject(rpcError);
          }
          resolve2(msg.result);
        }
      });
    }).finally(unsub);
    this.send({
      jsonrpc: "2.0",
      method,
      params: params2,
      id: id2
    });
    return result;
  }
  on(method, handler) {
    this.requestHandlers[method] = handler;
  }
  subscribe(method, handler) {
    this.subscriptions[method] = this.subscriptions[method] || /* @__PURE__ */ new Set();
    this.subscriptions[method].add(handler);
  }
  unsubscribe(method, handler) {
    var _a2;
    (_a2 = this.subscriptions[method]) == null ? void 0 : _a2.delete(handler);
  }
  async onceConnected() {
    return this.peerInfo.then(() => {
    });
  }
  async getAvailableRequests() {
    return this.peerInfo.then((info) => info.requests);
  }
  async getAvailableNotifications() {
    return this.peerInfo.then((info) => info.notifications);
  }
};

// node_modules/@onflow/fcl/dist/fcl.module.js
var AbortController4 = globalThis.AbortController || require_browser();
function wrapAbortSignal(signal) {
  const controller = new AbortController4();
  if (signal == null ? void 0 : signal.aborted)
    controller.abort();
  signal == null ? void 0 : signal.addEventListener("abort", () => controller.abort());
  return controller;
}
var DiscoveryNotification = function(DiscoveryNotification2) {
  DiscoveryNotification2["NOTIFY_QRCODE_CONNECTING"] = "notifyQrCodeConnecting";
  DiscoveryNotification2["NOTIFY_QRCODE_CONNECTED"] = "notifyQrCodeConnected";
  DiscoveryNotification2["NOTIFY_QRCODE_ERROR"] = "notifyQrCodeError";
  return DiscoveryNotification2;
}({});
var FclRequest = function(FclRequest2) {
  FclRequest2["REQUEST_WALLETCONNECT_QRCODE"] = "requestWalletConnectQrCode";
  FclRequest2["EXEC_SERVICE"] = "execService";
  return FclRequest2;
}({});
var APPROVED = "APPROVED";
var execServiceHandlerFactory = (_ref) => {
  let {
    onExecResult,
    execStrategyOpts,
    execStrategyArgs,
    abortSignal
  } = _ref;
  return async (_ref2) => {
    var _a2;
    let {
      service
    } = _ref2;
    try {
      const result = await execStrategy(
        {
          ...execStrategyOpts,
          service,
          config: execStrategyOpts.config,
          abortSignal
        },
        ...execStrategyArgs.slice(1)
      );
      const status = ((_a2 = normalizePollingResponse(result)) == null ? void 0 : _a2.status) || APPROVED;
      if (status === APPROVED) {
        onExecResult(result);
        return null;
      } else {
        throw new Error((result == null ? void 0 : result.reason) || "Service was declined");
      }
    } catch (e3) {
      throw new Error((e3 == null ? void 0 : e3.message) || "Service execution failed");
    }
  };
};
var wcRequestHandlerFactory = (_ref) => {
  let {
    rpc: rpc2,
    network,
    onExecResult,
    authnBody,
    abortSignal
  } = _ref;
  const watchQr = watchQrFactory({
    rpc: rpc2,
    authnBody
  });
  return async (_ref2) => {
    if (abortSignal.aborted) {
      throw new Error("Handler has been terminated");
    }
    const provider = await getProvider();
    const {
      uri,
      approval
    } = await createSessionProposal({
      provider,
      network
    });
    watchQr({
      uri,
      approval,
      onExecResult
    });
    return {
      uri
    };
  };
};
function watchQrFactory(_ref3) {
  let {
    rpc: rpc2,
    authnBody
  } = _ref3;
  return (_ref4) => {
    let {
      uri,
      approval,
      onExecResult
    } = _ref4;
    setTimeout(async () => {
      try {
        const provider = await getProvider();
        const session = await approval();
        rpc2.notify(DiscoveryNotification.NOTIFY_QRCODE_CONNECTING, {
          uri
        });
        const result = await request({
          method: FLOW_METHODS.FLOW_AUTHN,
          body: authnBody,
          session,
          provider
        });
        rpc2.notify(DiscoveryNotification.NOTIFY_QRCODE_CONNECTED, {
          uri
        });
        onExecResult(result);
      } catch (e3) {
        rpc2.notify(DiscoveryNotification.NOTIFY_QRCODE_ERROR, {
          uri,
          error: e3 == null ? void 0 : e3.message
        });
      }
    }, 0);
  };
}
function createDiscoveryRpcClient(_ref) {
  let {
    onExecResult,
    body,
    opts,
    args: args2,
    abortSignal
  } = _ref;
  const rpc2 = new RpcClient({
    notifications: []
  });
  rpc2.on(FclRequest.REQUEST_WALLETCONNECT_QRCODE, wcRequestHandlerFactory({
    network: opts.config.client.network,
    rpc: rpc2,
    onExecResult,
    authnBody: body,
    abortSignal
  }));
  rpc2.on(FclRequest.EXEC_SERVICE, execServiceHandlerFactory({
    onExecResult,
    execStrategyOpts: opts,
    execStrategyArgs: args2,
    abortSignal
  }));
  return {
    connect: rpc2.connect.bind(rpc2),
    receive: rpc2.receive.bind(rpc2)
  };
}
async function execDiscovery(_ref) {
  let {
    customRpc,
    opts,
    args: args2,
    abortSignal
  } = _ref;
  const discoveryConfig = {
    ...opts.config,
    client: {
      ...opts.config.client,
      discoveryRpcEnabled: true
    }
  };
  return execStrategy(
    {
      ...opts,
      config: discoveryConfig,
      customRpc,
      abortSignal
    },
    ...args2.slice(1)
  );
}
var AUTHN_SERVICE_TYPE = "authn";
async function execStrategyHook() {
  for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++) {
    args2[_key] = arguments[_key];
  }
  const [opts] = args2;
  const {
    body,
    abortSignal: baseAbortSignal,
    service
  } = opts;
  if ((service == null ? void 0 : service.type) !== AUTHN_SERVICE_TYPE) {
    console.error(`ERROR: Invalid service type for FCL Discovery execStrategyHook, expected "${AUTHN_SERVICE_TYPE}" but got "${service == null ? void 0 : service.type}"`);
    return execStrategy(...args2);
  }
  const abortController = wrapAbortSignal(baseAbortSignal);
  let discoveryPromise;
  const resultPromise = new Promise(async (resolve2, reject) => {
    const rpc2 = createDiscoveryRpcClient({
      onExecResult: resolve2,
      body,
      opts,
      args: args2,
      abortSignal: abortController.signal
    });
    discoveryPromise = execDiscovery({
      customRpc: rpc2,
      opts,
      args: args2,
      abortSignal: abortController.signal
    }).then(resolve2, reject);
  });
  await resultPromise.catch(() => {
  });
  await Promise.race([new Promise((resolve2) => setTimeout(resolve2, 1e3)), discoveryPromise]).catch(() => {
  });
  abortController.abort();
  return resultPromise;
}
var isServer = typeof window === "undefined";
var getMetadata = (config3) => {
  const appTitle = config3.appDetailTitle;
  const appIcon = config3.appDetailIcon;
  const appDescription = config3.appDetailDescription;
  const appUrl = config3.appDetailUrl;
  return {
    name: appTitle ?? document.title,
    description: appDescription ?? "",
    url: appUrl ?? window.location.origin,
    icons: appIcon ? [appIcon] : []
  };
};
var lastConfig = null;
var hasLoaded = false;
function initFclWcLoader() {
  config2.subscribe(async (fullConfig) => {
    const wcConfig = {
      walletConnectProjectId: fullConfig["walletconnect.projectId"],
      walletConnectDisableNotifications: fullConfig["walletconnect.disableNotifications"],
      appDetailTitle: fullConfig["app.detail.title"],
      appDetailIcon: fullConfig["app.detail.icon"],
      appDetailDescription: fullConfig["app.detail.description"],
      appDetailUrl: fullConfig["app.detail.url"]
    };
    loadFclWc(wcConfig);
  });
}
function loadFclWc(wcConfig) {
  if (isServer) {
    return;
  }
  const projectId = wcConfig.walletConnectProjectId;
  const disableNotifications = wcConfig.walletConnectDisableNotifications;
  const previousConfig = lastConfig;
  lastConfig = JSON.stringify(wcConfig, null, 2);
  if (hasLoaded) {
    if (previousConfig !== lastConfig) {
      console.warn(`FCL WalletConnect Plugin has been already loaded with different configuration. It is not possible to change the configuration after the plugin has been loaded.

Previous configuration:
${previousConfig}

Current configuration:
${lastConfig}`);
    }
    return;
  }
  const isConfigured = !!projectId;
  if (!isConfigured) {
    return;
  }
  invariant(!!projectId, "FCL Configuration value for 'walletconnect.projectId' is required");
  if (pluginRegistry.getPlugins().has(SERVICE_PLUGIN_NAME)) {
    if (!hasLoaded) {
      console.warn("It seems like the FCL WalletConnect plugins has been already loaded manually. This is no longer necessary, please see the documentation for more information.");
    }
    hasLoaded = true;
    return;
  }
  hasLoaded = true;
  const {
    providerPromise: _clientPromise,
    FclWcServicePlugin
  } = initLazy({
    projectId,
    metadata: getMetadata(wcConfig),
    disableNotifications: disableNotifications ?? void 0
  });
  pluginRegistry.add([FclWcServicePlugin]);
}
var PLATFORM = "web";
var discoveryOpts = {
  execStrategy: execStrategyHook
};
function createFlowClient(params2) {
  loadFclWc({
    walletConnectProjectId: params2.walletconnectProjectId,
    walletConnectDisableNotifications: params2.walletconnectDisableNotifications,
    appDetailTitle: params2.appDetailTitle,
    appDetailIcon: params2.appDetailIcon,
    appDetailDescription: params2.appDetailDescription,
    appDetailUrl: params2.appDetailUrl
  });
  const fclCore = createFlowClientCore({
    flowNetwork: params2.flowNetwork,
    flowJson: params2.flowJson,
    accessNodeUrl: params2.accessNodeUrl,
    computeLimit: params2.computeLimit || 9999,
    transport: params2.transport,
    platform: PLATFORM,
    storage: params2.storage || LOCAL_STORAGE,
    discovery: discoveryOpts,
    discoveryWalletMethod: params2.discoveryWalletMethod || "IFRAME/RPC",
    discoveryAuthnEndpoint: params2.discoveryAuthnEndpoint,
    discoveryAuthnInclude: params2.discoveryAuthnInclude,
    customResolver: params2.customResolver,
    customDecoders: params2.customDecoders,
    discoveryWallet: params2.discoveryWallet,
    appDetailTitle: params2.appDetailTitle,
    appDetailIcon: params2.appDetailIcon,
    appDetailDescription: params2.appDetailDescription,
    appDetailUrl: params2.appDetailUrl,
    serviceOpenIdScopes: params2.serviceOpenIdScopes
  });
  return {
    ...fclCore
  };
}
var FRAME = "FCL_IFRAME";
var FRAME_STYLES = `
  position:fixed;
  top: 0px;
  right: 0px;
  bottom: 0px;
  left: 0px;
  height: 100%;
  width: 100vw;
  display:block;
  background:rgba(0,0,0,0.25);
  z-index: 2147483647;
  box-sizing: border-box;
  color-scheme: light;
`;
function renderFrame(src2) {
  invariant(!document.getElementById(FRAME), "Attempt at triggering multiple Frames", {
    src: src2
  });
  const $frame = document.createElement("iframe");
  $frame.src = src2;
  $frame.id = FRAME;
  $frame.allow = "usb *; hid *; clipboard-write";
  $frame.frameBorder = "0";
  $frame.style.cssText = FRAME_STYLES;
  document.body.append($frame);
  const unmount = () => {
    if (document.getElementById(FRAME)) {
      document.getElementById(FRAME).remove();
    }
  };
  return [$frame.contentWindow, unmount];
}
var POP = "FCL_POP";
var popup = null;
var previousUrl$1 = null;
function popupWindow(url, windowName, win, w6, h6) {
  const y6 = win.top.outerHeight / 2 + win.top.screenY - h6 / 2;
  const x7 = win.top.outerWidth / 2 + win.top.screenX - w6 / 2;
  const popup2 = win.open(url, windowName, `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w6}, height=${h6}, top=${y6}, left=${x7}`);
  if (!popup2)
    throw new Error("Popup failed to open (was it blocked by a popup blocker?)");
  return popup2;
}
function renderPop(src2) {
  if (popup == null || (popup == null ? void 0 : popup.closed)) {
    popup = popupWindow(src2, POP, window, 640, 770);
  } else if (previousUrl$1 !== src2) {
    popup.location.replace(src2);
    popup.focus();
  } else {
    popup.focus();
  }
  previousUrl$1 = src2;
  const unmount = () => {
    if (popup && !popup.closed) {
      popup.close();
    }
    popup = null;
  };
  return [popup, unmount];
}
var tab$1 = null;
var previousUrl = null;
function renderTab(src2) {
  if (tab$1 == null || (tab$1 == null ? void 0 : tab$1.closed)) {
    tab$1 = window.open(src2, "_blank");
    if (!tab$1)
      throw new Error("Tab failed to open (was it blocked by the browser?)");
  } else if (previousUrl !== src2) {
    tab$1.location.replace(src2);
    tab$1.focus();
  } else {
    tab$1.focus();
  }
  previousUrl = src2;
  const unmount = () => {
    if (tab$1 && !tab$1.closed) {
      tab$1.close();
    }
    tab$1 = null;
  };
  return [tab$1, unmount];
}
var getDefaultConfig = () => {
  return {
    "discovery.wallet.method.default": "IFRAME/RPC"
  };
};
var noop$3 = () => {
};
function frame(service) {
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (service == null)
    return {
      send: noop$3,
      close: noop$3
    };
  const onClose = opts.onClose || noop$3;
  const onMessage = opts.onMessage || noop$3;
  const onReady = opts.onReady || noop$3;
  const onResponse = opts.onResponse || noop$3;
  const onCustomRpc = opts.onCustomRpc || noop$3;
  let $frame, unmount;
  const handler = buildMessageHandler({
    close: close2,
    send: send4,
    onReady,
    onResponse,
    onMessage,
    onCustomRpc,
    getSource: () => $frame
  });
  window.addEventListener("message", handler);
  [$frame, unmount] = renderFrame(serviceEndpoint(service));
  return {
    send: send4,
    close: close2
  };
  function close2() {
    try {
      window.removeEventListener("message", handler);
      unmount();
      onClose();
    } catch (error) {
      console.error("Frame Close Error", error);
    }
  }
  function send4(msg) {
    try {
      $frame.postMessage(JSON.parse(JSON.stringify(msg || {})), "*");
    } catch (error) {
      console.error("Frame Send Error", msg, error);
    }
  }
}
var VERSION2 = "1.20.1";
function execIframeRPC(_ref) {
  let {
    service,
    body,
    config: config3,
    customRpc,
    abortSignal,
    opts
  } = _ref;
  return new Promise((resolve2, reject) => {
    const id2 = uid();
    const includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall;
    const {
      close: close2
    } = frame(service, {
      async onReady(_6, _ref2) {
        let {
          send: send4
        } = _ref2;
        try {
          send4({
            type: "FCL:VIEW:READY:RESPONSE",
            fclVersion: VERSION2,
            body,
            service: {
              params: service.params,
              data: service.data,
              type: service.type
            },
            config: config3
          });
          send4({
            fclVersion: VERSION2,
            type: "FCL:FRAME:READY:RESPONSE",
            body,
            service: {
              params: service.params,
              data: service.data,
              type: service.type
            },
            config: config3,
            deprecated: {
              message: "FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE"
            }
          });
          if (includeOlderJsonRpcCall) {
            send4({
              jsonrpc: "2.0",
              id: id2,
              method: "fcl:sign",
              params: [body, service.params],
              deprecated: {
                message: "jsonrpc is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE"
              }
            });
          }
          customRpc == null ? void 0 : customRpc.connect({
            send: (msg) => {
              send4({
                type: "FCL:VIEW:CUSTOM_RPC",
                payload: msg
              });
            }
          });
        } catch (error) {
          throw error;
        }
      },
      onResponse(e3, _ref3) {
        let {
          close: close3
        } = _ref3;
        try {
          if (typeof e3.data !== "object")
            return;
          const resp = normalizePollingResponse(e3.data);
          switch (resp.status) {
            case "APPROVED":
              resolve2(resp.data);
              close3();
              break;
            case "DECLINED":
              reject(`Declined: ${resp.reason || "No reason supplied"}`);
              close3();
              break;
            case "REDIRECT":
              resolve2(resp);
              close3();
              break;
            default:
              reject(`Declined: No reason supplied`);
              close3();
              break;
          }
        } catch (error) {
          console.error("execIframeRPC onResponse error", error);
          throw error;
        }
      },
      onMessage(e3, _ref4) {
        let {
          close: close3
        } = _ref4;
        try {
          if (typeof e3.data !== "object")
            return;
          if (e3.data.jsonrpc !== "2.0")
            return;
          if (e3.data.id !== id2)
            return;
          const resp = normalizePollingResponse(e3.data.result);
          switch (resp.status) {
            case "APPROVED":
              resolve2(resp.data);
              close3();
              break;
            case "DECLINED":
              reject(`Declined: ${resp.reason || "No reason supplied"}`);
              close3();
              break;
            case "REDIRECT":
              resolve2(resp);
              close3();
              break;
            default:
              reject(`Declined: No reason supplied`);
              close3();
              break;
          }
        } catch (error) {
          console.error("execIframeRPC onMessage error", error);
          throw error;
        }
      },
      onClose() {
        reject(`Declined: Externally Halted`);
      },
      onCustomRpc(msg) {
        customRpc == null ? void 0 : customRpc.receive(msg);
      }
    });
    if (abortSignal) {
      if (abortSignal.aborted) {
        reject(`Declined: Aborted`);
        close2();
      }
      abortSignal.addEventListener("abort", () => {
        reject(`Declined: Aborted`);
        close2();
      });
    }
  });
}
var noop$2 = () => {
};
function pop(service) {
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (service == null)
    return {
      send: noop$2,
      close: noop$2
    };
  const onClose = opts.onClose || noop$2;
  const onMessage = opts.onMessage || noop$2;
  const onReady = opts.onReady || noop$2;
  const onResponse = opts.onResponse || noop$2;
  const onCustomRpc = opts.onCustomRpc || noop$2;
  let $pop, unmount;
  const handler = buildMessageHandler({
    close: close2,
    send: send4,
    onReady,
    onResponse,
    onMessage,
    onCustomRpc,
    getSource: () => $pop
  });
  window.addEventListener("message", handler);
  [$pop, unmount] = renderPop(serviceEndpoint(service));
  const timer = setInterval(function() {
    if ($pop && $pop.closed) {
      close2();
    }
  }, 500);
  return {
    send: send4,
    close: close2
  };
  function close2() {
    try {
      window.removeEventListener("message", handler);
      clearInterval(timer);
      unmount();
      onClose();
    } catch (error) {
      console.error("Popup Close Error", error);
    }
  }
  function send4(msg) {
    try {
      $pop.postMessage(JSON.parse(JSON.stringify(msg || {})), "*");
    } catch (error) {
      console.error("Popup Send Error", msg, error);
    }
  }
}
function execPopRPC(_ref) {
  let {
    service,
    body,
    config: config3,
    abortSignal,
    customRpc,
    opts
  } = _ref;
  return new Promise((resolve2, reject) => {
    const id2 = uid();
    const {
      redir,
      includeOlderJsonRpcCall
    } = opts;
    const {
      close: close2
    } = pop(service, {
      customRpc,
      async onReady(_6, _ref2) {
        let {
          send: send4
        } = _ref2;
        try {
          send4({
            fclVersion: VERSION2,
            type: "FCL:VIEW:READY:RESPONSE",
            body,
            service: {
              params: service.params,
              data: service.data,
              type: service.type
            },
            config: config3
          });
          send4({
            fclVersion: VERSION2,
            type: "FCL:FRAME:READY:RESPONSE",
            body,
            service: {
              params: service.params,
              data: service.data,
              type: service.type
            },
            config: config3,
            deprecated: {
              message: "FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE"
            }
          });
          if (includeOlderJsonRpcCall) {
            send4({
              jsonrpc: "2.0",
              id: id2,
              method: "fcl:sign",
              params: [body, service.params]
            });
          }
          customRpc == null ? void 0 : customRpc.connect({
            send: (msg) => {
              send4({
                type: "FCL:VIEW:CUSTOM_RPC",
                payload: msg
              });
            }
          });
        } catch (error) {
          throw error;
        }
      },
      onResponse(e3, _ref3) {
        let {
          close: close3
        } = _ref3;
        try {
          if (typeof e3.data !== "object")
            return;
          const resp = normalizePollingResponse(e3.data);
          switch (resp.status) {
            case "APPROVED":
              resolve2(resp.data);
              !redir && close3();
              break;
            case "DECLINED":
              reject(`Declined: ${resp.reason || "No reason supplied"}`);
              close3();
              break;
            case "REDIRECT":
              resolve2(resp);
              close3();
              break;
            default:
              reject(`Declined: No reason supplied`);
              close3();
              break;
          }
        } catch (error) {
          console.error("execPopRPC onResponse error", error);
          throw error;
        }
      },
      onMessage(e3, _ref4) {
        let {
          close: close3
        } = _ref4;
        try {
          if (typeof e3.data !== "object")
            return;
          if (e3.data.jsonrpc !== "2.0")
            return;
          if (e3.data.id !== id2)
            return;
          const resp = normalizePollingResponse(e3.data.result);
          switch (resp.status) {
            case "APPROVED":
              resolve2(resp.data);
              !redir && close3();
              break;
            case "DECLINED":
              reject(`Declined: ${resp.reason || "No reason supplied"}`);
              close3();
              break;
            case "REDIRECT":
              resolve2(resp);
              close3();
              break;
            default:
              reject(`Declined: No reason supplied`);
              close3();
              break;
          }
        } catch (error) {
          console.error("execPopRPC onMessage error", error);
          throw error;
        }
      },
      onClose() {
        reject(`Declined: Externally Halted`);
      },
      onCustomRpc(msg) {
        customRpc == null ? void 0 : customRpc.receive(msg);
      }
    });
    if (abortSignal) {
      if (abortSignal.aborted) {
        reject(`Declined: Aborted`);
        close2();
      }
      abortSignal.addEventListener("abort", () => {
        reject(`Declined: Aborted`);
        close2();
      });
    }
  });
}
var noop$1 = () => {
};
function tab(service) {
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (service == null)
    return {
      send: noop$1,
      close: noop$1
    };
  const onClose = opts.onClose || noop$1;
  const onMessage = opts.onMessage || noop$1;
  const onReady = opts.onReady || noop$1;
  const onResponse = opts.onResponse || noop$1;
  const onCustomRpc = opts.onCustomRpc || noop$1;
  let $tab, unmount;
  const handler = buildMessageHandler({
    close: close2,
    send: send4,
    onReady,
    onResponse,
    onMessage,
    onCustomRpc,
    getSource: () => $tab
  });
  window.addEventListener("message", handler);
  [$tab, unmount] = renderTab(serviceEndpoint(service));
  const timer = setInterval(function() {
    if ($tab && $tab.closed) {
      close2();
    }
  }, 500);
  return {
    send: send4,
    close: close2
  };
  function close2() {
    try {
      window.removeEventListener("message", handler);
      clearInterval(timer);
      unmount();
      onClose();
    } catch (error) {
      console.error("Tab Close Error", error);
    }
  }
  function send4(msg) {
    try {
      $tab.postMessage(JSON.parse(JSON.stringify(msg || {})), "*");
    } catch (error) {
      console.error("Tab Send Error", msg, error);
    }
  }
}
function execTabRPC(_ref) {
  let {
    service,
    body,
    config: config3,
    abortSignal,
    customRpc,
    opts
  } = _ref;
  return new Promise((resolve2, reject) => {
    const id2 = uid();
    const {
      redir,
      includeOlderJsonRpcCall
    } = opts;
    const {
      close: close2
    } = tab(service, {
      customRpc,
      async onReady(_6, _ref2) {
        let {
          send: send4
        } = _ref2;
        try {
          send4({
            fclVersion: VERSION2,
            type: "FCL:VIEW:READY:RESPONSE",
            body,
            service: {
              params: service.params,
              data: service.data,
              type: service.type
            },
            config: config3
          });
          send4({
            fclVersion: VERSION2,
            type: "FCL:FRAME:READY:RESPONSE",
            body,
            service: {
              params: service.params,
              data: service.data,
              type: service.type
            },
            config: config3,
            deprecated: {
              message: "FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE"
            }
          });
          if (includeOlderJsonRpcCall) {
            send4({
              jsonrpc: "2.0",
              id: id2,
              method: "fcl:sign",
              params: [body, service.params]
            });
          }
          customRpc == null ? void 0 : customRpc.connect({
            send: (msg) => {
              send4({
                type: "FCL:VIEW:CUSTOM_RPC",
                payload: msg
              });
            }
          });
        } catch (error) {
          throw error;
        }
      },
      onResponse(e3, _ref3) {
        let {
          close: close3
        } = _ref3;
        try {
          if (typeof e3.data !== "object")
            return;
          const resp = normalizePollingResponse(e3.data);
          switch (resp.status) {
            case "APPROVED":
              resolve2(resp.data);
              !redir && close3();
              break;
            case "DECLINED":
              reject(`Declined: ${resp.reason || "No reason supplied"}`);
              close3();
              break;
            case "REDIRECT":
              resolve2(resp);
              close3();
              break;
            default:
              reject(`Declined: No reason supplied`);
              close3();
              break;
          }
        } catch (error) {
          console.error("execPopRPC onResponse error", error);
          throw error;
        }
      },
      onMessage(e3, _ref4) {
        let {
          close: close3
        } = _ref4;
        try {
          if (typeof e3.data !== "object")
            return;
          if (e3.data.jsonrpc !== "2.0")
            return;
          if (e3.data.id !== id2)
            return;
          const resp = normalizePollingResponse(e3.data.result);
          switch (resp.status) {
            case "APPROVED":
              resolve2(resp.data);
              !redir && close3();
              break;
            case "DECLINED":
              reject(`Declined: ${resp.reason || "No reason supplied"}`);
              close3();
              break;
            case "REDIRECT":
              resolve2(resp);
              close3();
              break;
            default:
              reject(`Declined: No reason supplied`);
              close3();
              break;
          }
        } catch (error) {
          console.error("execPopRPC onMessage error", error);
          throw error;
        }
      },
      onClose() {
        reject(`Declined: Externally Halted`);
      },
      onCustomRpc(msg) {
        customRpc == null ? void 0 : customRpc.receive(msg);
      }
    });
    if (abortSignal) {
      if (abortSignal.aborted) {
        close2();
        reject(`Declined: Aborted`);
      }
      abortSignal.addEventListener("abort", () => {
        close2();
        reject(`Declined: Aborted`);
      });
    }
  });
}
var noop2 = () => {
};
function extension(service) {
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (service == null)
    return {
      send: noop2,
      close: noop2
    };
  const onClose = opts.onClose || noop2;
  const onMessage = opts.onMessage || noop2;
  const onReady = opts.onReady || noop2;
  const onResponse = opts.onResponse || noop2;
  const onCustomRpc = opts.onCustomRpc || noop2;
  const handler = buildMessageHandler({
    close: close2,
    send: send4,
    onReady,
    onResponse,
    onMessage,
    onCustomRpc
  });
  window.addEventListener("message", handler);
  send4({
    service
  });
  return {
    send: send4,
    close: close2
  };
  function close2() {
    try {
      window.removeEventListener("message", handler);
      onClose();
    } catch (error) {
      console.error("Ext Close Error", error);
    }
  }
  function send4(msg) {
    try {
      window && window.postMessage(JSON.parse(JSON.stringify(msg || {})), "*");
    } catch (error) {
      console.error("Ext Send Error", msg, error);
    }
  }
}
function execExtRPC(_ref) {
  let {
    service,
    body,
    config: config3,
    abortSignal,
    customRpc,
    opts
  } = _ref;
  return new Promise((resolve2, reject) => {
    const {
      close: close2
    } = extension(service, {
      async onReady(_6, _ref2) {
        let {
          send: send4
        } = _ref2;
        try {
          send4({
            fclVersion: VERSION2,
            type: "FCL:VIEW:READY:RESPONSE",
            body,
            service: {
              params: service.params,
              data: service.data,
              type: service.type
            },
            config: config3
          });
          customRpc == null ? void 0 : customRpc.connect({
            send: (msg) => {
              send4({
                type: "FCL:VIEW:CUSTOM_RPC",
                body: msg
              });
            }
          });
        } catch (error) {
          throw error;
        }
      },
      onResponse(e3, _ref3) {
        let {
          close: close3
        } = _ref3;
        try {
          if (typeof e3.data !== "object")
            return;
          const resp = normalizePollingResponse(e3.data);
          switch (resp.status) {
            case "APPROVED":
              resolve2(resp.data);
              close3();
              break;
            case "DECLINED":
              reject(`Declined: ${resp.reason || "No reason supplied"}`);
              close3();
              break;
            case "REDIRECT":
              resolve2(resp);
              close3();
              break;
            default:
              reject(`Declined: No reason supplied`);
              close3();
              break;
          }
        } catch (error) {
          console.error("execExtRPC onResponse error", error);
          throw error;
        }
      },
      onClose() {
        reject(`Declined: Externally Halted`);
      },
      onCustomRpc(msg) {
        customRpc == null ? void 0 : customRpc.receive(msg);
      }
    });
    if (abortSignal) {
      if (abortSignal.aborted) {
        close2();
        reject(`Declined: Aborted`);
      }
      abortSignal.addEventListener("abort", () => {
        close2();
        reject(`Declined: Aborted`);
      });
    }
  });
}
var NOT_IMPLEMENTED = () => {
  throw new Error("Strategy util has not been implemented on this platform");
};
var VIEWS = {
  "VIEW/IFRAME": renderFrame,
  "VIEW/POP": renderPop,
  "VIEW/TAB": renderTab,
  "VIEW/MOBILE_BROWSER": NOT_IMPLEMENTED,
  "VIEW/DEEPLINK": NOT_IMPLEMENTED
};
async function execLocal(service) {
  let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
    serviceEndpoint: () => {
    }
  };
  const {
    serviceEndpoint: serviceEndpoint2
  } = opts;
  try {
    return VIEWS[service.method](serviceEndpoint2(service), opts);
  } catch (error) {
    console.error("execLocal({service, opts = {}})", error, {
      service,
      opts
    });
    throw error;
  }
}
var coreStrategies = {
  [CORE_STRATEGIES["HTTP/RPC"]]: getExecHttpPost(execLocal),
  [CORE_STRATEGIES["HTTP/POST"]]: getExecHttpPost(execLocal),
  [CORE_STRATEGIES["IFRAME/RPC"]]: execIframeRPC,
  [CORE_STRATEGIES["POP/RPC"]]: execPopRPC,
  [CORE_STRATEGIES["TAB/RPC"]]: execTabRPC,
  [CORE_STRATEGIES["EXT/RPC"]]: execExtRPC
};
var isServerSide2 = () => typeof window === "undefined";
var safeParseJSON2 = (str) => {
  if (str == null)
    return null;
  try {
    return JSON.parse(str);
  } catch (error) {
    return null;
  }
};
var SESSION_STORAGE = {
  can: !isServerSide2() && !!window.sessionStorage,
  get: async (key) => safeParseJSON2(sessionStorage.getItem(key)),
  put: async (key, value) => sessionStorage.setItem(key, JSON.stringify(value))
};
var LOCAL_STORAGE = {
  can: !isServerSide2() && !!window.localStorage,
  get: async (key) => safeParseJSON2(localStorage.getItem(key)),
  put: async (key, value) => localStorage.setItem(key, JSON.stringify(value))
};
var currentUser = getCurrentUser({
  platform: "web",
  discovery: discoveryOpts,
  getStorageProvider: async () => {
    return await config2.get("fcl.storage") || LOCAL_STORAGE;
  }
});
var mutate = getMutate(currentUser);
var authenticate = function() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return currentUser().authenticate(opts);
};
var unauthenticate = () => currentUser().unauthenticate();
var reauthenticate = function() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  currentUser().unauthenticate();
  return currentUser().authenticate(opts);
};
var signUp = function() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return currentUser().authenticate(opts);
};
var logIn = function() {
  let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return currentUser().authenticate(opts);
};
var authz = currentUser().authorization;
config2(getDefaultConfig());
initServiceRegistry({
  coreStrategies
});
initFclWcLoader();
export {
  index$1 as AppUtils,
  FvmErrorCode,
  HashAlgorithm,
  InteractionResolverKind,
  InteractionStatus,
  InteractionTag,
  index2 as InteractionTemplateUtils,
  LOCAL_STORAGE,
  SESSION_STORAGE,
  SignatureAlgorithm,
  SubscriptionTopic,
  index as TestUtils,
  TransactionError,
  TransactionExecutionStatus,
  TransactionRole,
  VERSION,
  index$2 as WalletUtils,
  account,
  arg,
  args,
  atBlockHeight,
  atBlockId,
  authenticate,
  authorization,
  authorizations,
  authz,
  block,
  build,
  template as cadence,
  template as cdc,
  config2 as config,
  createFlowClient,
  createSignableVoucher,
  currentUser,
  decode,
  discovery,
  display,
  events,
  flowEmulator,
  flowMainnet,
  flowTestnet,
  getAccount,
  getBlock,
  getBlockHeader,
  getChainId,
  getCollection,
  getEvents,
  getEventsAtBlockHeightRange,
  getEventsAtBlockIds,
  getNetworkParameters,
  getNodeVersionInfo,
  getTransaction,
  getTransactionStatus,
  invariant2 as invariant,
  isBad,
  isOk,
  limit,
  logIn,
  mutate,
  nodeVersionInfo,
  param,
  params,
  payer,
  ping,
  pipe2 as pipe,
  pluginRegistry,
  proposer,
  query,
  queryRaw,
  reauthenticate,
  ref,
  sansPrefix,
  script,
  send3 as send,
  serialize,
  signUp,
  subscribe3 as subscribe,
  subscribeEvents,
  subscribeRaw,
  types_module_exports as t,
  transaction,
  transaction2 as tx,
  unauthenticate,
  validator,
  verifyUserSignatures,
  voucherIntercept,
  voucherToTxId,
  why,
  withPrefix2 as withPrefix
};
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/relay-auth/dist/index.es.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/utils/dist/index.es.js:
  (*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=@onflow_fcl.js.map
