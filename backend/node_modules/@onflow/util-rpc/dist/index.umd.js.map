{"version":3,"file":"index.umd.js","sources":["../src/rpc-error.ts","../src/rpc-client.ts"],"sourcesContent":["export enum RpcErrorCode {\n  INVALID_REQUEST = -32600,\n  METHOD_NOT_FOUND = -32601,\n  INVALID_PARAMS = -32602,\n  INTERNAL_ERROR = -32603,\n  PARSE_ERROR = -32700,\n}\n\nexport class RpcError extends Error {\n  constructor(\n    public code: RpcErrorCode,\n    public message: string,\n    public data?: any\n  ) {\n    super(message)\n  }\n}\n","import {RpcMessage, RpcNotificationMessage, RpcRequestMessage} from \"./messages\"\nimport {RpcError, RpcErrorCode} from \"./rpc-error\"\n\nexport type RpcRequest<P, R> = {\n  type: \"request\"\n  params: P\n  result: R\n}\n\nexport type RpcNotification<P> = {\n  type: \"notification\"\n  params: P\n}\n\nenum ReservedRpcMethods {\n  HELLO = \"rpc_hello\",\n}\n\ntype RequestHandler<T = any> = (params: T) => any\ntype NotificationHandler<T = any> = (params: T) => void\n\ntype PeerInfo = {\n  requests: string[]\n  notifications: string[]\n}\n\nexport class RpcClient<\n  PeerRequests extends Record<string, RpcRequest<any, any>>,\n  PeerNotifications extends Record<string, RpcNotification<any>>,\n> {\n  private id = 0\n\n  private setSend: (send: (msg: RpcMessage) => void) => void = () => {}\n  private _send: Promise<(msg: RpcMessage) => void> = new Promise(resolve => {\n    this.setSend = resolve\n  })\n\n  private resolvePeerInfo!: (info: PeerInfo) => void\n  private rejectPeerInfo!: (error: Error) => void\n  private peerInfo: Promise<PeerInfo> = new Promise((resolve, reject) => {\n    this.resolvePeerInfo = resolve\n    this.rejectPeerInfo = reject\n  })\n\n  private enabledNotifications: string[] = []\n  private requestHandlers: Record<string, RequestHandler> = {} as any\n  private subscriptions: Record<string, Set<NotificationHandler>> = {} as any\n  private messageListeners: ((msg: any) => void)[] = []\n\n  constructor({notifications}: {notifications?: string[]}) {\n    this.enabledNotifications = notifications || []\n    this.on(ReservedRpcMethods.HELLO, (info: PeerInfo) => {\n      this.resolvePeerInfo(info)\n      return this.ownInfo()\n    })\n  }\n\n  connect({send}: {send: (msg: RpcMessage) => void}) {\n    this.setSend(send)\n    this.requestWithoutConnection(ReservedRpcMethods.HELLO, this.ownInfo())\n      .then(info => {\n        this.resolvePeerInfo(info)\n      })\n      .catch(this.rejectPeerInfo)\n  }\n\n  private ownInfo(): PeerInfo {\n    return {\n      requests: Object.keys(this.requestHandlers),\n      notifications: this.enabledNotifications,\n    }\n  }\n\n  private async send(msg: RpcMessage) {\n    return (await this._send)(msg)\n  }\n\n  receive(msg: RpcMessage) {\n    if (msg?.jsonrpc !== \"2.0\") {\n      return\n    }\n\n    if (\"method\" in msg) {\n      if (\"id\" in msg) {\n        this.handleRequest(msg)\n      } else {\n        this.handleNotification(msg)\n      }\n    }\n\n    this.messageListeners.forEach(listener => listener(msg))\n  }\n\n  private async handleRequest(msg: RpcRequestMessage) {\n    const handler = this.requestHandlers[msg.method]\n    if (handler) {\n      try {\n        const result = await handler(msg.params)\n        this.send({\n          jsonrpc: \"2.0\",\n          id: msg.id,\n          result,\n        })\n      } catch (error: any) {\n        if (error instanceof RpcError) {\n          this.send({\n            jsonrpc: \"2.0\",\n            id: msg.id,\n            error: {\n              code: error.code,\n              message: error.message,\n              data: error.data,\n            },\n          })\n        } else {\n          this.send({\n            jsonrpc: \"2.0\",\n            id: msg.id,\n            error: {\n              code: RpcErrorCode.INTERNAL_ERROR,\n              message: error?.message,\n            },\n          })\n        }\n      }\n    } else {\n      this.send({\n        jsonrpc: \"2.0\",\n        id: msg.id,\n        error: {\n          code: RpcErrorCode.METHOD_NOT_FOUND,\n          message: `Method not found: ${msg.method}`,\n        },\n      })\n    }\n  }\n\n  private handleNotification(msg: RpcNotificationMessage) {\n    if (this.subscriptions[msg.method]) {\n      this.subscriptions[msg.method].forEach(handler => handler(msg.params))\n    }\n  }\n\n  private onMessage(listener: (msg: any) => void) {\n    this.messageListeners.push(listener)\n    return () => {\n      this.messageListeners = this.messageListeners.filter(l => l !== listener)\n    }\n  }\n\n  async notify<R extends keyof PeerNotifications & string>(\n    method: R,\n    params: PeerNotifications[R][\"params\"]\n  ) {\n    await this.onceConnected()\n\n    this.send({\n      jsonrpc: \"2.0\",\n      method,\n      params,\n    })\n  }\n\n  async request<R extends keyof PeerRequests & string>(\n    method: R,\n    params: PeerRequests[R][\"params\"]\n  ): Promise<PeerRequests[R][\"result\"]> {\n    await this.onceConnected()\n    return this.requestWithoutConnection(method, params)\n  }\n\n  private async requestWithoutConnection<R extends keyof PeerRequests & string>(\n    method: R,\n    params: PeerRequests[R][\"params\"]\n  ): Promise<PeerRequests[R][\"result\"]> {\n    const id = this.id++\n\n    let unsub = () => {}\n    const result = new Promise<PeerRequests[R][\"result\"]>((resolve, reject) => {\n      unsub = this.onMessage(msg => {\n        if (msg.id === id && (\"result\" in msg || \"error\" in msg)) {\n          if (msg.error) {\n            const rpcError = new RpcError(\n              msg.error.code,\n              msg.error.message,\n              msg.error.data\n            )\n            reject(rpcError)\n          }\n          resolve(msg.result)\n        }\n      })\n    }).finally(unsub)\n\n    this.send({\n      jsonrpc: \"2.0\",\n      method,\n      params,\n      id,\n    })\n\n    return result\n  }\n\n  on(method: string, handler: RequestHandler) {\n    this.requestHandlers[method] = handler\n  }\n\n  subscribe<R extends string>(method: R, handler: RequestHandler<any>) {\n    this.subscriptions[method] = this.subscriptions[method] || new Set()\n    this.subscriptions[method].add(handler)\n  }\n\n  unsubscribe<R extends string>(method: R, handler: RequestHandler<any>) {\n    this.subscriptions[method]?.delete(handler)\n  }\n\n  async onceConnected() {\n    return this.peerInfo.then(() => {})\n  }\n\n  async getAvailableRequests() {\n    return this.peerInfo.then(info => info.requests)\n  }\n\n  async getAvailableNotifications() {\n    return this.peerInfo.then(info => info.notifications)\n  }\n}\n"],"names":["RpcErrorCode","RpcError","Error","constructor","code","message","data","ReservedRpcMethods","RpcClient","id","setSend","_send","Promise","resolve","peerInfo","reject","resolvePeerInfo","rejectPeerInfo","enabledNotifications","requestHandlers","subscriptions","messageListeners","_ref","notifications","on","HELLO","info","ownInfo","connect","_ref2","send","requestWithoutConnection","then","catch","requests","Object","keys","msg","receive","jsonrpc","handleRequest","handleNotification","forEach","listener","handler","method","result","params","error","INTERNAL_ERROR","METHOD_NOT_FOUND","onMessage","push","filter","l","notify","onceConnected","request","unsub","rpcError","finally","subscribe","Set","add","unsubscribe","delete","getAvailableRequests","getAvailableNotifications"],"mappings":"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"}